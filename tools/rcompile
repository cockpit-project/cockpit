#!/bin/sh
# This file is part of Cockpit.
#
# Copyright (C) 2014 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

set -euf

base=$(dirname $0)
parents=no
success=no
minify=no
filetype=
output=

jsl=${JSL:-jsl}

warning()
{
    echo "rcompile: $@" >&2
}

is_function()
{
    case $(type $1 2> /dev/null) in
    *function*)
        return 0;
        ;;
    *)
        return 1
        ;;
    esac
}

is_yes()
{
    case ${1-} in
    [Yy][Ee][Ss])
        return 0
        ;;
    *)
        return 1
        ;;
    esac
}

empty()
{
        case ${@:+1} in
        '')
                return 0
                ;;
        *)
                return 1
                ;;
        esac
}

cleanup()
{
    if ! empty $output; then
        if is_yes $success; then
            mv "$output.tmp" "$output"
        else
            rm -f "$output.tmp"
        fi
    fi
}

resolve()
{
    case "$1" in
    /*)
        echo "$1"
        ;;
    *)
        echo "$PWD/$1"
        ;;
    esac
}

trap cleanup EXIT

guess()
{
    case $1 in
    *.js)
        echo "javascript"
        ;;
    *.html)
        echo "html"
        ;;
    *.css)
        echo "css"
        ;;
    *)
        warning "couldn't determine file type: $1"
        exit 2
    esac
}

minify_javascript()
{
    perl -e \
'use strict;
use JavaScript::Minifier::XS qw(minify);
for my $f (@ARGV) {
    local ($/);
    open my $in, "<", $f or die "$f: $!\n";
    print minify(<$in>);
    close $in;
}' "$@" \
    || (
        warning "no worries, using cat instead"
        echo "/* Auto-generated; DO NOT EDIT; No minify tool available on build system */"
        cat "$@"
       )
}

output_javascript()
{
    echo "/* Auto-generated; DO NOT EDIT */"
    echo "/*jsl:ignoreall*/"
    cat "$@"
}

jslint()
{
    failed=no
    for f in "$@"; do
        jsl -conf $base/jsl.conf -nologo -nofilelisting -nosummary -process "$f" || failed=yes
    done
    if is_yes $failed; then
        exit 1
    fi
}

process_javascript()
{
    jslint "$@"

    if ! empty $output; then
        if is_yes $minify; then
            minify_javascript "$@"
        else
            output_javascript "$@"
        fi
    fi
}

html_jslint()
{
    # Resolving external dependencies for jsl is a royal pain. We change directory
    # and preprocess all the input files so that it can find scripts. We assume:
    #  - relative -> pkg/
    #  - /static  -> lib/
    #  - /cockpit -> pkg/

    conf=$(resolve $base)/jsl.conf
    pkg=$base/../pkg

    failed=no
    for f in "$@"; do
        sed -f $base/jsl.sed "$f" |
            (
                cd $pkg
                lines=$($jsl -conf $conf -nologo -nofilelisting -nosummary -stdin)
                ret=$?
                if ! empty "$lines"; then
                    echo "$lines" | while read line; do
                        echo "$f$line" >&2
                    done
                fi
                exit $ret
            ) || failed=yes
    done
    if is_yes $failed; then
        exit 1
    fi
}

process_html()
{
    if [ $# -ne 1 ]; then
        warning "only one html file can be processed at a time"
    fi

    # TODO: Currently we don't validate HTML only javascript in html
    html_jslint "$1"

    # TODO: Currently we don't support HTML minify
    if ! empty $output; then
        sed '/<html.*>/a <!-- Auto-generated; DO NOT EDIT; No minify tool available on build system -->"' "$1"
    fi
}

process_css()
{
    # TODO: Currently we don't validate CSS

    # TODO: Currently we don't support CSS minify
    if ! empty $output; then
        echo "/* Auto-generated; DO NOT EDIT; No minify tool available on build system */"
        cat "$@"
    fi
}

usage()
{
    echo "usage: rcompile [-p] [-t type] [-o output] file ..." >&2
    exit 2
}

while getopts "mo:pt:" opt; do
    case "$opt" in
    m)
        minify=yes
        ;;
    o)
        output="$OPTARG"
        ;;
    p)
        parents=yes
        ;;
    t)
        filetype="$OPTARG"
	    ;;
    *)
        usage
        ;;
    esac
done

shift $(expr $OPTIND - 1)

if [ $# -lt 1 ]; then
    warning "no input files specified"
    exit 2
fi

if [ "$filetype" = "" ]; then
    filetype=$(guess "$1")
fi

func="process_$filetype"
if ! is_function $func; then
    warning "unsupported file type: $filetype"
    exit 2
fi

if [ -n "$output" ]; then
    if [ "$parents" = "yes" ]; then
        mkdir -p $(dirname "$output")
    fi
    exec > "$output.tmp"
fi

$func "$@"
success=yes
