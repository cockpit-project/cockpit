#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *

import socket
import time

def wait_for_port (addr, port):
    tries = 0
    while tries < 20:
        try:
            socket.create_connection ((addr, port)).close()
            return
        except:
            time.sleep(0.2)
        tries += 1
    assert False

def inject_extras(browser):
    browser.eval_js("""
    legacy_page_from_id = function (id) {
      var n;
      for (n = 0; n < cockpit.pages.length; n++) {
        if (cockpit.pages[n].id == id)
          return cockpit.pages[n];
      }
      return null;
    }
    """)

def get_webapp_machines(browser):
    wm = { }
    cockpit = browser.eval_js("return legacy_page_from_id('dashboard').dbus_clients.map(function (c) { return c.target });")
    for i in range (0, len(cockpit)):
        wm[cockpit[i]] = i;
    return wm

def machine_selector(machine):
    return '#dashboard-machines a:nth-child(%d)' % (machine+1)

def action_btn_selector(machine):
    return machine_selector(machine) + ' .cockpit-machine-action'

def graph_selector(machine):
    return machine_selector(machine) + ' .cockpit-graph'

def hostname_selector(machine):
    return machine_selector(machine) + ' .cockpit-machine-info > div:nth-child(1)'

def machine_error_selector(machine):
    return machine_selector(machine) + ' .cockpit-machine-error'

def wait_dashboard_addresses(b, expected):
    b.wait_js_func(
        """(function (expected) {
        var page = legacy_page_from_id('dashboard');
        var actual = page.dbus_clients.map(function (c) { return c.target });
        return expected.sort().toString() == actual.sort().toString();
        })""", expected)

def add_machine(b, address):
    b.click('#dashboard-add-server')
    b.wait_popup('dashboard_setup_server_dialog')
    b.set_val('#dashboard_setup_address', address)
    b.wait_text('#dashboard_setup_next', "Next")
    b.click('#dashboard_setup_next')
    b.wait_text('#dashboard_setup_next', "Add host")
    b.click('#dashboard_setup_next')
    b.wait_text('#dashboard_setup_next', "Close")
    b.click('#dashboard_setup_next')
    b.wait_popdown('dashboard_setup_server_dialog')


class TestMultiMachine(MachineCase):
    def setUp(self):
        MachineCase.setUp(self)
        self.machine2 = self.new_machine()
        self.machine2.start()
        self.machine2.wait_boot()

        self.machine3 = self.new_machine()
        self.machine3.start()
        self.machine3.wait_boot()

    def tearDown(self):
        if self.runner and self.runner.wasSuccessful():
            self.check_journal_messages(self.machine2)
            self.check_journal_messages(self.machine3)
        MachineCase.tearDown(self)

    def testBasic(self):
        b = self.browser
        m1 = self.machine
        m2 = self.machine2
        m3 = self.machine3

        def kill_user_admin(machine):
            # logind from systemd 208 is buggy, so we use systemd directly if it fails
            # https://bugs.freedesktop.org/show_bug.cgi?id=71092
            machine.execute("loginctl kill-user admin || systemctl kill user-1000.slice")

        wait_for_port(m2.address, 22)
        wait_for_port(m3.address, 22)

        self.login_and_go("dashboard")
        inject_extras(b)
        wait_dashboard_addresses (b, [ "localhost" ])

        add_machine(b, m2.address)
        wait_dashboard_addresses (b, [ "localhost", m2.address ])

        add_machine(b, m3.address)
        wait_dashboard_addresses (b, [ "localhost", m2.address, m3.address ])

        wm = get_webapp_machines(b)
        m1_index = wm["localhost"]
        m2_index = wm[m2.address]
        m3_index = wm[m3.address]

        # TODO: The concrete error message when killing the bridge and
        # session is not predictable.  So we just wait for any error
        # to appear without checking the precise text.  We print the
        # error message, to help with issue #606.
        #
        # https://github.com/cockpit-project/cockpit/issues/606

        kill_user_admin(m2)
        b.wait_visible(machine_error_selector(m2_index))
        print "Error for m2: %s" % b.text(machine_error_selector(m2_index))

        kill_user_admin(m3)
        b.wait_visible(machine_error_selector(m3_index))
        print "Error for m3: %s" % b.text(machine_error_selector(m3_index))

        b.wait_action_btn (action_btn_selector (m2_index), "Connect")
        b.click_action_btn (action_btn_selector (m2_index))
        b.wait_visible (graph_selector (m2_index))

        b.wait_action_btn (action_btn_selector (m3_index), "Connect")
        b.click_action_btn (action_btn_selector (m3_index))
        b.wait_visible (graph_selector (m3_index))

        self.allow_restart_journal_messages()
        self.allow_journal_messages(".*: .* host key for server is not known: .*",
                                    # Might happen when killing the bridge.
                                    "localhost: dropping message while waiting for child to exit",
                                    "Received message for unknown channel: .*",
                                    ".*: error reading from ssh",
                                    ".*: bridge program failed: Child process exited with code .*")

    def testExternalPage(self):
        b = self.browser
        m1 = self.machine
        m2 = self.machine2

        # Modify the terminals to be different on the two machines.
        m1.execute("sed -i -e 's/<body>/<body>magic-m1-token/' /usr/share/cockpit/server/terminal.html")
        m2.execute("sed -i -e 's/<body>/<body>magic-m2-token/' /usr/share/cockpit/server/terminal.html")

        self.login_and_go("dashboard")
        inject_extras(b)
        add_machine(b, m2.address)
        wait_dashboard_addresses (b, [ "localhost", m2.address ])

        b.go("/%s/terminal" % m2.address)
        b.wait_page("/%s/terminal" % m2.address)
        b.wait_present("body")
        b.wait_in_text("body", "magic-m2-token")

        b.switch_to_parent_frame()
        b.go("/local/terminal")
        b.wait_page("/local/terminal")
        b.wait_present("body")
        b.wait_in_text("body", "magic-m1-token")

test_main()
