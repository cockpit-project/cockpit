#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import json
import os
import sys

import testvm

topdir = os.path.normpath(os.path.join(os.path.dirname(__file__), "..")
machine_test_dir = "/tmp/avocado_tests"

def prepare_avocado_tests(machine):
    """ Upload all avocado related files and create the results directory
    """
    machine.execute(command="mkdir -p " + MachineCase.avocado_results_dir)
    machine.upload([os.path.join(machine.test_dir, "avocado")], machine_test_dir)

def run_avocado_tests(machine, avocado_tests, print_failed=True, env=[]):
    """ Execute avocado on the machine with the passed environment variables and run
        the specified tests. For example:
        run_avocado(machine,
                    ["checklogin-basic.py", "checklogin-raw.py"],
                    ["HUB=" + self.selenium.address, "BROWSER=firefox"]
                   )
        Return success of the tests (True: all passed, False: at least one failed)
        If 'print_failed' is True, attempt to print a list of failed tests
    """
    cmd_parts = env + ["avocado run",
                 "--job-results-dir " + MachineCase.avocado_results_dir,
                 ' '.join([machine_test_dir + os.sep + x for x in avocado_tests]),
                 ">&2"
                 ]

    try:
        machine.execute(" ".join(cmd_parts))
    except:
        if print_failed:
            # try to get the list of failed tests
            try:
                failed_tests_info = machine.execute(
                        command="cat " + os.path.join(MachineCase.avocado_results_dir, "latest/results.json"),
                        quiet=True
                    )
                machine.execute("cp -v *.png %s/ 2>/dev/null || true" % MachineCase.avocado_results_dir)
                failed_tests = json.loads(failed_tests_info)
                for t in failed_tests['tests']:
                    test_status = t['status']
                    if test_status != 'PASS':
                        test_name = t['test']
                        if test_name.startswith(machine_test_dir + '/'):
                            test_name = test_name[(len(machine_test_dir) + 1):]
                        fail_reason = t['fail_reason']
                        print "[" + test_status + "] " + test_name + " (" + fail_reason + ")"
            except:
                print "Unable to show avocado test result summary"
        return False

    return True

def wait_for_selenium_running(machine, host, port=4444):
    WAIT_SELENIUM_RUNNING = """#!/bin/sh
until curl -s --connect-timeout 1 http://%s:%d >/dev/null; do
sleep 0.5;
done;
""" % (host, port)
    with testvm.stdchannel_redirected(sys.stdout, os.devnull):
        with Timeout(seconds=30, error_message="Timeout while waiting for selenium to start"):
            machine.execute(script=WAIT_SELENIUM_RUNNING)

def run_avocado(avocado_tests, verbose):
    machine = testvm.VirtMachine(verbose=verbose, label="avocado")
    selenium = testvm.VirtMachine(image="selenium", label="selenium", verbose=verbose)

    try:
        machine.start()
        selenium.start()
        machine.wait_boot()
        selenium.wait_boot()

        # start selenium on the server
        selenium.upload(["./guest/selenium_start.sh"], "/root")
        selenium.execute(command="/root/selenium_start.sh")

        machine.execute("adduser test")
        machine.execute("echo superhardpasswordtest5554 | passwd --stdin test")
        machine.execute("usermod -a -G wheel test")
        machine.execute("echo 'test        ALL=(ALL)       NOPASSWD: ALL' >> /etc/sudoers")
        machine.execute("sed -i 's/^Defaults.*requiretty/#&/g' /etc/sudoers")
        machine.execute("echo 'Defaults !requiretty' >> /etc/sudoers")

        wait_for_selenium_running(machine, selenium.address)
        prepare_avocado_tests(machine)

        # Now actually run the tests
        env = [ "HUB=" + self.selenium.address, "GUEST=" + self.machine.address ]
        return run_avocado_tests(machine, avocado_tests, env=env):

    finally:
        machine.kill()
        selenium.kill()

def main():
    parser = argparse.ArgumentParser(description='Run Cockpit Avocado test(s)')
    parser.add_argument('-v', '--verbose', dest="verbosity", action='store_true',
                        help='Verbose output')
    parser.add_argument('--install', dest='install', action='store_true',
                        help='Build and install Cockpit into test VMs')
    parser.add_argument('tests', nargs='*')

    # TODO: One test for Firefox, another for Chrome
    parser.set_defaults(tests=[ "checklogin-basic.py", "checklogin-raw.py", "selenium-login.py" ])

    opts = parser.parse_args()
    if opts.install:
        sys.stderr.write("Building and installing Cockpit ...\n")
        subprocess.check_call([ os.path.join(topdir, "vm-download"), testinfa.DEFAULT_IMAGE, "selenium" ]
        subprocess.check_call([ os.path.join(topdir, "vm-reset") ]
        subprocess.check_call([ os.path.join(topdir, "vm-install") ]

    if run_avocado(opts.tests, opts.verbose):
        return 0
    else:
        return 1

if __name__ == '__main__':
    sys.exit(main())
