#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *
from storagelib import *
import unittest

# This test could be rewritten to not rely on slowing the disk speed
# alternative: mock storaged D-Bus API
class TestStorage(StorageCase):
    def testJobs(self):
        m = self.machine
        b = self.browser

        self.login_and_go("/storage")
        b.wait_in_text("#drives", "VirtIO")

        # Add a slow disk and format it
        disk = m.add_disk("10M", serial="SLOW")
        b.wait_in_text("#drives", "SLOW")
        m.set_disk_io_speed(disk_index = disk, speed_in_bytes=(512*1024))

        b.click('tr:contains("SLOW")')
        b.wait_visible("#storage-detail")

        # Format it
        self.content_default_action(1, "Format")
        self.dialog({ "erase": "zero",
                      "type": "ext4",
                      "name": "FILESYSTEM",
                      "mounting": "custom",
                      "mount_point": "/run/foo" })

        with b.wait_timeout(120):
            b.wait_in_text("#jobs", "Erasing")
            # speed disk up again
            m.set_disk_io_speed(disk_index = disk)
            b.wait_not_in_text("#jobs", "Erasing")
            b.wait_in_text("#content", "FILESYSTEM")

test_main()
