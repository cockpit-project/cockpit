#!/usr/bin/env python

# The default settings here should match one of the default
# download stores. These are usually cockpit/images instances
UPLOAD = "209.132.184.69:8493"
TOKEN = "~/.config/github-token"

import argparse
import os
import subprocess
import sys

from common import testinfra

BASE = os.path.dirname(__file__)
IMAGES = os.path.join(BASE, "images")
DATA = os.path.join(os.environ.get("TEST_DATA", BASE), "images")

def upload(store, source):
    ca = os.path.join(BASE, "common", "ca.pem")
    (address, delim, port) = store.partition(":")
    resolve = "cockpit-tests:{1}:{0}".format(address, port)
    cmd = ["curl", "--progress-bar", "--cacert", ca, "--resolve", resolve, "--fail", "--upload-file", source ]

    token = ""
    try:
        with open(os.path.expanduser(TOKEN), "r") as gt:
            token = gt.read().strip()
    except IOError as exc:
        if exc.errno == errno.ENOENT:
           pass
    if token:
        cmd += [ "--user", "user:" + token ]

    cmd.append("https://cockpit-tests:{0}/".format(port))

    # Passing through a non terminal stdout is necessary to make progress work
    curl = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    cat = subprocess.Popen(["cat"], stdin=curl.stdout)
    curl.stdout.close()
    ret = curl.wait()
    cat.wait()
    if ret != 0:
        raise Exception("vm-upload: unable to upload image")

def main():
    parser = argparse.ArgumentParser(description='Upload virtual machine images')
    parser.add_argument("--store", default=UPLOAD, help="Where to send images")
    parser.add_argument('image', nargs='*')
    args = parser.parse_args()

    sources = []
    for image in args.image:
        link = os.path.join(IMAGES, image)
        if not os.path.islink(link):
            parser.error("image link does not exist: " + image)
        source = os.path.join(DATA, os.readlink(link))
        if not os.path.isfile(source):
            parser.error("image does not exist: " + image)
        sources.append(source)

    for source in sources:
        try:
            upload(args.store, source)
        except Exception, ex:
            sys.stderr.write(str(ex) + "\n")
            return 1

if __name__ == '__main__':
    sys.exit(main())
