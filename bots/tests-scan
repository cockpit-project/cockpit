#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

BASELINE_PRIORITY = 5
MAX_PRIORITY = 9

BRANCHES = [ 'master', 'rhel-7.6', 'rhel-7.7', 'rhel-8.0', 'rhel-8-appstream' ]

DEFAULT_VERIFY = {
    'avocado/fedora': BRANCHES,
    'container/kubernetes': BRANCHES,
    'container/bastion': BRANCHES,
    'selenium/firefox': BRANCHES,
    'selenium/chrome': BRANCHES,
    'verify/centos-7': [ 'master' ],
    'verify/continuous-atomic': [ ],
    'verify/debian-stable': [ 'master' ],
    'verify/debian-testing': [ 'master' ],
    'verify/fedora-i386': [ 'master' ],
    'verify/fedora-29': [ 'master' ],
    'verify/fedora-atomic': [ 'master' ],
    'verify/fedora-testing': [ ],
    'verify/ubuntu-1804': [ 'master' ],
    'verify/ubuntu-stable': [ 'master' ],
}

# Non-public images used for testing
REDHAT_VERIFY = {
    # FIXME: We don't have a rhel-7-7 image yet, so test rhel-7.7 branch on 7.6 for now
    "verify/rhel-7-6": [ 'rhel-7.6', 'rhel-7.7' ],
    "verify/rhel-7-6-distropkg": [ 'master' ],
    "verify/rhel-8-0": [ 'master', 'rhel-8.0', 'rhel-8-appstream' ],
    "verify/rhel-atomic": [ 'master' ],
    'selenium/edge': [ 'master' ],
}

# Test contexts for projects that use Cockpit's bots and/or images
EXTERNAL_PROJECTS = {
    'cockpit-project/starter-kit': [
        'cockpit/centos-7',
        'cockpit/fedora-29',
    ],
    'cockpit-project/cockpit-ostree': [
        'cockpit/fedora-atomic',
        'cockpit/continuous-atomic',
    ],
    'cockpit-project/cockpit-podman': [
        'cockpit/fedora-29',
    ],
    'weldr/welder-web': [
        'cockpit/fedora-29/chrome',
        'cockpit/fedora-29/firefox',
    ],
}

# Test context for projects that use Cockpit's non-public images
REDHAT_EXTERNAL_PROJECTS = {
    'cockpit-project/cockpit-ostree': [
        'cockpit/rhel-atomic',
    ],
    'weldr/welder-web': [
        'cockpit/rhel-7-6/firefox',
        'cockpit/rhel-8-0/chrome',
        'cockpit/fedora-29/edge',
    ],
}

# Label: should a PR trigger external tests
LABEL_TEST_EXTERNAL = "test-external"

import argparse
import contextlib
import os
import json
import pipes
import sys
import time
import itertools
import urllib.request, urllib.parse, urllib.error

sys.dont_write_bytecode = True

from task import github, label, REDHAT_PING

no_amqp = False
try:
    import amqp
except ImportError:
    no_amqp = True

# Check if we have access to Red Hat network
try:
    urllib.request.urlopen(REDHAT_PING).read()
    run_redhat_tasks = True
except IOError:
    run_redhat_tasks = False


def main():
    parser = argparse.ArgumentParser(description='Bot: scan and update status of pull requests on GitHub')
    parser.add_argument('-v', '--human-readable', action="store_true", default=False,
                        help='Display human readable output rather than tasks')
    parser.add_argument('-d', '--dry', action="store_true", default=False,
                        help='Don''t actually change anything on GitHub')
    parser.add_argument('--repo', default=None,
                        help='Repository to scan and checkout.')
    parser.add_argument('-c', '--context', action="append", default=[ ],
                        help='Test contexts to use.')
    parser.add_argument('-p', '--pull-number', default=None,
                        help='Pull request to scan for tasks')
    parser.add_argument('--amqp', default=None,
                        help='The URL of the AMQP server to publish to')
    parser.add_argument('--queue', default='tasks',
                        help='The name of the queue to publish to')

    opts = parser.parse_args()
    if opts.amqp and no_amqp:
        sys.stderr.write("AMQP URL specified but python-amqp not available\n")
        return 1
    api = github.GitHub(repo=opts.repo)

    try:
        if opts.context:
            policy = { c: [ "master" ] for c in opts.context }
        else:
            policy = default_policy()
        results = scan_for_pull_tasks(api, policy, opts, None)

        # for the default (Cockpit) repo, also check external project PRs
        if not opts.repo:
            results += scan_external_projects(opts)
    except RuntimeError as ex:
        sys.stderr.write("tests-scan: " + str(ex) + "\n")
        return 1

    for result in results:
        if result:
            sys.stdout.write(result + "\n")

    return 0

def default_policy():
    policy = DEFAULT_VERIFY
    policy.update(REDHAT_VERIFY)
    return policy

@contextlib.contextmanager
def distributed_queue(host, queue):
    connection = amqp.Connection(host=host)
    connection.connect()
    channel = connection.channel()
    arguments = {
        "x-max-priority": MAX_PRIORITY
    }
    channel.queue_declare(queue=queue, arguments=arguments)
    yield channel
    connection.close()

# Prepare a human readable output
def tests_human(priority, name, revision, ref, context, base, repo, bots_ref):
    if not priority:
        return
    try:
        priority = int(priority)
    except (ValueError, TypeError):
        pass
    return "{name:11} {context:25} {revision:10} {priority:2}{repo}{bots_ref}".format(
        priority=priority,
        revision=revision[0:7],
        context=context,
        name=name,
        repo=repo and "  (%s)" % repo or "",
        bots_ref=bots_ref and (" [bots@%s]" % bots_ref) or "",
    )

# Prepare an test invocation command
def tests_invoke(priority, name, revision, ref, context, base, repo, bots_ref, options):
    if not run_redhat_tasks and (context in REDHAT_VERIFY or
                                 context in REDHAT_EXTERNAL_PROJECTS.get(repo, [])):
        return ''

    try:
        priority = int(priority)
    except (ValueError, TypeError):
        priority = 0
    if priority <= 0:
        return
    current = time.strftime('%Y%m%d-%H%M%M')

    checkout = "PRIORITY={priority:04d} bots/make-checkout --verbose"
    cmd = "TEST_NAME={name}-{current} TEST_REVISION={revision} bots/tests-invoke"
    if base:
        cmd += " --rebase={base}"
        checkout += " --base={base}"

    if repo:
        checkout += " --repo={repo}"
        cmd += " --remote=test"
        if bots_ref:
            # we are checking the external repo on a cockpit PR, so keep GITHUB_BASE for cockpit and just set
            # TEST_PROJECT for correct statuses
            cmd = "TEST_PROJECT={repo} " + cmd
        else:
            # we are checking the external repo on a PR of that external repo
            cmd = "GITHUB_BASE={repo} " + cmd

    if bots_ref:
        checkout += " --bots-ref={bots_ref}"

    cmd += " {context} {ref}"
    if bots_ref:
        # we are checking the external repo on a cockpit PR, so stay on the project's master
        checkout += " {ref} && "
    else:
        # we are testing the repo itself, checkout revision from the PR
        checkout += " {ref} {revision} && "

    return (checkout + cmd).format(
        priority=priority,
        name=pipes.quote(name),
        revision=pipes.quote(revision),
        base=pipes.quote(str(base)),
        ref=pipes.quote(ref),
        bots_ref=pipes.quote(bots_ref),
        context=pipes.quote(context),
        current=current,
        repo=pipes.quote(repo),
    )

def queue_test(priority, name, revision, ref, context, base, repo, bots_ref, queue, options):
    command = tests_invoke(priority, name, revision, ref, context, base, repo, bots_ref, options)
    if command:
        if priority > MAX_PRIORITY:
            priority = MAX_PRIORITY

        body = {
            "command": command,
            "type": "test",
            "sha": revision,
            "ref": ref,
            "name": name,
        }
        msg = amqp.Message(body=json.dumps(body), priority=priority)
        queue.basic_publish(msg, routing_key=options.queue)

def prioritize(status, title, labels, priority, context):
    state = status.get("state", None)
    update = { "state": "pending" }

    # This commit definitively succeeded or failed
    if state in [ "success", "failure" ]:
        priority = 0
        update = None

    # This test errored, we try again but low priority
    elif state in [ "error" ]:
        priority -= 2

    elif state in [ "pending" ]:
        update = None

    if priority > 0:
        values = list(labels())
        if "priority" in values:
            priority += 2
        if "blocked" in values:
            priority -= 1

        # Pull requests where the title starts with WIP get penalized
        if title.startswith("WIP") or "needswork" in values:
            priority -= 1

        # Is testing already in progress?
        description = status.get("description", "")
        if description.startswith(github.TESTING):
            priority = description
            update = None

    if update:
        if priority <= 0:
            update = None
        else:
            update["description"] = github.NOT_TESTED

    return [priority, update]

def dict_is_subset(full, check):
    for (key, value) in check.items():
        if not key in full or full[key] != value:
            return False
    return True

def update_status(api, revision, context, last, changes):
    if changes:
        changes["context"] = context
    if changes and not dict_is_subset(last, changes):
        response = api.post("statuses/" + revision, changes, accept=[ 422 ]) # 422 Unprocessable Entity
        errors = response.get("errors", None)
        if not errors:
            return True
        for error in response.get("errors", []):
            sys.stderr.write("{0}: {1}\n".format(revision, error.get('message', json.dumps(error))))
            sys.stderr.write(json.dumps(changes))
        return False
    return True

def cockpit_tasks(api, update, contexts, repo, pull_number, amqp):
    results = []
    branch_contexts = { }
    for (context, branches) in contexts.items():
        for branch in branches:
            if branch not in branch_contexts:
                branch_contexts[branch] = [ ]
            branch_contexts[branch].append(context)

    pulls = []
    if pull_number:
        # Avoid processing pull requests with the same number on external
        # repositories: if repo is None, the api is querying the repo the pull
        # request belongs to
        if repo is None:
            pull = api.get("pulls/{0}".format(pull_number))
            if pull:
                pulls.append(pull)
            else:
                sys.stderr.write("Can't find pull request {0}\n".format(pull_number))
                return 1
    else:
        pulls = api.pulls()

    whitelist = api.whitelist()
    for pull in pulls:
        title = pull["title"]
        number = pull["number"]
        revision = pull["head"]["sha"]
        statuses = api.statuses(revision)
        login = pull["head"]["user"]["login"]
        base = pull["base"]["ref"]  # The branch this pull request targets

        def labels():
            if "labels" not in pull:
                pull["labels"] = api.get("issues/{0}/labels".format(number))
            return map(lambda label: label["name"], pull["labels"])

        # Do we have any statuses for this commit?
        have = len(statuses.keys()) > 0

        baseline = BASELINE_PRIORITY
        # amqp automatically prioritizes on age
        if not amqp:
            # modify the baseline slightly to favor older pull requests, so that we don't
            # end up with a bunch of half tested pull requests
            baseline += 1.0 - (min(100000, float(number)) / 100000)

        for context in contexts:
            status = statuses.get(context, None)

            # Only create new status for requests that have none
            if not status:
                if have or context not in branch_contexts.get(base, []):
                    continue
                status = { }

            # For unmarked and untested status, user must be in whitelist
            # Not this only applies to this specific commit. A new status
            # will apply if the user pushes a new commit.
            if login not in whitelist and status.get("description", github.NO_TESTING) == github.NO_TESTING:
                priority = github.NO_TESTING
                changes = { "description": github.NO_TESTING, "context": context, "state": "pending" }
            else:
                (priority, changes) = prioritize(status, title, labels, baseline, context)
            if not update or update_status(api, revision, context, status, changes):
                results.append((priority, "pull-%d" % number, revision, "pull/%d/head" % number, context, base, repo, None))

        # if a cockpit (default repo) PR changes bots/, also trigger all external tests against this cockpit PR

        def trigger_externals():
            if repo:  # already a non-cockpit project
                return False
            if base != "master":  # bots/ is always taken from master branch
                return False
            if LABEL_TEST_EXTERNAL in labels():  # already checked before?
                return True

            if not have:
                # this is the first time tests-scan looks at a PR, so determine if it changes bots/
                with urllib.request.urlopen(pull["patch_url"]) as f:
                    # enough to look at the git commit header, it lists all changed files
                    if b"bots/" in f.read(4000):
                        if update:
                            # remember for next run, to avoid downloading the patch multiple times
                            label(number, [LABEL_TEST_EXTERNAL])
                        return True

            return False

        if trigger_externals():
            for proj_repo, proj_contexts in itertools.chain(
                    EXTERNAL_PROJECTS.items(), REDHAT_EXTERNAL_PROJECTS.items()):
                for context in proj_contexts:
                    repo_context = context + "@" + proj_repo

                    status = statuses.get(repo_context, {})
                    if login not in whitelist and status.get("description", github.NO_TESTING) == github.NO_TESTING:
                        priority = github.NO_TESTING
                        changes = { "description": github.NO_TESTING, "context": repo_context, "state": "pending" }
                    else:
                        (priority, changes) = prioritize(status, title, labels, baseline, repo_context)
                    if not update or update_status(api, revision, repo_context, status, changes):
                        # don't specify a ref to check out; make-source already checks out project master
                        results.append((priority, "pull-%d" % number, revision, "", context, base, proj_repo, "pull/%s/head" % number))

    return results

def scan_for_pull_tasks(api, policy, opts, repo):
    kvm = os.access("/dev/kvm", os.R_OK | os.W_OK)
    if not kvm:
        sys.stderr.write("tests-scan: No /dev/kvm access, not running tests here\n")
        return []

    results = cockpit_tasks(api, not opts.dry, policy, repo, opts.pull_number, opts.amqp)

    if opts.human_readable:
        func = lambda x: tests_human(*x)
        results.sort(reverse=True, key=lambda x: str(x))
        return list(map(func, results))
    if not opts.amqp:
        func = lambda x: tests_invoke(*x, options=opts)
        return list(map(func, results))
    with distributed_queue(opts.amqp, opts.queue) as queue:
        func = lambda x: queue_test(*x, queue=queue, options=opts)
        return list(map(func, results))

def scan_external_projects(opts):
    tests = []
    for repo, contexts in itertools.chain(EXTERNAL_PROJECTS.items(), REDHAT_EXTERNAL_PROJECTS.items()):
        policy = { c: [ "master" ] for c in contexts }
        tests += scan_for_pull_tasks(github.GitHub(repo=repo), policy, opts, repo)
    return tests

if __name__ == '__main__':
    sys.exit(main())
