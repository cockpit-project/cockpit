#!/usr/bin/python3

# This file is part of Cockpit.
#
# Copyright (C) 2022 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import unittest

import parent
from testlib import *
from testvm import DEFAULT_IMAGE

HOST = "host.containers.internal"


@unittest.skipUnless(DEFAULT_IMAGE == "fedora-coreos", "no cockpit/ws container on this image")
@nondestructive
class TestWsBastionContainer(MachineCase):
    def setUp(self):
        super().setUp()
        # stop ws container from previous runs
        self.machine.stop_cockpit()
        # undo cockpit/ws install steps
        self.restore_file("/etc/systemd/system/cockpit.service")
        self.machine.execute("rm /etc/systemd/system/cockpit.service")
        self.addCleanup(self.machine.execute, "podman rm -f --all")

    def approve_key(self, b, hostname):
        b.wait_visible("#hostkey-group")
        b.wait_in_text("#hostkey-message-1", f"You are connecting to {hostname} for the first time.")
        b.click("#login-button")

    def testPasswordLogin(self):
        m = self.machine
        b = self.browser
        m.execute("podman run -d --name cockpit-bastion -p 9090:9090 localhost/cockpit/ws")
        m.execute("until curl --fail --head -k https://localhost:9090/; do sleep 1; done")

        b.ignore_ssl_certificate_errors(True)
        b.open("/", tls=True)

        b.wait_visible("#login")
        # should be pre-configured to RequireHost
        b.wait_not_visible("#option-group")
        b.wait_visible("#server-field")
        # LoginTitle from default-bastion.conf
        b.wait_text("#server-name", "Cockpit Bastion")
        # No branding by default
        b.wait_text("#brand", "")

        b.set_val("#login-user-input", "admin")
        b.set_val("#login-password-input", "foobar")

        # Requires a host
        b.click("#login-button")
        b.wait_in_text("#login-error-message", "host to connect")
        # so connect to our own container host
        b.set_val("#server-field", HOST)
        b.set_val("#login-password-input", "foobar")
        # key is unknown
        b.click("#login-button")
        self.approve_key(b, HOST)

        b.wait_visible('#content')
        b.wait_text('#current-username', 'admin')
        b.logout()

        # remembers the last host via URL, server field should be pre-filled
        self.assertEqual(b.eval_js("window.location.pathname"), f"/={HOST}/system")
        # FIXME: login page does not really set this in the DOM? DOM has empty value, but browser shows the value
        # b.wait_text("#server-field", host)
        # this is only for Cockpit Client
        b.wait_not_visible("#recent-hosts")
        b.set_val("#login-user-input", "admin")
        b.set_val("#login-password-input", "foobar")
        # second time SSH key is known
        b.click("#login-button")
        b.wait_visible('#content')
        b.logout()

    def testCustomConf(self):
        m = self.machine
        b = self.browser

        # custom cockpit.conf and pretend we are Fedora CoreOS
        self.write_file("/root/cockpit.conf", """[WebService]
            LoginTitle = My Walden
""")
        m.execute("cp /etc/os-release /root; "
                  "podman run -d --name cockpit-bastion -p 9090:9090 "
                  "-v /root/cockpit.conf:/etc/cockpit/cockpit.conf:ro,Z "
                  "-v /root/os-release:/etc/os-release:ro,Z "
                  "localhost/cockpit/ws")
        m.execute("until curl --fail --head -k https://localhost:9090/; do sleep 1; done")

        b.ignore_ssl_certificate_errors(True)
        b.open("/", tls=True)

        b.wait_visible("#login")
        b.wait_text("#server-name", "My Walden")
        # custom conf does not have RequireHost
        b.wait_visible("#option-group")
        # Shows os-release branding
        b.wait_in_text("#brand", "Fedora")

        # pre-fill target host
        b.open(f"/={HOST}/", tls=True)
        b.wait_visible("#login")
        b.set_val("#login-user-input", "admin")
        b.set_val("#login-password-input", "foobar")

        b.click("#login-button")
        self.approve_key(b, HOST)

        b.wait_visible('#content')
        b.wait_text('#current-username', 'admin')


if __name__ == '__main__':
    test_main()
