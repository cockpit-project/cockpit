#!/usr/bin/env node

/*
 * Builds with webpack and generates a Makefile include that
 * lists all dependencies, inputs, outputs, and installable files
 */

const webpack = require("webpack");
const path = require("path");
const stdio = require("stdio");
const fs = require("fs");

var ops = stdio.getopt({
    config: { key: "c", args: 1, description: "Path to webpack.config.js", default: "webpack.config.js" },
    deps: { key: "d", args: 1, description: "Output dependencies in Makefile format" },
    watch: { key: "w", args: 0, description: "Enable webpack watch mode" },
});

const makefile = ops.deps;
const prefix = makefile.split("/").slice(-2, -1)[0];
process.env["ONLYDIR"] = prefix + "/";

const srcdir = (process.env.SRCDIR || ".").replace(/\/$/, '');
const cwd = process.cwd();
const config_path = path.resolve(cwd, ops.config);
const config = require(config_path);

const compiler = webpack(config);

if (ops.watch) {
    compiler.hooks.watchRun.tap("WebpackInfo", compilation => {
        const time = new Date().toTimeString().split(' ')[0];
        process.stdout.write(`${ time  } Build started\n`);
    });
    compiler.watch(config.watchOptions, process_result);
} else {
    compiler.run(process_result);
}

function process_result(err, stats) {
    // process.stdout.write(stats.toString({colors: true}) + "\n");

    if (err) {
        console.log(JSON.stringify(err));
        process.exit(1);
        return;
    }

    if (ops.watch) {
        const info = stats.toJson();
        const time = new Date().toTimeString().split(' ')[0];
        process.stdout.write(`${ time  } Build succeeded, took ${ info.time/1000 }s\n`);
    }

    // Failure exit code when compilation fails
    if (stats.hasErrors() || stats.hasWarnings())
        console.log(stats.toString("normal"));

    if (stats.hasErrors()) {
        if (!ops.watch)
            process.exit(1);
        return;
    }

    generateDeps(makefile, stats);
}

function generateDeps(makefile, stats) {

    // Note that these are cheap ways of doing a set
    var inputs = { };
    var outputs = { };
    var installs = { };
    var tests = { };

    var pkgdir = path.dirname(makefile);
    var stampfile = pkgdir + '/manifest.json';

    stats.compilation.fileDependencies.forEach(function(file) {
        maybePushInput(inputs, file);
    });

    // All the dependent files
    var asset, output;
    var now = Math.floor(Date.now() / 1000);

    // Strip cwd from output paths
    var dir = stats.compilation.outputOptions.path;
    if (dir.startsWith(cwd + '/'))
        dir = dir.substr(cwd.length + 1);

    const uncompressed_patterns = [
        '/manifest.json$', '/override.json$',
        '^dist/static/', // cockpit-ws cannot currently serve compressed login page
        '^dist/shell/index.html$',  // COMPAT: Support older cockpit-ws binaries. See #14673
        '\.png$', '\.woff$', '\.woff2$', '\.gif$'
    ].map((r) => new RegExp(r));

    for (asset in stats.compilation.assets) {
        output = path.join(dir, asset);
        fs.utimesSync(output, now, now);

        if (!output.endsWith("/manifest.json") && !output.endsWith(".map"))
            outputs[output] = output;

        if (output.includes("/test-")) {
            if (output.endsWith(".html")) {
                tests[output] = output;
            }
            continue;
        }

        if (output.endsWith(".map") || output.includes("included-modules"))
            continue;

        if (uncompressed_patterns.some((s) => output.match(s))) {
            installs[output] = true;
        } else {
            installs[output + '.gz'] = true;
        }
    }

    // Finalize all the sets into arrays
    inputs = Object.keys(inputs).sort();
    outputs = Object.keys(outputs).sort();
    installs = Object.keys(installs).sort();
    tests = Object.keys(tests).sort();

    var lines = [ "# Generated Makefile data for " + prefix ];

    function makeArray(name, values) {
        lines.push(name + " = \\");
        values.forEach(function(value) {
            lines.push("\t" + value + " \\");
        });
        lines.push("\t$(NULL)");
        lines.push("");
    }

    makeArray(prefix + "_INPUTS", inputs);
    makeArray(prefix + "_OUTPUTS", outputs);

    makeArray(prefix + "_INSTALL", installs);
    makeArray(prefix + "_TESTS", tests);

    lines.push(stampfile + ": $(" + prefix + "_INPUTS)");
    lines.push("");

    outputs.forEach(function(name) {
        lines.push(name + ": " + stampfile);
        lines.push("")
    });

    inputs.forEach(function(name) {
        lines.push(name + ":");
        lines.push("")
    });

    lines.push("WEBPACK_INPUTS += $(" + prefix + "_INPUTS)");
    lines.push("WEBPACK_OUTPUTS += $(" + prefix + "_OUTPUTS)");
    lines.push("WEBPACK_INSTALL += $(" + prefix + "_INSTALL)");
    lines.push("TESTS += $(" + prefix + "_TESTS)");
    lines.push("");

    lines.push(prefix + ": " + stampfile);

    data = lines.join("\n") + "\n";
    fs.writeFileSync(makefile, data);
}

function maybePushInput(inputs, input) {
    // Don't include node_modules
    if (input.includes("/node_modules")) {
        return;
    }

    // Don't include sub-directories of input
    // Webpack 5 includes these: https://github.com/webpack/webpack/issues/11971
    const stat = fs.lstatSync(input);
    if (stat.isDirectory())
        return;

    // Strip cwd and srcdir absolute paths from input file and add it
    if (input.startsWith(cwd + '/'))
        input = input.substr(cwd.length + 1);
    if (input.startsWith(srcdir + '/'))
        input = input.substr(srcdir.length + 1);

    inputs[input] = true;
}
