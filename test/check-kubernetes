#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *
import json
import os
import sys

class TestKubernetes(MachineCase):
    def setUp(self):
        MachineCase.setUp(self)
        m = self.machine
        m.execute("systemctl start etcd kube-apiserver kube-controller-manager docker kube-proxy kubelet")
        m.upload(["mock-k8s-tiny-app.json"], "/tmp")

    def testDashboard(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/kubernetes/cluster", host=None)
        b.wait_in_text("#node-list", "127.0.0.1")

        m.execute("kubectl create -f /tmp/mock-k8s-tiny-app.json")
        b.wait_in_text("#service-list", "mock")

        # Successfully deploy via dialog
        b.click("#deploy-app")
        b.wait_popup("deploy-app-dialog")
        b.upload_file("#deploy-app-manifest-file", "mock-k8s-tiny-app.json")
        b.set_val("#deploy-app-namespace", "mynamespace")
        b.dialog_complete("#deploy-app-dialog")
        b.wait_in_text("#service-list", "mynamespace")

        # Fail deploy via dialog
        b.click("#deploy-app")
        b.wait_popup("deploy-app-dialog")
        b.upload_file("#deploy-app-manifest-file", "mock-k8s-tiny-app.json")
        b.set_val("#deploy-app-namespace", "!!!!")
        b.dialog_complete("#deploy-app-dialog", result="fail")
        b.dialog_cancel("#deploy-app-dialog")

        # Successfully add node via dialog
        b.click("#add-node")
        b.wait_popup("node-dialog")
        b.set_val("#node-name", "mynode")
        b.set_val("#node-address", "myaddress")
        b.dialog_complete("#node-dialog")
        b.wait_in_text("#node-list", "mynode")
        b.wait_in_text("#node-list", "myaddress")

        # Fail add node via dialog
        b.click("#add-node")
        b.wait_popup("node-dialog")
        b.set_val("#node-name", "!!!!")
        b.set_val("#node-address", "!!!!")
        b.dialog_complete("#node-dialog", result="fail")
        b.dialog_cancel("#node-dialog")

class TestSsl(MachineCase):
    def testConnect(self):
        m = self.machine
        b = self.browser

        # Start a kube-apiserver with a 'wrong' http port, forcing use of https
        m.execute("echo 'KUBE_API_PORT=\"--port=1111\"' >> /etc/kubernetes/apiserver")
        m.execute("sed -i s/8080/1111/g /etc/kubernetes/*")
        m.execute("systemctl start etcd kube-apiserver kube-controller-manager docker kube-proxy kubelet")

        self.login_and_go("/kubernetes/cluster", host=None)
        b.wait_in_text("#node-list", "127.0.0.1")

        # Check that this failed as a double check
        output = m.execute("curl -sS http://localhost:8080/api 2>&1 || true")
        self.assertIn("Connection refused", output)

test_main()
