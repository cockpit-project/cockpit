#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2014 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *

class TestDocker(MachineCase):
    def confirm(self):
        self.browser.wait_popup("confirmation-dialog")
        self.browser.click("#confirmation-dialog-confirm")
        self.browser.wait_popdown("confirmation-dialog")

    def testBasic(self):
        b = self.browser
        m = self.machine

        # HACK - https://bugzilla.redhat.com/show_bug.cgi?id=1169769
        #
        self.allow_journal_messages('.*denied.*add_name.*name="\\.docker".*',
                                    '.*denied.*create.*name="\\.docker".*',
                                    '.*denied.*create.*name="key\\.json".*',
                                    '.*denied.*write open.*path="/\\.docker/key\\.json".*')

        m.execute("systemctl start docker.socket")
        m.execute("usermod -G wheel,docker admin")

        self.login_and_go("containers")

        # Import the container-probe image and wait for it to appear
        m.upload(["container-probe.tar.gz"], "/var/tmp/container-probe.tar.gz")
        m.execute("docker import - test/container-probe </var/tmp/container-probe.tar.gz")
        b.wait_in_text("#containers-images", "container-probe")

        # Run it
        b.click('#containers-images tr:contains("container-probe") button.btn-play')
        b.wait_popup("containers_run_image_dialog")
        b.set_val("#containers-run-image-name", "PROBE")
        b.set_val("#containers-run-image-command", "/bin/container-probe")
        b.click("#containers-run-image-run");
        b.wait_popdown("containers_run_image_dialog")
        b.wait_in_text("#containers-containers", "PROBE")

        # Check output of the probe
        b.click('#containers-containers tr:contains("PROBE")')
        b.wait_page("container-details")
        # The terminal uses NO-BREAK SPACE so we check for that here
        b.wait_in_text("#container-terminal", "Hello from container-probe.")
        b.wait_in_text("#container-details-state", "Exited")

        # Delete container
        b.click("#container-details-delete")
        self.confirm()
        b.wait_page("containers")
        b.wait_not_in_text("#containers-containers", "PROBE")

        # Run it without TTY
        b.click('#containers-images tr:contains("container-probe") button.btn-play')
        b.wait_popup("containers_run_image_dialog")
        b.set_val("#containers-run-image-name", "PROBE")
        b.set_val("#containers-run-image-command", "/bin/container-probe")
        b.click("#containers-run-image-with-terminal");
        b.click("#containers-run-image-run");
        b.wait_popdown("containers_run_image_dialog")
        b.wait_in_text("#containers-containers", "PROBE")

        # Check output of the probe
        b.click('#containers-containers tr:contains("PROBE")')
        b.wait_page("container-details")
        b.wait_in_text("#container-terminal", "Hello from container-probe.")
        b.call_js_func("ph_count_check", ".logs",  1)
        b.wait_in_text("#container-details-state", "Exited")

        # Make sure after restart we only have one
        b.click("#container-details-start")
        b.wait_in_text("#container-terminal", "Hello from container-probe.\nHello from container-probe.")
        b.call_js_func("ph_count_check", ".logs",  1)
        b.wait_in_text("#container-details-state", "Exited")

        # Delete container
        b.click("#container-details-delete")
        self.confirm()
        b.wait_page("containers")
        b.wait_not_in_text("#containers-containers", "PROBE")

        # Delete image
        b.click('#containers-images tr:contains("container-probe")')
        b.wait_page("image-details")
        b.click("#image-details-delete")
        self.confirm()
        b.wait_page("containers")

    def testExpose(self):
        b = self.browser
        m = self.machine
        self.allow_journal_messages('.*denied.*name_connect.*docker.*')

        m.execute("systemctl start docker.socket")
        m.execute("usermod -G wheel,docker admin")

        self.login_and_go("containers")

        port = 3380;

        # Import the container-probe image and wait for it to appear
        m.upload(["container-probe.tar.gz"], "/var/tmp/container-probe.tar.gz")
        m.execute("docker import - test/container-probe </var/tmp/container-probe.tar.gz")
        b.wait_in_text("#containers-images", "container-probe")

        # Create an updated image, expose a port
        m.execute("mkdir /var/tmp/container-probe2")
        m.execute("""echo -e '
FROM test/container-probe
MAINTAINER cockpit
EXPOSE %d
CMD ["/bin/container-probe", "%d"]
' > /var/tmp/container-probe2/Dockerfile""" % (port, port))
        m.execute("docker build -t test/container-probe2 /var/tmp/container-probe2");

        # Wait for it to appear
        b.wait_in_text("#containers-images", "container-probe2")

        # Run it
        b.click('#containers-images tr:contains("container-probe2") button.btn-play')
        b.wait_popup("containers_run_image_dialog")
        b.set_val("#containers-run-image-name", "PROBE2")
        b.set_val(".port-map input", port)
        b.click("#containers-run-image-run");
        b.wait_popdown("containers_run_image_dialog")
        b.wait_in_text("#containers-containers", "PROBE2")

        # Check output of the probe
        b.click('#containers-containers tr:contains("PROBE2")')
        b.wait_page("container-details")
        b.wait_in_text("#container-terminal", "Hello from container-probe.")
        b.wait_in_text("#container-details-ports", "0.0.0.0:%d -> %d/tcp" % (port, port))

        # Check connection on port
        expected_message = "Sending messages"
        data = m.execute("exec 3<>/dev/tcp/localhost/%d; cat <&3" % (port))
        check_eq(data, expected_message)

    def testFailure(self):
        b = self.browser
        m = self.machine

        # Make sure Docker isn't running and go to the containers page
        # as "admin".

        m.execute("systemctl stop docker.service docker.socket")
        self.login_and_go("containers")

        # Docker isn't running, but we can start it.
        b.wait_visible("#containers-failure")
        b.wait_text("#containers-failure-message", "Docker is not installed or activated on the system")
        b.wait_visible("#containers-failure-start")
        b.click("#containers-failure-start")

        # However, we can't access the socket
        b.wait_visible("#containers-failure")
        b.wait_text("#containers-failure-message", "Not authorized to access Docker on this system")
        b.wait_visible("#containers-failure-retry")

        # Give "admin" access via the docker group and login again
        m.execute("usermod -G wheel,docker admin")
        b.relogin("containers")
        self.allow_restart_journal_messages()
        b.wait_visible("#containers-containers")

        # Restart the daemon, wait for the failure, and reconnect.
        m.execute("systemctl restart docker.service")
        b.wait_visible("#containers-failure")
        b.wait_visible("#containers-failure-retry")
        b.click("#containers-failure-retry")
        b.wait_not_visible("#containers-failure")
        b.wait_visible("#containers-containers")

test_main()
