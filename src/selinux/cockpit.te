policy_module(cockpit, 1.99.0)

########################################
#
# Declarations
#

type cockpit_ws_t;
type cockpit_ws_exec_t;
init_daemon_domain(cockpit_ws_t,cockpit_ws_exec_t)

type cockpit_var_lib_t;
files_type(cockpit_var_lib_t)

type cockpit_tmp_t;
files_tmp_file(cockpit_tmp_t)

type cockpit_unit_file_t;
systemd_unit_file(cockpit_unit_file_t)

type cockpit_session_t;
type cockpit_session_exec_t;
domain_type(cockpit_session_t)
domain_entry_file(cockpit_session_t,cockpit_session_exec_t)

########################################
#
# cockpit_ws_t local policy
#

allow cockpit_ws_t self:capability net_admin;
allow cockpit_ws_t self:tcp_socket create_stream_socket_perms;

# cockpit-ws can read from /var/lib/cockpit, but not write to it
cockpit_read_lib_files(cockpit_ws_t)

# cockpit-ws can execute cockpit-session
can_exec(cockpit_ws_t,cockpit_session_exec_t)

# cockpit-ws can read from /dev/urandom
dev_read_urand(cockpit_ws_t) # for authkey
dev_read_rand(cockpit_ws_t)  # for libssh

# cockpit-ws can read from the cockpit port
# TODO: disable this until we have it in our f20 selinux-policy-targeted
# corenet_tcp_bind_cockpit_port(cockpit_ws_t)
allow cockpit_ws_t init_t:tcp_socket accept;
corenet_tcp_bind_all_ports(cockpit_ws_t)

# cockpit-ws can connect to other hosts via ssh
corenet_tcp_connect_ssh_port(cockpit_ws_t)

# cockpit-ws can write to its temp files
manage_dirs_pattern(cockpit_ws_t, cockpit_tmp_t, cockpit_tmp_t)
manage_files_pattern(cockpit_ws_t, cockpit_tmp_t, cockpit_tmp_t)
files_tmp_filetrans(cockpit_ws_t, cockpit_tmp_t, { dir file })

auth_use_nsswitch(cockpit_ws_t)

logging_send_syslog_msg(cockpit_ws_t)

# cockpit-ws launches cockpit-session
cockpit_session_domtrans(cockpit_ws_t)
allow cockpit_ws_t cockpit_session_t:process signal_perms;

# cockpit-session communicates back with cockpit-ws
allow cockpit_session_t cockpit_ws_t:unix_stream_socket rw_stream_socket_perms;

optional_policy(`
	ssh_read_user_home_files(cockpit_ws_t)
')

#########################################################
#
#  cockpit-session local policy
#

# cockpit-session changes to the actual logged in user
allow cockpit_session_t self:capability { sys_admin dac_override setuid setgid };
allow cockpit_session_t self:process { setexec setsched signal_perms };

# cockpit-session runs a full pam stack, including pam_selinux.so
auth_login_pgm_domain(cockpit_session_t)
auth_write_login_records(cockpit_session_t);

# cockpit-session PAM stack wants to talk to systemd via a socket
allow cockpit_session_t init_t:unix_stream_socket sendto;

# cockpit-session can execute cockpit-agent as the user
userdom_spec_domtrans_all_users(cockpit_session_t)

optional_policy(`
    userdom_signal_all_users(cockpit_session_t)
')

optional_policy(`
	unconfined_domtrans(cockpit_session_t)
')
