<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

  <!--
  This file is part of Cockpit.

  Copyright (C) 2013 Red Hat, Inc.

  Cockpit is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 2.1 of the License, or
  (at your option) any later version.

  Cockpit is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with Cockpit; If not, see <http://www.gnu.org/licenses/>.
  -->

  <!--
      com.redhat.Cockpit.ResourceMonitor:
      @short_description: Resource Monitor

      Used to convery resources.
  -->
  <interface name="com.redhat.Cockpit.ResourceMonitor">

    <property name="NumSamples" type="u" access="read"/>
    <property name="NumSeries" type="u" access="read"/>

    <!-- Legends:
         The legend to use for each series.

         This array is #com.redhat.Cockpit.ResourceMonitor:NumSeries long.
    -->
    <property name="Legends" type="as" access="read"/>

    <!--
        GetSamples:
        @options: Currently unused.
        @samples: The samples currently collected.

        Returns (up to) #com.redhat.Cockpit.ResourceMonitor:NumSamples
        historical samples, returning the oldest ones first.
    -->
    <method name="GetSamples">
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="samples" type="a(xad)" direction="out"/>
    </method>

    <!--
        NewSample:
        @timestamp: The point in time the sample was captured (micro-seconds since Epoch).
        @values: An array of values.

        Signal emitted when a new sample has been collected.
    -->
    <signal name="NewSample">
      <arg name="timestamp" type="x"/>
      <arg name="values" type="ad"/>
    </signal>
  </interface>

  <!--
      com.redhat.Cockpit.MultiResourceMonitor:

      @short_description: Monitor for a dynamic set of consumers, such
      as all individual cgroups in a hierarchy.
  -->
  <interface name="com.redhat.Cockpit.MultiResourceMonitor">

    <property name="NumSamples" type="u" access="read"/>
    <property name="NumSeries" type="u" access="read"/>
    <property name="Consumers" type="as" access="read"/>

    <!-- Legends:
         The legend to use for each series.

         This array is #com.redhat.Cockpit.MultiResourceMonitor:NumSeries long.
    -->
    <property name="Legends" type="as" access="read"/>

    <!--
        GetSamples:
        @samples: The samples currently collected.

        Returns (up to) #com.redhat.Cockpit.MultiResourceMonitor:NumSamples
        historical samples, returning the oldest ones first.
    -->
    <method name="GetSamples">
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="samples" type="a(xa{sad})" direction="out"/>
    </method>

    <!--
        NewSample:
        @timestamp: The point in time the sample was captured (micro-seconds since Epoch).
        @values: A dict with (consumer, array of values) pairs.

        Signal emitted when a new sample has been collected.
    -->
    <signal name="NewSample">
      <arg name="timestamp" type="x"/>
      <arg name="values" type="a{sad}"/>
    </signal>
  </interface>

</node>
