#!/bin/bash

set -e
IMAGE="$1"

# HACK - virt-resize might not be able to resize our xfs rootfs,
# depending on how it was compiled and which plugins are installed,
# and will just silently not do it.  So we do it here.
#
df --output=source,fstype / | tail -n1 | while read source fstype; do
    case $fstype in
    ext*)
	    resize2fs $source
	    ;;
    xfs*)
	    xfs_growfs /
	    ;;
    esac
done

df -Th /

# If the file /root/.skip_repos is present on the machine,
# all actions regarding the repositories will be skipped:
# subscriptions, adding repos, deleting existing entries
SKIP_REPO_FLAG="/root/.skip_repos"

if [ "$IMAGE" != "rhel-x" ] && [ ! -f "$SKIP_REPO_FLAG" ]; then
    # Remove any internal files
    rm -f /etc/yum.repos.d/download.devel.redhat.com.repo

    # register system
    subscription-manager register --auto-attach --username=`cat ~/.rhel/login` --password=`cat ~/.rhel/pass`
    # remove credentials from test machine
    rm -rf ~/.rhel
fi


# Only start logging here.  Otherwise the subscription credentials
# appear in the output above.
#
set -x

if [ ! -f "$SKIP_REPO_FLAG" ]; then
    # Configure repositories.

    if [ "$IMAGE" = "rhel-7-6" ]; then
cat <<EOF > /etc/yum.repos.d/nightly.repo
[EXTRAS-7.6-LATEST]
name=rhel-extras-compose
baseurl=http://download.eng.bos.redhat.com/devel/candidate-trees/EXTRAS-RHEL-7.6/latest-EXTRAS-7.6-RHEL-7/compose/Server/x86_64/os/
enabled=1
gpgcheck=0

[RHEL-7.6-NIGHTLY]
name=base-rhel
baseurl=http://download.eng.bos.redhat.com/nightly/latest-RHEL-7/compose/Server/x86_64/os
enabled=1
gpgcheck=0
EOF
        # disable all default repos as they don't exist yet
        sed -i 's/enabled = 1/enabled = 0/' /etc/yum.repos.d/redhat.repo
        yum -y install yum-utils
    elif [ "$IMAGE" = "rhel-x" ]; then
cat <<EOF > /etc/yum.repos.d/nightly.repo
[RHEL-8-NIGHTLY-BaseOS]
name=baseos
baseurl=http://download.eng.bos.redhat.com/nightly/latest-RHEL-8/compose/BaseOS/x86_64/os/
enabled=1
gpgcheck=0

[RHEL-8-NIGHTLY-AppStream]
name=appstream
baseurl=http://download.eng.bos.redhat.com/nightly/latest-RHEL-8/compose/AppStream/x86_64/os/
enabled=1
gpgcheck=0
EOF
        # make ipa-client available
        dnf module enable -y idm:4
    else
        # if disabling the repos doesn't work, do without
        yum -y --disablerepo=rhel-7-server-htb-rpms --disablerepo=rhel-sjis-for-rhel-7-server-rpms install yum-utils || yum -y install yum-utils
        yum-config-manager --enable rhel-7-server-optional-rpms
        yum-config-manager --enable rhel-7-server-extras-rpms
    fi

    if [ "$IMAGE" != "rhel-x" ]; then
        # needed for atomic-openshift-clients
        yum-config-manager --enable rhel-7-server-ose-3.9-rpms

        # the following don't necessarily need to work
        yum-config-manager --disable rhel-sjis-for-rhel-7-server-rpms || true
        yum-config-manager --disable rhel-7-server-htb-rpms || true
        yum-config-manager --disable rhel-7-server-rt-beta-rpms || true
    fi
fi

yum --nogpgcheck -y update

echo foobar | passwd --stdin root

# We install all dependencies of the cockpit packages since we want
# them to not spontaneously change from one test run to the next when
# the distribution repository is updated.
COCKPIT_DEPS="\
atomic \
device-mapper-multipath \
docker \
glib-networking \
json-glib \
kexec-tools \
atomic-openshift-clients \
libssh \
libvirt \
libvirt-client \
NetworkManager-team \
openssl \
PackageKit \
pcp-libs \
pcp \
realmd \
selinux-policy-targeted \
setroubleshoot-server \
subscription-manager \
sos \
tuned \
udisks2 \
udisks2-lvm2 \
udisks2-iscsi \
"

# We also install the packages necessary to join a FreeIPA domain so
# that we don't have to go to the network during a test run.
# on epel/rhel we have ipa-client instead of freeipa-client
IPA_CLIENT_PACKAGES="\
ipa-client \
oddjob \
oddjob-mkhomedir \
sssd \
"

TEST_PACKAGES="\
valgrind \
gdb \
nmap-ncat \
targetcli \
yum-utils \
virt-install \
cryptsetup \
qemu-kvm \
vdo \
kmod-kvdo \
"

if [ "$IMAGE" = "centos-7" ]; then
    COCKPIT_DEPS="${COCKPIT_DEPS/atomic-openshift-clients /}"
    COCKPIT_DEPS="$COCKPIT_DEPS kubernetes-client"
fi
if [ "$IMAGE" = "rhel-x" ]; then
    TEST_PACKAGES="${TEST_PACKAGES/yum-utils/dnf-utils} clevis-luks tang"
    # some packages are still missing from RHEL 8
    # HACK: https://bugzilla.redhat.com/show_bug.cgi?id=1567740
    COCKPIT_DEPS="${COCKPIT_DEPS/atomic-openshift-clients /}"
    COCKPIT_DEPS="${COCKPIT_DEPS/atomic /}"
    # docker is not a rhel-x thing (https://bugzilla.redhat.com/show_bug.cgi?id=1602951)
    COCKPIT_DEPS="${COCKPIT_DEPS/docker /}"
fi

COCKPIT_DEPS="$COCKPIT_DEPS"

# The rhel-7* images have the cockpit packages from base preinstalled, to check for API breakages
if [ "${IMAGE#rhel-7}" != "$IMAGE" ]; then
    DISTRO_COCKPIT_PACKAGES="\
cockpit
cockpit-bridge \
cockpit-system \
cockpit-ws \
"
fi

pkgs="$TEST_PACKAGES $COCKPIT_DEPS $IPA_CLIENT_PACKAGES $DISTRO_COCKPIT_PACKAGES"
yum install -y $pkgs

# the above silently skips over unknown packages, so make sure we got everything
set +x
installed=$(rpm -qa --queryformat '%{NAME}\n')
error=
for pkg in $pkgs; do
    if ! echo $pkg | grep -qF "$installed"; then
        echo "ERROR: package $pkg is not installed" >&2
        error=1
    fi
done
[ -z "$error" ] || exit 1
set -x

# For debugging udisks/storaged crashes
debuginfo-install -y udisks2

# Prepare for building

# only install mock and build if TEST_SOURCE is set
if [ -n "$TEST_SOURCE" ]; then
    if [ "$IMAGE" = "rhel-x" ]; then
        # no EPEL for rhel-x yet, so install mock from Fedora 28
        dnf install -y rpm-build

        cat <<EOF > /etc/yum.repos.d/fedora.repo
[fedora]
name=Fedora 28 - \$basearch
baseurl=http://download.fedoraproject.org/pub/fedora/linux/releases/28/Everything/\$basearch/os/
enabled=1
gpgcheck=0
EOF
        dnf install -y --setopt=install_weak_deps=False mock
        rm  /etc/yum.repos.d/fedora.repo

        cat <<EOF > /etc/mock/default.cfg
config_opts['chroothome'] = '/builddir'
config_opts['use_host_resolv'] = False
config_opts['basedir'] = '/var/lib/mock'
config_opts['rpmbuild_timeout'] = 86400
config_opts['yum.conf'] = '[main]\\ncachedir=/var/cache/yum\\ndebuglevel=1\\nlogfile=/var/log/yum.log\\nreposdir=/dev/null\\nretries=20\\nobsoletes=1\\ngpgcheck=0\\nassumeyes=1\\nkeepcache=1\\ninstall_weak_deps=0\\nstrict=1\\n\\n# repos\\n\\n[build]\\nname=build\\nbaseurl=http://download.devel.redhat.com/brewroot/repos/rhel-8.0-go-toolset-build/latest/x86_64\\n'
config_opts['chroot_setup_cmd'] = 'groupinstall build'
config_opts['target_arch'] = 'x86_64'
config_opts['root'] = u'rhel-8.0-candidate-x86_64'

config_opts['macros']['%_topdir'] = '/builddir/build'
config_opts['macros']['%_rpmfilename'] = '%%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm'
EOF
    else
        # enable epel for mock
        if [ ! -f "$SKIP_REPO_FLAG" ]; then
            mkdir /tmp/dep
            cd /tmp/dep
            yum -y install wget
            wget -T 15 -t 4 http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum -y remove wget
            rpm -Uvh epel-release-*.rpm
            cd
            rm -rf /tmp/dep
        fi

        yum -y install rpm-build mock

        # disable epel again
        yum-config-manager --disable 'epel*'
    fi

    useradd -c Builder -G mock builder
    srpm=$(/var/lib/testvm/make-srpm $TEST_SOURCE)
    su builder -c "/usr/bin/mock --verbose --installdeps $srpm"
    su builder -c "/usr/bin/mock --install --verbose rpmlint"
fi

yum clean all || true

if [ ! -f "$SKIP_REPO_FLAG" ]; then
    [ "$IMAGE" = "rhel-x" ] || subscription-manager unregister
fi

# For the D-Bus test server
if type "firewall-cmd" >/dev/null 2>&1; then
    FIREWALL_STATE=$(firewall-cmd --state || true)
    if [ "$FIREWALL_STATE" == "running" ]; then
        firewall-cmd --permanent --add-port 8765/tcp
    fi
fi

echo 'NETWORKING=yes' > /etc/sysconfig/network

useradd -c Administrator -G wheel admin
echo foobar | passwd --stdin admin

# To enable persistent logging
mkdir -p /var/log/journal

if type "docker" >/dev/null 2>&1; then
    # HACK: docker falls over regularly, print its log if it does
    systemctl start docker || journalctl -u docker

    # docker images that we need for integration testing
    /var/lib/testvm/docker-images.setup
fi

/var/lib/testvm/zero-disk.setup --keep-mock-cache

# HACK - kdump.service interferes with our storage tests, by loading
# the system for some time after boot and thereby causing a race
# between parted and udevd to turn out for the worse.  Disabling
# kdump.service helps somewhat, but the race is still there, and
# parted still fails occasionally.
#
# https://bugzilla.redhat.com/show_bug.cgi?id=1245144
# Fixed in parted-3.1-23.el7
#
systemctl disable kdump.service

if [ "$IMAGE" = "rhel-x" ]; then
    # HACK: https://bugzilla.redhat.com/show_bug.cgi?id=1600823
    # dnf-makecache.timer causes dependency loops and excessive boot times
    systemctl disable dnf-makecache.timer
fi

# Final tweaks

rm -rf /var/log/journal/*
# RHEL 7 does not enable systemd-coredump by default, later versions do
if ! grep -qr core_pattern /usr/lib/sysctl.d/; then
    echo "kernel.core_pattern=|/usr/lib/systemd/systemd-coredump %p %u %g %s %t %e" > /etc/sysctl.d/50-coredump.conf
fi

# Prevent SSH from hanging for a long time when no external network access
echo 'UseDNS no' >> /etc/ssh/sshd_config

# Audit events to the journal
if [ ! -f /root/.keep-audit ]; then
    rm -f '/etc/systemd/system/multi-user.target.wants/auditd.service'
    rm -rf /var/log/audit/
else
    echo "Keeping audit enabled as /root/.keep-audit exists"
fi
