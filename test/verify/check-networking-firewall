#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2018 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import parent
import time
from testlib import *
from netlib import NetworkCase


def wait_unit_state(machine, unit, state):

    def active_state(unit):
        # HACK: don't use `systemctl is-active` here because of
        #   https://bugzilla.redhat.com/show_bug.cgi?id=1073481
        # Also, use `systemctl --value` once that exists everywhere
        line = machine.execute("systemctl show -p ActiveState {}".format(unit))
        return line.strip().split("=")[1]

    wait(lambda: active_state(unit) == state, delay=0.2)


class TestFirewall(NetworkCase):

    def testNetworkingPage(self):
        b = self.browser
        m = self.machine

        # default zone has no interface in permanent configuration
        # https://github.com/cockpit-project/cockpit/issues/11748
        if m.image in ["debian-stable"]:
            m.execute("firewall-cmd --permanent --zone=public --add-interface=eth1")
        m.execute("systemctl stop firewalld")

        self.login_and_go("/network")
        self.wait_onoff("#networking-firewall-switch", False)
        self.toggle_onoff("#networking-firewall-switch")
        self.wait_onoff("#networking-firewall-switch", True)
        wait_unit_state(m, "firewalld", "active")
        active_rules = m.execute("firewall-cmd --list-services").split()
        b.wait_in_text("#networking-firewall-summary", "{} Active Rule".format(len(active_rules)))

        self.toggle_onoff("#networking-firewall-switch")
        self.wait_onoff("#networking-firewall-switch", False)
        wait_unit_state(m, "firewalld", "inactive")
        b.wait_in_text("#networking-firewall-summary", "0 Active Rules")

        # toggle the service from CLI, page should react
        m.execute("systemctl start firewalld")
        self.wait_onoff("#networking-firewall-switch", True)
        b.wait_in_text("#networking-firewall-summary", "{} Active Rule".format(len(active_rules)))
        m.execute("systemctl stop firewalld")
        self.wait_onoff("#networking-firewall-switch", False)
        b.wait_in_text("#networking-firewall-summary", "0 Active Rules")

        b.click("#networking-firewall-link")
        b.enter_page("/network/firewall")

        b.click(".breadcrumb li:first a")
        b.enter_page("/network")

        self.allow_journal_messages(".*The name org.fedoraproject.FirewallD1 was not provided by any .service files.*",
                                    ".*org.fedoraproject.FirewallD1: couldn't introspect /org/fedoraproject/FirewallD1/config: GDBus.Error:org.freedesktop.DBus.Error.NoReply: Message recipient disconnected from message bus without replying.*")

    @skipImage("Button got fixed in PR #10975", "rhel-8-0-distropkg")
    def testFirewallPage(self):
        b = self.browser
        m = self.machine

        # default zone has no interface in permanent configuration
        # https://github.com/cockpit-project/cockpit/issues/11748
        if m.image in ["debian-stable"]:
            m.execute("firewall-cmd --permanent --zone=public --add-interface=eth1")

        m.execute("systemctl stop firewalld")
        self.login_and_go("/network/firewall")

        # "Add Services" button should not be present
        b.wait_not_present("caption #add-services-button")

        self.wait_onoff("h1", False)
        self.toggle_onoff("h1")
        self.wait_onoff("h1", True)
        wait_unit_state(m, "firewalld", "active")

        # Wait until the default zone is listed
        b.wait_in_text("#zones-listing", "Public")
        b.wait_in_text("#zones-listing", "default")

        # "Add Services" button should be enabled
        b.wait_present("caption #add-services-button:enabled")

        # ensure that pop3 is not enabled (shouldn't be on any of our images),
        # so that we can use it for testing
        b.wait_not_present("tr[data-row-id='pop3']")

        m.execute("firewall-cmd --add-service=pop3")
        b.wait_present("tr[data-row-id='pop3']")

        # all services should be shown after the one we added above is
        # visible, so do a basic sanity check now
        active_rules = m.execute("firewall-cmd --list-services").split()
        b.call_js_func("ph_count_check", "#services-listing tr.listing-ct-item", len(active_rules))

        b.click("tr[data-row-id='pop3'] .listing-ct-toggle")
        b.wait_in_text("tbody.open tr.listing-ct-panel", "Post Office Protocol")

        b.click("tr[data-row-id='pop3'] .btn.pficon-delete")
        b.wait_present("#remove-services-dialog")
        b.wait_present("#remove-services-dialog input[value=public]:checked")
        b.click("#remove-services-dialog button.btn-primary")
        b.wait_not_present("tr[data-row-id='pop3']")
        self.assertNotIn('pop3', m.execute("firewall-cmd --list-services").split())

        # Test that service without name is shown properly
        m.execute("firewall-cmd --permanent --new-service=empty && firewall-cmd --reload && firewall-cmd --add-service=empty")
        b.wait_present("tr[data-row-id='empty']")

        # switch service off again
        self.toggle_onoff("h1")
        self.wait_onoff("h1", False)
        wait_unit_state(m, "firewalld", "inactive")
        # "Add Services" button should be hidden again
        b.wait_not_present("caption #add-services-button")

    @skipImage("Filtering got fixed, IDs changed to data-id, and conversion to ListView in 191",
               "rhel-8-0-distropkg")
    def testAddServices(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/network/firewall")
        b.wait_in_text("#zones-listing", "Public")
        b.wait_in_text("#zones-listing", "default")

        # click on the "Add Services" button
        b.wait_present("caption #add-services-button:enabled")
        b.click("caption #add-services-button")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")
        # rhel-8 comes with an extra preconfigured libvirt zone
        if m.image not in ["rhel-8-0", "rhel-8-1", "rhel-8-0-distropkg", "rhel-8-1-distropkg"]:
            b.wait_not_present("#cockpit_modal_dialog input[value='public']")

        # filter for pop3
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.set_input_text("#filter-services-input", "pop")
        b.wait_not_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")
        self.assertIn("TCP: 110", b.text("#cockpit_modal_dialog .list-view-pf .list-group-item:first-child .service-ports.tcp"))
        b.wait_not_present("#cockpit_modal_dialog .list-view-pf .list-group-item:first-child .service-ports.udp")
        # clear filter
        b.set_input_text("#filter-services-input", "")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")

        # filter for port 110
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.set_input_text("#filter-services-input", "110")
        b.wait_not_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")
        self.assertIn("TCP: 110", b.text("#cockpit_modal_dialog .list-view-pf .list-group-item:first-child .service-ports.tcp"))
        b.wait_not_present("#cockpit_modal_dialog .list-view-pf .list-group-item:first-child .service-ports.udp")
        # clear filter
        b.set_input_text("#filter-services-input", "")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")

        # don't select anything in the dialog
        b.click("#add-services-dialog .modal-footer .btn-primary")
        b.wait_not_present("#cockpit_modal_dialog")

        # now add pop3
        b.click("#services-listing caption button.btn-primary")
        # rhel-8 comes with an extra preconfigured libvirt zone
        if m.image in ["rhel-8-0", "rhel-8-1", "rhel-8-0-distropkg"]:
            b.click("#add-services-dialog input[value='public']")
            b.click("#add-services-dialog input[value='libvirt']")
        b.click("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")
        b.click("#add-services-dialog .modal-footer .btn-primary")
        b.wait_not_present("#cockpit_modal_dialog")
        b.wait_present("tr[data-row-id='pop3']")

        # pop3 should now not appear any more in Add Services dialog
        b.click("caption #add-services-button")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.wait_not_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")
        b.click("#add-services-dialog .modal-footer .btn-cancel")
        b.wait_not_present("#cockpit_modal_dialog")

        # Service without name should appear in the dialog
        m.execute("firewall-cmd --permanent --new-service=empty && firewall-cmd --reload")
        b.click("caption #add-services-button")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='empty']")
        b.click("#add-services-dialog .modal-footer .btn-cancel")
        b.wait_not_present("#cockpit_modal_dialog")

        def removeService(service, zones=[]):
            b.click("tr[data-row-id='{}'] .btn.pficon-delete".format(service))
            for zone in zones:
                b.click("#remove-services-dialog input[value={}]".format(zone))
            b.click("#remove-services-dialog button.btn-primary")
            b.wait_not_present("#remove-services-dialog")
            b.wait_not_present("tr[data-row-id='{}']".format(service))

        # remove all services
        services = set(m.execute("firewall-cmd --list-services").strip().split(" "))
        # rhel-8 comes with an extra preconfigured libvirt zone so remove all
        # the service which belong to both libvirt and public (and thus
        # requiring checkboxes to be clicked), then remove all the services
        # belonging either libvirt or public
        if m.image in ["rhel-8-0", "rhel-8-1", "rhel-8-0-distropkg", "rhel-8-1-distropkg"]:
            libvirt_services = set(m.execute("firewall-cmd --zone=libvirt --list-services").strip().split(" "))
            for service in libvirt_services & services:
                removeService(service, zones=["libvirt", "public"])
            for service in libvirt_services ^ services:
                removeService(service)
        else:
            for service in services:
                removeService(service)

        self.assertEqual(m.execute("firewall-cmd --list-services").strip(), "")
        if m.image in ["rhel-8-0", "rhel-8-1", "rhel-8-0-distropkg", "rhel-8-1-distropkg"]:
            self.assertEqual(m.execute("firewall-cmd --zone=libvirt --list-services").strip(), "")

        # test error handling
        m.execute("firewall-cmd --add-service=pop3")
        b.wait_present("tr[data-row-id='pop3']")
        b.click("tr[data-row-id='pop3'] .btn.pficon-delete")
        # remove service while the dialog is open
        m.execute("firewall-cmd --remove-service=pop3")
        b.click("#remove-services-dialog button.btn-primary")
        b.wait_in_text("#remove-services-dialog div.alert", "org.fedoraproject.FirewallD1.Exception: NOT_ENABLED: 'pop3' not in 'public'")

    @skipImage("Custom ports were introduced in #11420", "rhel-8-0-distropkg")
    def testAddCustomServices(self):
        b = self.browser
        m = self.machine

        # default zone has no interface in permanent configuration
        # https://github.com/cockpit-project/cockpit/issues/11748
        if m.image in ["debian-stable"]:
            m.execute("firewall-cmd --permanent --zone=public --add-interface=eth1")

        self.login_and_go("/network/firewall")
        b.wait_in_text("#zones-listing", "Public")
        b.wait_in_text("#zones-listing", "default")

        def open_dialog():
            b.wait_present("caption #add-services-button:enabled")
            b.click("caption #add-services-button")
            b.wait_present("#add-services-dialog input[value='ports']:enabled")
            b.click("#add-services-dialog input[value='ports']")
            b.wait_present("#tcp-ports")
            b.wait_visible("#tcp-ports")
            # rhel-8 comes with an extra preconfigured libvirt zone
            if m.image in ["rhel-8-0", "rhel-8-1", "rhel-8-0-distropkg", "rhel-8-1-distropkg"]:
                b.click("#add-services-dialog input[value='public']")

        def set_field(sel, val, expected):
            b.set_input_text(sel, val)
            b.wait_val("#service-name", expected)

        def check_error(text):
            b.wait_present(".has-error:contains({0})".format(text))
            b.wait_visible(".has-error:contains({0})".format(text))

        def save(identifier, name, tcp, udp):
            b.click("button:contains(Add Ports)")
            b.wait_not_present("#add-services-dialog")
            line_sel = "tr[data-row-id='{0}']".format(identifier)
            b.wait_present(line_sel)
            b.wait_in_text(line_sel, "".join([name, tcp, udp]))
            b.wait_in_text(line_sel, "Public")

        open_dialog()
        set_field("#tcp-ports", "80", "WorldWideWeb HTTP")
        set_field("#tcp-ports", "", "")
        set_field("#tcp-ports", "80,7", "http, echo")
        set_field("#udp-ports", "194", "http, echo, irc")
        set_field("#udp-ports", "194,   50000", "http, echo, irc...")
        set_field("#tcp-ports", "", "irc, 50000")
        set_field("#tcp-ports", "https", "https, irc, 50000")
        save("custom--https-irc-50000", "https, irc, 50000", "443", "194, 50000")

        open_dialog()
        set_field("#tcp-ports", "80-82", "80-82")
        set_field("#tcp-ports", "80-82, echo", "80-82, echo")
        set_field("#udp-ports", "ntp-irc", "80-82, echo, 123-194")
        set_field("#udp-ports", "83-ntp", "80-82, echo, 83-123")
        set_field("#udp-ports", "83-ntp, irc", "80-82, echo, 83-123...")
        save("custom--80-82-echo-83-123-irc", "80-82, echo, 83-123...", "80-82, 7", "83-123, 194")

        open_dialog()
        set_field("#tcp-ports", "80", "WorldWideWeb HTTP")
        b.set_input_text("#service-name", "I am persistent")
        b.set_input_text("#tcp-ports", "7")
        time.sleep(5) # We need to validate that the service name did not change
        b.wait_val("#service-name", "I am persistent")
        save("custom--echo", "I am persistent", "7", "")

        open_dialog()
        set_field("#tcp-ports", "500000", "")
        check_error("Invalid port number")
        set_field("#tcp-ports", "-1", "")
        check_error("Invalid port number")
        set_field("#tcp-ports", "8a", "")
        check_error("Unknown service name")
        set_field("#tcp-ports", "foobar", "")
        check_error("Unknown service name")
        set_field("#tcp-ports", "80-80", "")
        check_error("Range must be strictly ordered")
        set_field("#tcp-ports", "80-79", "")
        check_error("Range must be strictly ordered")
        set_field("#tcp-ports", "https-http", "")
        check_error("Range must be strictly ordered")
        set_field("#tcp-ports", "80-90-", "")
        check_error("Invalid range")
        set_field("#tcp-ports", "80-90-100", "")
        check_error("Invalid range")
        b.click("#add-services-dialog button.btn-cancel")

        # test error handling
        # attempt to create custom service which already exists
        m.execute("firewall-cmd --permanent --new-service=custom--19834")
        m.execute("firewall-cmd --permanent --service=custom--19834 --add-port=19834/udp")
        open_dialog()
        set_field("#udp-ports", "19834", "19834")
        b.click("#add-services-dialog button.btn-primary")
        b.wait_in_text("#add-services-dialog div.alert", "org.fedoraproject.FirewallD1.Exception: NAME_CONFLICT: new_service(): 'custom--19834'")


    @skipImage("Zones were introduced in #11745", "rhel-8-0-distropkg")
    def testMultipleZones(self):
        b = self.browser
        m = self.machine

        def addServiceToZone(service, zone):
            b.click("#services-listing caption button.btn-primary")
            b.click("#add-services-dialog input[value='{}']".format(zone))
            b.click("#add-services-dialog .list-view-pf input[data-id='{}']".format(service))
            b.click("#add-services-dialog .modal-footer .btn-primary")
            b.wait_not_present("#cockpit_modal_dialog")
            b.wait_present("tr[data-row-id='{}']".format(service))
            self.assertIn(service, m.execute("firewall-cmd --zone={} --list-services".format(zone)))

        def addZone(zone, interfaces=[], sources=None, error=None):
            b.click("caption #add-zone-button")
            b.wait_present("#add-zone-dialog")
            b.wait_present("#add-zone-dialog .modal-footer button.btn-primary:disabled")
            b.click("#add-zone-dialog .add-zone-zones-firewalld input[value='{}']".format(zone))

            for i in interfaces:
                b.click("#add-zone-dialog-body input[value='{}']".format(i))
            if sources:
                b.click("#add-zone-dialog-body input[value='ip-range']")
                b.set_input_text("#add-zone-dialog-body #add-zone-ip", sources)

            b.click("#add-zone-dialog .modal-footer button.btn-primary:enabled")

            if error:
                b.wait_in_text("#add-zone-dialog div.alert", error)
                b.click("#add-zone-dialog .modal-footer button.btn-cancel")
                b.wait_not_present("#add-zone-dialog")
                return

            b.wait_not_present("#add-zone-dialog")
            for source in sources.split(",") if sources else []:
                b.wait_present("#zones-listing:contains({})".format(source))
            for i in interfaces:
                b.wait_present("#zones-listing:contains({})".format(i))
            b.wait_present("#zones-listing tr[data-row-id='{}']".format(zone))

        def removeZone(zone):
            b.click("#zones-listing tr[data-row-id='{}'] button.btn-danger".format(zone))
            b.wait_not_present("#zones-listing tr[data-row-id='{}']".format(zone))

        self.login_and_go("/network/firewall")
        b.wait_in_text("#zones-listing", "Public")
        b.wait_in_text("#zones-listing", "default")

        # add predefined work zone
        addZone("work", sources="192.168.1.0/24")

        addServiceToZone("pop3", "work")
        b.wait_present("tr[data-row-id='pop3']:contains(Work)")
        self.assertNotIn("Public", b.text("tr[data-row-id='pop3']"))
        addServiceToZone("pop3", "public")
        b.wait_present("tr[data-row-id='pop3']:contains(Public)")

        # Remove the service from Public zone
        b.click("tr[data-row-id='pop3'] .btn.pficon-delete")
        b.wait_present("#remove-services-dialog button.btn-primary:disabled")
        b.click("#remove-services-dialog input[value='work']")
        b.click("#remove-services-dialog button.btn-primary")
        b.wait_not_present("tr[data-row-id='pop3']:contains(Work)")
        self.assertIn("Public", b.text("tr[data-row-id='pop3']"))

        # Remove the service from the remaining zone(s)
        b.click("tr[data-row-id='pop3'] .btn.pficon-delete")
        b.wait_present("#remove-services-dialog")
        b.click("#remove-services-dialog button.btn-primary")
        b.wait_not_present("tr[data-row-id='pop3']")

        # remove predefined work zone
        removeZone("work")
        # add zone with interface
        # The public zone in these images are attached to eth1
        interface = ""
        if m.image in ["debian-stable", "debian-testing", "ubuntu-stable", "ubuntu-1804"]:
            interface = "eth0"
        # The public zone in these images are attached to both eth0 and eth1
        elif m.image in ["fedora-atomic"]:
            interface = "docker0"
        else:
            interface = "eth1"
        addZone("home", interfaces=[interface])
        # Interfaces which already belong to an active zone shouldn't show up in
        # the Add Zone dialog anymore
        b.click("caption #add-zone-button")
        b.wait_present("#add-zone-dialog")
        b.wait_not_present("#add-zone-body input[value='{}']".format(interface))
        b.click("#add-zone-dialog .modal-footer button.btn-cancel")
        b.wait_not_present("#add-zone-dialog")

        addServiceToZone("pop3", "home")
        removeZone("home")

        addZone("work", sources="totally invalid address", error="Error message: org.fedoraproject.FirewallD1.Exception: INVALID_ADDR: totally invalid address")

if __name__ == '__main__':
    test_main()
