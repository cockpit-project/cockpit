#!/bin/bash
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

set -e

if [ -z "$LIBVIRT_DEFAULT_URI" ]; then
    LIBVIRT_DEFAULT_URI="qemu:///system"
fi
export LIBVIRT_DEFAULT_URI

export LIBGUESTFS_BACKEND=direct

cd "`dirname "$0"`"

source ./lib/host_setup.sh
source ./lib/create_test_machine.sh
LUSER=`whoami`
ENV_VARIABLES=./lib/var.env
rm -f $ENV_VARIABLES

if [ -z "$TESTS_TIMEOUT" ]; then
    TESTS_TIMEOUT="15m"
fi

# setup enviromental variable to override these values (useful for testing on another environment)
# GUEST_NUMBER , GUESTOS
if [ -z "$GUEST_NUMBER" ]; then
    GUEST_NUMBER="7"
fi
if [ -z "$GUESTOS" ]; then
    GUESTOS=fedora-21
fi
if echo "$GUESTOS" | egrep -qi "centos|fedora|redhat|rhel"; then
    METHOD="redhat"
elif echo "$GUESTOS" | egrep -qi "debian"; then
    METHOD="debian"
    echolog "Not supported now"
    exit 0
else
    echolog "Not apropriate method for setup guests"
    exit 5
fi

echolog ">>> $GUESTOS testing <<<"

if check_host $LUSER; then
    echodebug "Host already configured"
else
    if sudo ./lib/host_setup.sh $LUSER; then
        echolog "Host environment ready"
    else
        echolog "Unable to create environment, EXITING"
        exit 1
    fi
fi

# generate key for actual user if not generated yet (to ensure)
if [ ! -e ~/.ssh/id_rsa ]; then
    ssh-keygen -q -f ~/.ssh/id_rsa -N "" </dev/null
fi

GUESTNAME="checkmachine${GUEST_NUMBER}"
GUEST1=`vm_get_name $GUESTNAME $GUESTOS`
IPA_DISTRO=fedora-21
GUEST_IPA=`vm_get_name ipa $IPA_DISTRO`

# TODO: allow setting this up in a parallel environment for testing
# and migrate to the "real" pool once it works
if [ -n "$CLEAN" ]; then
    echolog "Delete network"
    virsh net-destroy $HS_POOLNAME || true
    virsh net-undefine $HS_POOLNAME || true

    echolog "Delete $GUEST1"
    virsh destroy $GUEST1 &>/dev/null || true
    virsh snapshot-delete $GUEST1 initialized &>/dev/null || true
    virsh undefine $GUEST1 &>/dev/null || true
    virsh vol-delete --pool $HS_POOLNAME $GUEST1.qcow2 &>/dev/null || true

    echolog "Delete $GUEST_IPA"
    virsh destroy $GUEST_IPA &>/dev/null || true
    virsh snapshot-delete $GUEST_IPA initialized &>/dev/null || true
    virsh undefine $GUEST_IPA &>/dev/null || true
    virsh vol-delete --pool $HS_POOLNAME $GUEST_IPA.qcow2 &>/dev/null || true

    definenet $HS_POOLNAME
    virsh net-start $HS_POOLNAME
    virsh net-autostart $HS_POOLNAME
    vm_create $GUESTNAME $GUESTOS
    vm_create ipa $IPA_DISTRO
fi

# make sure all machines are shutdown to avoid residual interaction
echolog "Ensure no machines are running"
virsh destroy $GUEST1 &>/dev/null || true
virsh destroy $GUEST_IPA &>/dev/null || true

# GUEST1 machine
#
if virsh snapshot-info $GUEST1 initialized &>/dev/null; then
    echolog "Revert $GUEST1 to last 'initialized' state"
    virsh snapshot-revert $GUEST1 initialized >/dev/null
else
    echolog "Set up $GUEST1"
    vm_ssh $GUEST1 date --set $(date -Ins) >/dev/null
    vm_ssh $GUEST1 bash -c "cat - >/tmp/cockpit.spec" <../tools/cockpit.spec
    vm_ssh $GUEST1 bash -s < ./lib/guest-cockpit-$METHOD.sh /tmp/cockpit.spec
    echolog "Save $GUEST1 'initialized' state"
    virsh snapshot-create-as $GUEST1 initialized >/dev/null
fi

# GUEST_IPA machine
#
if virsh snapshot-info $GUEST_IPA initialized &>/dev/null; then
    echolog "Revert $GUEST_IPA to last 'initialized' state"
    virsh snapshot-revert $GUEST_IPA initialized >/dev/null
else
    echolog "Set up $GUEST_IPA"
    vm_ssh $GUEST_IPA date --set $(date -Ins) >/dev/null
    vm_ssh $GUEST_IPA bash -s < ./lib/guest-ipa.sh
    echolog "Save $GUEST_IPA 'initialized' state"
    virsh snapshot-create-as $GUEST_IPA initialized >/dev/null
fi

for MACHINE in $GUEST1 $GUEST_IPA
do
	  if ! vm_wait_online $MACHINE; then
        echolog "FAILED waiting for $MACHINE to be online"
        exit 1
    fi
done

if [ -n "$SKIP_TEST" ]; then
    exit 0
fi


# Write variables for IPA tests
echo "IPADOMAIN='cockpit.lan'" >> $ENV_VARIABLES
echo "IPADOMAINIP='`vm_get_ip $GUEST_IPA`'" >> $ENV_VARIABLES

echolog "Tests will be run on these machines:"
write_out $GUEST1
write_out $GUEST_IPA
echo

LOCAL_VERSION=`avocado -v 2>&1 |grep Avo`
echolog "getting remote version"
#REMOTE_VERSION=`vm_ssh $GUEST1 "avocado -v " 2>&1 | grep Avo`
REMOTE_VERSION=`vm_ssh $GUEST1 "avocado -v " | grep Avo`
if [ "$LOCAL_VERSION" != "$REMOTE_VERSION" ]; then
    echolog "avocado versions are not same on LOCAL and REMOTE $LOCAL_VERSION != $REMOTE_VERSION (SHOULD BE)"
    exit 11
fi

# Install cockpit sources to $GUEST1
#
echolog "installing cockpit sourcecode"
( cd $(git rev-parse --show-toplevel) && git archive HEAD --prefix cockpit/ ) \
  | vm_ssh $GUEST1 "rm -rf /root/cockpit && tar xfm - --directory /root/"

GUEST1_IP=`vm_get_ip $GUEST1`
GUEST1_PASSWD=`vm_get_pass $GUEST1`
AVOCADO_PARAMS="--vm-domain $GUEST1 --vm-username root --vm-password $GUEST1_PASSWD --vm-hostname $GUEST1_IP"
# If we aren't told to test something specific, test all
if [ -z "$AVOCADO_TESTS" ]; then
    AVOCADO_TESTS="compiletest.sh checklogin-basic.py checklogin-raw.py checkrealms-basic.py"
else
    COMPILE_TEST=compiletest.sh
    # Make sure that we update and compile source, for that we need the compiletest
    if [ "${AVOCADO_TESTS/$COMPILE_TEST}" = "$AVOCADO_TESTS" ] ; then
    	echo "Adding required test $COMPILE_TEST"
    	AVOCADO_TESTS="$COMPILE_TEST $AVOCADO_TESTS";
    fi
fi
echolog "run tests"
# Make sure the tests don't stall
timeout $TESTS_TIMEOUT avocado run $AVOCADO_PARAMS $AVOCADO_TESTS || true

# Clean up after ourselves
virsh destroy $GUEST1 || true
virsh destroy $GUEST_IPA || true
