#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *
import re

class TestJournal(MachineCase):
    def setUp(self):
        # we need a static ip for this test
        MachineCase.setUp(self, macaddr='52:54:00:9e:00:F4')

    def testBasic(self):
        b = self.browser
        m = self.machine

        if "219-21" in m.execute("rpmquery systemd"):
            # HACK - https://bugzilla.redhat.com/show_bug.cgi?id=1253649
            return

        m.needs_writable_usr()

        self.allow_restart_journal_messages()
        self.allow_journal_messages(".*Failed to get realtime timestamp: Cannot assign requested address.*")

        def inject_extras():
            b.eval_js("""
            ph_get_log_lines = function () {
                var lines = [ ], i;
                $('.cockpit-log-panel').children().each(function (i, e) {
                    var $e = $(e);
                    if ($e.is('.panel-heading')) {
                        lines.push ($e.text());
                    } else {
                        var msg = $e.find('.cockpit-log-message').text();
                        var ident = '';
                        var count = '';
                        if ($e.find('.cockpit-log-service-container').length > 0) {
                            ident = $e.find('.cockpit-log-service-reduced').text();
                            // we need to slice the whitespace
                            count = $e.find('.badge').text().slice(0, -1);
                        } else {
                            ident = $e.find('.cockpit-log-service').text();
                        }
                        lines.push ([ ident, msg, count ]);
                    }
                });
                var journal_start_text = $('.journal-start').text();
                if (journal_start_text !== "")
                    lines.push(journal_start_text);
                // console.log(JSON.stringify(lines));
                return lines;
            }
            """)

        # Certain versions of journald wont set _SYSTEMD_UNIT
        # correctly for entries that are processed after the
        # originating process has already exited.  So we keep the
        # process around for a bit longer after the last line has been
        # output.
        #
        m.write("/usr/lib/systemd/system/log123.service",
"""
[Unit]
Description=123 different log lines

[Service]
ExecStart=/bin/sh -c '/usr/bin/seq 123; sleep 10'
""")

        m.write("/usr/lib/systemd/system/slow10.service",
"""
[Unit]
Description=Slowly log 10 identical lines

[Service]
ExecStart=/bin/sh -c 'for s in $(seq 10); do echo SLOW; sleep 0.1; done; sleep 10'
""")

        m.execute("systemctl stop chronyd &>/dev/null; systemctl disable chronyd; date 010112002050; hwclock -w")

        self.login_and_go("/system/logs")
        inject_extras()

        def wait_log_lines(expected):
            b.wait_js_func("""(function (expected) {
          var lines = ph_get_log_lines ();
          if (expected.length != lines.length)
            return false;
          for (i = 0; i < expected.length; i++)
            if (JSON.stringify(expected[i]) != JSON.stringify(lines[i]))
              return false;
          return true;
        })""", expected)

        def wait_journal_empty():
            wait_log_lines([ ])

        b.go("#/?prio=*&service=log123.service")
        wait_journal_empty()

        def wait_log123():
            b.wait_js_func ("""(function () {
          var lines = ph_get_log_lines();

          if (lines[0] != "January 1, 2050")
            return false;

          var seq = 123;
          var seen_day = false;

          for (i = 1; i < lines.length; i++) {
            l = lines[i];
            if (l[2] != "") {
              // console.log("repeat", l[2], "?");
              return false;
            }
            if (l[0] == "systemd: ") {
              // console.log(l[1], "?");
              return false;
            } else if (l[0] == "sh") {
              if (l[1] != seq.toString()) {
                // console.log(l[1], "?");
                return false;
              }
              seq = seq - 1;
            } else {
              // console.log(l[0], "?");
              return false;
            }
          }

          if (seq != 0) {
            // console.log("Didn't see all 'seq' lines.")
            return false;
          }

          return true;
        })""")

        m.execute("systemctl start log123")
        wait_log123()

        b.go("#/?prio=*&start=oldest&service=nonexisting.service")
        wait_journal_empty()
        b.go("#/?prio=*&start=oldest&service=log123.service")
        wait_log123()

        b.go("#/?prio=*&start=recent&service=nonexisting.service")
        wait_journal_empty()
        b.go("#/?prio=*&start=recent&service=log123.service")
        wait_log123()

        b.go("#/?prio=*&start=recent&service=slow10.service")
        wait_journal_empty()

        def wait_slow10():
            wait_log_lines([ "January 1, 2050", [ "sh", "SLOW", "10" ]
                       ])

        m.execute("systemctl start slow10")
        wait_slow10()

        b.go("#/?prio=*&start=oldest&service=nonexisting.service")
        wait_journal_empty()
        b.go("#/?prio=*&start=oldest&service=slow10.service")
        wait_slow10()

        if "208" in m.execute("journalctl --version"):
            # HACK - Old versions of journalctl get the rest wrong.
            # https://bugzilla.redhat.com/show_bug.cgi?id=1211972
            return

        # insert messages as errors because we know these will be shown by default
        m.execute("logger -p user.err --tag check-journal BEFORE BOOT");
        m.spawn("sleep 0.1 && reboot", "reboot")
        m.wait_boot()
        m.execute("logger -p user.err --tag check-journal AFTER BOOT");

        self.start_cockpit()
        b.switch_to_top()
        b.relogin('/system/logs')
        inject_extras()

        b.go("#/?tag=check-journal")
        wait_log_lines([ "January 1, 2050",
                         [ "check-journal", "AFTER BOOT", "" ],
                         [ "", "Reboot", "" ],
                         [ "check-journal", "BEFORE BOOT", "" ]
                     ])

        b.go("#/?start=boot&tag=check-journal")
        wait_log_lines([ "January 1, 2050",
                         [ "check-journal", "AFTER BOOT", "" ],
                         "Load earlier entries",
                     ])

        b.click('#journal-load-earlier')
        wait_log_lines([ "January 1, 2050",
                         [ "check-journal", "AFTER BOOT", "2" ],
                         [ "", "Reboot", "" ],
                         [ "check-journal", "BEFORE BOOT", "" ]
                     ])

test_main()
