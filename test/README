# Integration Tests of Cockpit

This directory contains automated integration tests for Cockpit, and the support
files for them.

To run the tests on Fedora, you need to install the following packages:

    $ sudo yum install npm python-libguestfs qemu qemu-kvm python \
         libvirt-client openssl libguestfs-tools \
         krb5-workstation expect rsync libvirt-python curl xz

Testing requires phantomjs inside the cockpit package.

    $ npm install phantomjs-prebuilt

## Introduction

To run the integration tests run the following. Don't run the integration tests
as root:

    $ ./VERIFY

The first time you run the tests, they will create a cockpit1 bridged network used
for testing. You may be required to type your sudo password for this to work. In
addition various test images will be downloaded. This can take some time.

Alternatively you can run an individual test like this:

    $ cd test
    $ ./testsuite-prepare
    $ ./verify/check-session

The `./testsuite-prepare` command builds cockpit and puts it into the test. Only
code currently committed in the current branch will be installed and tested.

To see more verbose output from the test, use the --verbose and/or --trace flags:

    $ ./verify/check-session --verbose --trace

In addition if you specify `--sit`, then the test wail wait on failure and allow
you to log into cockpit and/or the test instance and diagnose the issue. An address
will be printed of the test instance.

    $ ./verify/check-session --trace --sit

## Details

For setting up the host:

 * vm-prep: Create the test network etc. Requires root.

For managing test machines and their images:

 * vm-download: Download test images
 * vm-upload: Upload test images
 * vm-create: Create test machine images
 * vm-reset: Start over from a clean slate
 * vm-install: Build and install Cockpit packages into a test machine image

For debugging:

 * vm-run: Run a test machine image
 * vm-copy: Copy files into a running test machine
 * vm-sh: Execute commands in a running test machine

The verify test suite is the main test suite:

 * verify/testsuite-prepare: Prepare everything so that tests can run
 * verify/run-tests: Run all tests
 * verify/check-*: Run the selected tests

## Test Configuration

You can set these environment variables to configure the test suite:

  TEST_OS    The OS to run the tests in.  Currently supported values: (vm-create)
                "fedora-23"
                "fedora-24"
                "fedora-testing"
                "fedora-atomic"
                "centos-7"
                "rhel-7"
                "debian-unstable"
             "fedora-24" is the default (testinfra.py, testlib.sh)

  TEST_DATA  Where to find and store test machine images.  The
             default is the same directory that this README file is in.

  TEST_JOBS  How many tests to run in parallel.  The default is 1.

## Test machines and their images

The code under test is executed in one or more dedicated virtual
machines, called the "test machines".  Fresh test machines are started
for each test. To pull all the needed images for a given commit, use:

 $ ./vm-download

A test machine runs a "test machine image".  Such a test machine image
contains the root filesystem that is booted inside the virtual
machine.  A running test machine can write to its root filesystem, of
course, but these changes are (usually) not propagated back to its
image.  Thus, you can run multiple test machines from the same image,
at the same time or one after the other, and each test machine starts
with a clean state.

A test machine image is created with vm-create, like so:

  $ ./vm-create -v fedora-24

The image will be created in $TEST_DATA/images/. In addition a link
reference will be created in test/images/.

If you wish that others use this new image then you should commit the
new reference link, and use `vm-upload` to upload the new image. You
would need to have Cockpit commit access to do this:

  $ ./vm-upload fedora-24

There is more than one test machine image. For example, you might
want to test a scenario where Cockpit on one machine talks to FreeIPA
on another, and you want those two machines to use different images.

This is handled by passing a specific image to vm-create
and other scripts that work with test machine images.

  "fedora-NN" -- The basic image for running the development version of Cockpit.
                 This is the default.

  "fedora-stock" -- A stock installation of Fedora, including the stock
                    version of Cockpit.  This is used to test compatibility
                    between released versions of Cockpit and the development version.

  "ipa"       -- A FreeIPA server.

  "openshift" -- An Openshift Origin server.

A test machine image created by vm-create doesn't contain any Cockpit
code in it yet.  You can build and install the currently checked out
working copy of Cockpit like this:

  $ ./vm-install $(../tools/make-rpms)

This will modify the test machine image that is used for the next run,
but will not modify the saved version in $TEST_DATA/images.  Use
vm-reset to revert the test machine images for the next run to the
versions in $TEST_DATA/images.

A typical sequence of steps would thus be the following:

  $ ./vm-download
  $ ./vm-reset            # Start over
  $ ../tools/make-rpms    # Create rpms
  $ ./vm-install ...      # Install code to test
  $ ./verify/check-...    # Run some tests

  $ ./vm-reset            # Start over
  $ ./vm-install ...      # Install code to test
  $ ./verify/check-...    # Run some tests

You can perform all of the above easily by doing `./testsuite-prepare`

## Running tests

Once you have a test machine image that contains the version of
Cockpit that you want to test, you can run tests by picking a program
and just executing it:

  $ ./verify/check-connection

Many of the verify tests can also be run against an already running
machine. Although be aware that lots of the tests change state on
the target machine.

  $ ./verify/check-connection --machine=10.1.1.2

## Debugging tests

If you pass the "-s" ("sit on failure") option to a test program, it
will pause when a failure occurs so that you can log into the test
machine and investigate the problem.

You can log into a running test-machine with "vm-sh".

You can also put calls to sit() into the tests themselves to stop them
at strategic places.

That way, you can run a test cleanly while still being able to make
quick changes, such as adding debugging output to JavaScript.

## Guidelines for writing tests

It is OK for a test to destroy the test machine OS installation, or
otherwise modify it without cleaning up.  For example, it is OK to
remove all of /etc just to see what happens.  The next test will get a
pristine test machine.

A fast running test suite is more important than independent,
small test cases.

Thus, it is OK for tests to be long.  Starting the test machine is so
slow that we should run as many checks within a single session as make
sense.

Still, within a long test, try to have independent sections, where
each section returns the machine to more or less the state that it was
in before the section.  This makes it easier to run these sections
ad-hoc when doing incremental development.
