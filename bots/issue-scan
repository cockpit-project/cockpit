#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2017 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import pipes
import os
import sys

sys.dont_write_bytecode = True

import github
import sink

BOTS = os.path.normpath(os.path.join(os.path.dirname(__file__)))
BASE = os.path.normpath(os.path.join(BOTS, ".."))

def main():
    parser = argparse.ArgumentParser(description="Scan issues for tasks")
    parser.add_argument("-v", "--human-readable", "--verbose", action="store_true", default=False,
         dest="verbose", help="Print verbose information")
    opts = parser.parse_args()

    for result in scan(opts.verbose):
        sys.stdout.write(result + "\n")
    return 0

# Map all checkable work items to fixtures
def tasks_for_issues():
    results = [ ]
    for issue in github.GitHub().issues():
        checklist = github.Checklist(issue["body"])
        for item, checked in checklist.items.items():
            if not checked:
                results.append((item, issue))
    return results

def output_task(command, issue, verbose):
    name, unused, context = command.partition(" ")
    if "/" in name:
        return None
    path = os.path.join("bots", name)
    print path, command, issue["number"]
    print os.path.join(BASE, path), os.X_OK
    if not os.access(os.path.join(BASE, path), os.X_OK):
        return None
    number = issue.get("number", None)
    if number is None:
        return None

    if verbose:
        if wip:
            xxxx priority
        return "issue-{issue} {command} {args}    {priority}".format(
            issue=int(number),
            priority=int(task["priority"]),
            cmd=path,
            context=context.strip()
        )
    else:
        if wip:
            return None
        return "PRIORITY=0005 {command} --issue='{issue}' {context}".format(
            issue=int(number),
            priority=int(task["priority"]),
            command=path,
            context=pipes.quote(context.strip())
        )

# Default scan behavior run for each task
def scan(verbose):
    global issues

    results = [ ]

    # Now go through each fixture
    for (command, issue) in tasks_for_issues():
        result = output_task(command, issue, verbose)
        if result is not None:
            results.append(result)

    return results

if __name__ == '__main__':
    sys.exit(main())
