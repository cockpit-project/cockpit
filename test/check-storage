#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *
import time

class TestStorage(MachineCase):
    def setUp(self):
        MachineCase.setUp(self)
        # Install a udev rule to work around the fact that serials from
        # VirtIO devices don't seem to appear early enough for udev to
        # pick them up reliably.  We just wait a bit.
        #
        self.machine.write("/usr/lib/udev/rules.d/59-fixup-serial.rules",
             'SUBSYSTEM=="block" KERNEL=="vd*" IMPORT{program}="/bin/sh -c \'sleep 0.5; s=$(cat /sys/block/$(basename $tempnode)/serial); echo ID_SERIAL=$s\'"')
        self.machine.execute("udevadm trigger");

    def inode(self, f):
        return self.machine.execute("stat -L '%s' -c %%i" % f)

    def add_disk(self, size, serial=None, speed=None):
        id = self.machine.add_disk(size, serial=serial, speed=speed)
        drive = self.browser.wait_dbus_prop("com.redhat.Cockpit.Storage.Drive", "Serial", serial)
        self.browser.wait_dbus_prop("com.redhat.Cockpit.Storage.Block", "Drive", drive)
        return id

    def get_block_object(self, serial):
        drive = self.browser.wait_dbus_prop("com.redhat.Cockpit.Storage.Drive", "Serial", serial)
        return self.browser.wait_dbus_prop("com.redhat.Cockpit.Storage.Block", "Drive", drive)

    def content_action_btn(self, index):
        return "#storage_detail_partition_list li:nth-child(%d) .btn-group" % index

    def content_action(self, index, action):
        self.browser.click_action_btn (self.content_action_btn(index), action)

    def content_default_action(self, index, action):
        btn = self.content_action_btn(index)
        self.browser.wait_action_btn (btn, action)
        self.browser.click_action_btn (btn)

    def content_single_action(self, index, action):
        btn = "#storage_detail_partition_list li:nth-child(%d) button" % index
        self.browser.wait_text (btn, action)
        self.browser.click (btn)

    def confirm(self):
        self.browser.wait_popup("confirmation-dialog")
        self.browser.click("#confirmation-dialog-confirm")
        self.browser.wait_popdown("confirmation-dialog")

    def testBasic(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")
        b.wait_in_text("#storage_drives", "VirtIO")

        # Add a disk, partition it, format it, and finally remove it.
        disk1 = self.add_disk("10M", serial="MYSERIAL")

        b.wait_in_text("#storage_drives", "MYSERIAL")
        b.click('tr:contains("MYSERIAL")')
        b.enter_page("storage-detail")
        b.wait_in_text('#storage_detail_partition_list', "Unrecognized Data")
        b.wait_not_in_text('#storage_detail_partition_list', "Partition")

        check_eq(self.inode(b.text("#disk_detail_device_file")), self.inode("/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_MYSERIAL"))

        m.execute('parted /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_MYSERIAL mktable gpt')
        m.execute('parted /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_MYSERIAL mkpart primary ext2 0 10')
        m.execute('udevadm settle')
        b.wait_in_text("#storage_detail_partition_list", "Partition")
        m.execute('mke2fs /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_MYSERIAL-part1')
        b.wait_in_text("#storage_detail_partition_list", "File System")
        b.go("storage")
        b.wait_in_text("#storage_drives", "MYSERIAL")
        m.rem_disk(disk1)
        b.wait_not_in_text("#storage_drives", "MYSERIAL")

    def testMounting(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")

        # Add a disk
        self.add_disk("50M", serial="MYDISK")
        b.wait_in_text("#storage_drives", "MYDISK")
        b.click('#storage_drives tr:contains("MYDISK")')
        b.enter_page("storage-detail")

        # Format it
        self.content_default_action(1, "Format")
        b.wait_popup("storage_format_dialog")
        b.set_val("#format-type", "ext4")
        b.set_val("#format-name", "FILESYSTEM")
        b.set_val("#format-mounting", "custom")
        b.set_val("#format-mount-point", "/foo")
        b.click("#format-format")
        b.wait_popdown("storage_format_dialog")
        b.wait_in_text("#storage_detail_partition_list", "FILESYSTEM")
        path = b.wait_dbus_prop("com.redhat.Cockpit.Storage.Block", "MountPoint", "/foo")

        self.content_default_action(1, "Mount");
        b.wait_in_text("#storage_detail_partition_list", "mounted on /foo")

        self.content_default_action(1, "Unmount");
        b.wait_in_text("#storage_detail_partition_list", "not mounted")

        self.content_action(1, "Filesystem Options");
        b.wait_popup("filesystem_options_dialog")
        b.wait_val("#fsysopts-name", "FILESYSTEM")
        b.wait_val("#fsysopts-mount-point", "/foo")
        b.set_val("#fsysopts-mount-point", "/bar");
        b.click("#fsysopts-apply")
        b.wait_popdown("filesystem_options_dialog")
        b.wait_dbus_object_prop(path, "com.redhat.Cockpit.Storage.Block", "MountPoint", "/bar")

        self.content_default_action(1, "Mount");
        b.wait_in_text("#storage_detail_partition_list", "mounted on /bar")

        # Go to overview page and check that the filesystem usage is
        # displayed correctly.

        def wait_ratio_in_range(sel, low, high):
            b.wait_js_func("""(function (sel, low, high) {
              var text = ph_text(sel);
              var match = text.match('([0-9.]+) / ([0-9]+)');
              if (!match)
                return false;
              var ratio = parseFloat(match[1]) / parseFloat(match[2]);
              return low <= ratio && ratio <= high;
            })""", sel, low, high)

        b.go("storage")
        b.wait_in_text("#storage_mounts", "/bar")
        wait_ratio_in_range('#storage_mounts tr:contains("/bar") td:nth-child(4)', 0.0, 0.1)
        m.execute("dd if=/dev/zero of=/bar/zero bs=1M count=30")
        wait_ratio_in_range('#storage_mounts tr:contains("/bar") td:nth-child(4)', 0.5, 1.0)
        m.execute("rm /bar/zero")
        wait_ratio_in_range('#storage_mounts tr:contains("/bar") td:nth-child(4)', 0.0, 0.1)
        m.execute("umount /bar")
        b.wait_not_in_text("#storage_mounts", "/bar")
        b.click('#storage_mounts tr:contains("FILESYSTEM")')
        b.enter_page("storage-detail")
        b.wait_text("#disk_detail_serial_number", "MYDISK")

        b.wait_in_text("#storage_detail_partition_list", "not mounted")

        self.content_action(1, "Filesystem Options");
        b.wait_popup("filesystem_options_dialog")
        b.wait_val("#fsysopts-name", "FILESYSTEM")
        b.set_val("#fsysopts-mounting", "default");
        b.click("#fsysopts-apply")
        b.wait_popdown("filesystem_options_dialog")
        b.wait_dbus_object_prop(path, "com.redhat.Cockpit.Storage.Block", "MountPoint", "")

        self.content_default_action(1, "Mount");
        b.wait_in_text("#storage_detail_partition_list", "mounted on /run/media/admin/FILESYSTEM")

        self.content_default_action(1, "Unmount");
        b.wait_in_text("#storage_detail_partition_list", "not mounted")

        self.content_action(1, "Format")
        b.wait_popup("storage_format_dialog")
        b.set_val("#format-type", "empty")
        b.click("#format-format")
        b.wait_popdown("storage_format_dialog")
        b.wait_in_text("#storage_detail_partition_list", "Unrecognized Data")

    def testDosParts(self):
        m = self.machine
        b = self.browser

        # HACK: DOS Extended Partitions are broken on Fedora 21 with
        # no known reasonable workaround.
        #
        # https://bugzilla.redhat.com/show_bug.cgi?id=1135493
        #
        # The thing that seems to be broken is creating other
        # partitions while a extended partition also exists, so we
        # don't do that for now.  A workaround would be to reboot the
        # machine.

        self.login_and_go("storage", href="/storage/devices")

        # Add a disk
        self.add_disk("50M", serial="MYDISK")
        b.wait_in_text("#storage_drives", "MYDISK")
        b.click('tr:contains("MYDISK")')
        b.enter_page("storage-detail")

        # Format it with a DOS partition table
        b.click("#drive_format")
        b.wait_popup("storage_format_disk_dialog")
        b.set_val("#format-disk-type", "dos")
        b.click("#format-disk-format")
        b.wait_popdown("storage_format_disk_dialog")
        b.wait_in_text("#storage_detail_partition_list", "Free Space")

        # Create a primary partition
        self.content_single_action(1, "Create Partition")
        b.wait_popup("storage_format_dialog")
        b.set_val("#format-size", "10")
        b.set_val("#format-type", "ext4")
        b.set_val("#format-name", "FIRST")
        b.click("#format-format")
        b.wait_popdown("storage_format_dialog")
        b.wait_in_text("#storage_detail_partition_list", "FIRST")

        # Open dialog for formatting the primary partition and check that "dos-extended" is not offered.
        self.content_action(1, "Format")
        b.wait_popup("storage_format_dialog")
        self.assertIn("display: none", b.attr("option[value='dos-extended']", "style"))
        b.click("#storage_format_dialog button:contains(Cancel)")
        b.wait_popdown("storage_format_dialog")

        b.wait_in_text("#storage_detail_partition_list", "Free Space for Primary Partitions")

        # Create a extended partition to fill the rest of the disk
        self.content_single_action(2, "Create Partition")
        b.wait_popup("storage_format_dialog")
        self.assertIn("display: inline", b.attr("option[value='dos-extended']", "style"))
        b.set_val("#format-size", "");
        b.set_val("#format-type", "dos-extended")
        b.wait_not_visible("#format-name")
        b.wait_not_visible("#format-mounting")
        b.wait_not_visible("#format-mount-point")
        b.wait_not_visible("#format-mount-options")
        b.click("#format-format")
        b.wait_popdown("storage_format_dialog")
        b.wait_in_text("#storage_detail_partition_list", "Extended Partition")

        b.wait_not_in_text("#storage_detail_partition_list", "Free Space for Primary Partitions")

        # Open dialog for creating logical partitions and check that
        # "dos-extended" is not offered.
        self.content_single_action(3, "Create Partition")
        b.wait_popup("storage_format_dialog")
        self.assertIn("display: none", b.attr("option[value='dos-extended']", "style"))
        b.click("#storage_format_dialog button:contains(Cancel)")
        b.wait_popdown("storage_format_dialog")

    def testLuks(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")

        # Add a disk and partition it
        self.add_disk("50M", serial="MYDISK")
        b.wait_in_text("#storage_drives", "MYDISK")
        b.click('tr:contains("MYDISK")')
        b.enter_page("storage-detail")
        b.click("#drive_format")
        b.wait_popup("storage_format_disk_dialog")
        b.set_val("#format-disk-type", "gpt")
        b.click("#format-disk-format")
        b.wait_popdown("storage_format_disk_dialog")
        b.wait_in_text("#storage_detail_partition_list", "Free Space")

        assert m.execute("cat /etc/crypttab") == ""

        # Format it with luks
        self.content_single_action(1, "Create Partition")
        b.wait_popup("storage_format_dialog")
        b.set_val("#format-size", "10")
        b.set_val("#format-type", "luks+ext4")
        b.set_val("#format-name", "ENCRYPTED")
        b.set_val("#format-passphrase", "maisa-artu-keke-tellu")
        b.set_val("#format-passphrase-2", "maisa-artu-keke-tellu")
        b.set_checked("#format-store-passphrase", True)
        b.set_val("#format-mounting", "custom")
        b.set_val("#format-mount-point", "/secret")
        b.click("#format-format")
        b.wait_popdown("storage_format_dialog")
        with b.wait_timeout(20):
            b.wait_in_text("#storage_detail_partition_list", "LUKS Encrypted")
            b.wait_in_text("#storage_detail_partition_list", "unlocked")
            b.wait_in_text("#storage_detail_partition_list", "ENCRYPTED")

        b.wait_dbus_prop("com.redhat.Cockpit.Storage.Block", "MountPoint", "/secret")
        assert m.execute("grep 'UUID=' /etc/crypttab") != ""
        assert m.execute("grep /secret /etc/fstab") != ""
        assert m.execute("cat /etc/luks-keys/*") == "maisa-artu-keke-tellu"

        # Lock it
        self.content_default_action(1, "Lock")
        b.wait_in_text("#storage_detail_partition_list", "locked")
        b.wait_not_in_text("#storage_detail_partition_list", "ENCRYPTED")

        # Unlock
        self.content_default_action(1, "Unlock")
        b.wait_popup("storage_unlock_dialog")
        b.set_val("#unlock-passphrase", "maisa-artu-keke-tellu")
        b.click("#unlock-unlock")
        b.wait_popdown("storage_unlock_dialog")
        b.wait_in_text("#storage_detail_partition_list", "unlocked")
        b.wait_in_text("#storage_detail_partition_list", "ENCRYPTED")

        # Change options
        self.content_action(1, "Encryption Options")
        b.wait_popup("crypto_options_dialog")
        b.wait_val("#crypto-options-passphrase", "maisa-artu-keke-tellu")
        b.set_val("#crypto-options-passphrase", "wrong-passphrase")
        b.set_val("#crypto-options-options", "weird,options")
        b.click("#crypto-options-apply")
        b.wait_popdown("crypto_options_dialog")

        assert m.execute("grep 'weird,options' /etc/crypttab") != ""
        assert m.execute("cat /etc/luks-keys/*") == "wrong-passphrase"

        # Wait for udisks to pick up the crypttab change...
        m.execute("sleep 1")

        # Delete the partition
        self.content_action(1, "Delete")
        self.confirm()
        b.wait_in_text("#storage_detail_partition_list", "Free Space")
        b.wait_not_in_text("#storage_detail_partition_list", "ENCRYPTED")

        assert m.execute("cat /etc/crypttab") == ""
        assert m.execute("grep /secret /etc/fstab || true") == ""

    def select_disk(self, container, name):
        self.browser.set_checked('#%s .checkbox:contains("%s") input' % (container, name), True)

    def wait_states(self, states):
        # XXX - This is just here to prove that you can embed non-trivial JS here.  It's not a good idea.
        self.browser.wait_js_func("""(function(states) {
          var found = { };
          $('#raid-disks li').each(function (i, e) {
            var cols = $(e).find('td').map(function (i, e) { return $(e).text(); }).get();
            if (cols.length >= 3)
              found[cols[1]] = cols[2];
          });
          for (s in states) {
            if (states[s] != found[s])
              return false;
          }
          return true;
        })""", states)

    def raid_add_disk(self, name):
        b = self.browser
        b.click("#raid-disks-add")
        b.wait_popup("raid_disk_add_dialog")
        self.select_disk("raid-disk-add-drives", name)
        b.click("#raid-disk-add-add")
        b.wait_popdown("raid_disk_add_dialog")

    def raid_remove_disk(self, name):
        self.browser.click('#raid-disks li:contains("%s") button' % name)

    def raid_action(self, action):
        self.browser.click_action_btn ("#raid_action_btn", action)

    def raid_default_action(self, action):
        self.browser.wait_action_btn ("#raid_action_btn", action)
        self.browser.click_action_btn ("#raid_action_btn")

    def testRaid(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")
        b.wait_in_text("#storage_drives", "VirtIO")

        # Add four disks and make a RAID out of three of them
        self.add_disk("50M", serial="DISK1")
        self.add_disk("50M", serial="DISK2")
        self.add_disk("50M", serial="DISK3")
        self.add_disk("50M", serial="DISK4")
        b.wait_in_text("#storage_drives", "DISK1")
        b.wait_in_text("#storage_drives", "DISK2")
        b.wait_in_text("#storage_drives", "DISK3")
        b.wait_in_text("#storage_drives", "DISK4")

        b.click("#storage_create_raid")
        b.wait_popup("create-raid-dialog")
        b.wait_val("#create-raid-level", "raid5")
        b.wait_in_text("#create-raid-summary-drives", "2 more")
        self.select_disk("create-raid-drives", "DISK1")
        b.wait_in_text("#create-raid-summary-drives", "1 more")
        self.select_disk("create-raid-drives", "DISK2")
        self.select_disk("create-raid-drives", "DISK3")
        b.set_val("#create-raid-level", "raid6")
        b.wait_in_text("#create-raid-summary-drives", "1 more")
        b.set_val("#create-raid-level", "raid5")
        b.wait_in_text("#create-raid-summary-drives", "3 disks")
        b.set_val("#create-raid-name", "ARR")
        b.click("#create-raid-create")
        b.wait_popdown("create-raid-dialog")
        b.wait_in_text("#storage_raids", "ARR")

        b.click('tr:contains("ARR")')
        b.enter_page("storage-detail")

        # The array might resync, so let's give it some extra time
        with b.wait_timeout(20):
            b.wait_in_text("#raid_detail_state", "Running")

        self.wait_states({ "QEMU QEMU HARDDISK (DISK1)": "In Sync",
                           "QEMU QEMU HARDDISK (DISK2)": "In Sync",
                           "QEMU QEMU HARDDISK (DISK3)": "In Sync" })

        # Degrade and repair it
        dev = b.text("#raid_detail_device")
        m.execute("mdadm %s --fail /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1 --remove /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1" % dev)
        b.wait_in_text("#raid_detail_state", "DEGRADED")
        m.execute("wipefs -a /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1")
        m.execute("mdadm %s --add /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1" % dev)
        b.wait_in_text("#raid_detail_state", "Recovering")
        with b.wait_timeout(20):
            b.wait_in_text("#raid_detail_state", "Running")

        # Turn it off and on again
        self.raid_default_action("Stop")
        b.wait_in_text("#raid_detail_state", "Not running")
        self.raid_default_action("Start")
        b.wait_in_text("#raid_detail_state", "Running")
        b.wait_text_not("#raid_detail_device", "--")

        # Create partition table
        self.raid_action("Format")
        b.wait_popup("storage_format_disk_dialog")
        b.set_val("#format-disk-type", "gpt")
        b.click("#format-disk-format")
        b.wait_popdown("storage_format_disk_dialog")
        b.wait_in_text("#storage_detail_partition_list", "Free Space")

        # Create first partition
        self.content_single_action(1, "Create Partition")
        b.wait_popup("storage_format_dialog")
        b.set_val("#format-size", "20")
        b.set_val("#format-type", "ext4")
        b.set_val("#format-name", "One")
        b.click("#format-format")
        b.wait_popdown("storage_format_dialog")
        b.wait_in_text("#storage_detail_partition_list", "One")

        # Create second partition
        self.content_single_action(2, "Create Partition")
        b.wait_popup("storage_format_dialog")
        b.set_val("#format-size", "")
        b.set_val("#format-type", "ext4")
        b.set_val("#format-name", "Two")
        b.click("#format-format")
        b.wait_popdown("storage_format_dialog")
        b.wait_in_text("#storage_detail_partition_list", "Two")
        b.wait_not_in_text("#storage_detail_partition_list", "Free Space")

        # Delete first partition
        self.content_action(1, "Delete")
        self.confirm()
        b.wait_in_text("#storage_detail_partition_list", "Free Space")
        b.wait_not_in_text("#storage_detail_partition_list", "One")

        # Play with disks

        # Add a spare
        self.raid_add_disk("DISK4")
        self.wait_states({ "QEMU QEMU HARDDISK (DISK4)": "Spare" })

        # Remove DISK1.  The spare takes over.
        self.raid_remove_disk("DISK1")
        with b.wait_timeout(20):
            b.wait_in_text("#raid_detail_state", "Running")
            self.wait_states({ "QEMU QEMU HARDDISK (DISK4)": "In Sync" })

        # Remove DISK4.  The array degrades.
        self.raid_remove_disk("DISK4")
        b.wait_in_text("#raid_detail_state", "DEGRADED")

        # Add DISK1.  The array recovers.
        self.raid_add_disk("DISK1")
        with b.wait_timeout(20):
            b.wait_in_text("#raid_detail_state", "Running")

        # Stop the array, destroy a disk, and start the array
        self.raid_default_action("Stop")
        b.wait_in_text("#raid_detail_state", "Not running")
        m.execute("wipefs -a /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1")
        m.execute("udevadm settle")
        self.raid_default_action("Start")
        b.wait_in_text("#raid_detail_state", "DEGRADED")
        b.wait_not_in_text("#raid_detail_state", "Recovering")
        b.wait_visible("#raid-disks")

        # Add DISK1.  The array recovers.
        self.raid_add_disk("DISK1")
        with b.wait_timeout(20):
            b.wait_in_text("#raid_detail_state", "Running")

        # Delete the array.  We are back on the storage page.
        self.raid_action("Delete")
        self.confirm()
        with b.wait_timeout(120):
	        b.enter_page("storage")
	       	b.wait_not_in_text ("#storage_raids", "ARR")

    def testJobs(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")
        b.wait_in_text("#storage_drives", "VirtIO")

        # Add a slow disk and format it
        self.add_disk("10M", serial="SLOW", speed=800)
        b.wait_in_text("#storage_drives", "SLOW")

        b.click('tr:contains("SLOW")')
        b.enter_page("storage-detail")

        # Format it
        self.content_default_action(1, "Format")
        b.wait_popup("storage_format_dialog")
        b.set_val("#format-erase", "zero")
        b.set_val("#format-type", "ext4")
        b.set_val("#format-name", "FILESYSTEM");
        b.set_val("#format-mounting", "custom")
        b.set_val("#format-mount-point", "/foo");
        b.click("#format-format")
        b.wait_popdown("storage_format_dialog")

        with b.wait_timeout(120):
            b.wait_visible("#storage-detail-jobs")
            b.wait_in_text("#storage-detail-jobs", "Erasing")
            b.wait_not_visible("#storage-detail-jobs")
            b.wait_in_text("#storage_detail_partition_list", "FILESYSTEM")

    def testLvm(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")
        b.wait_in_text("#storage_drives", "VirtIO")

        self.add_disk("50M", serial="DISK1")
        self.add_disk("50M", serial="DISK2")
        self.add_disk("50M", serial="DISK3")
        b.wait_in_text("#storage_drives", "DISK1")
        b.wait_in_text("#storage_drives", "DISK2")
        b.wait_in_text("#storage_drives", "DISK3")

        # Create volume group out of two disks
        m.execute("vgcreate TEST1 /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1 /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK2")
        b.wait_in_text("#storage_vgs", "TEST1")
        b.click('tr:contains("TEST1")')
        b.enter_page("storage-detail")
        b.wait_in_text("#vg-physical-volumes", "DISK1")
        b.wait_in_text("#vg-physical-volumes", "DISK2")

        # Create two logical volumes
        m.execute("lvcreate TEST1 -n one -L 20m")
        b.wait_in_text("#storage_detail_content", "Logical Volume \"one\"")
        m.execute("lvcreate TEST1 -n two -L 20m")
        b.wait_in_text("#storage_detail_content", "Logical Volume \"two\"")

        # Deactivate one
        m.execute("lvchange TEST1/one -a n")
        b.wait_in_text("#storage_detail_content", "(inactive)")

        # and remove it
        m.execute("lvremove TEST1/one")
        b.wait_not_in_text("#storage_detail_content", "Logical Volume \"one\"")

        # remove a disk from the volume group
        m.execute("pvmove /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK2 || true")
        m.execute("vgreduce TEST1 /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK2")
        b.wait_not_in_text("#vg-physical-volumes", "DISK2")

        # Thin volumes
        m.execute("lvcreate TEST1 --thinpool pool -L 20m")
        b.wait_in_text("#storage_detail_content", "Pool for Thin Logical Volumes \"pool\"")
        m.execute("lvcreate -T TEST1/pool -n thin -V 100m")
        b.wait_in_text("#storage_detail_content", "Thin Logical Volume \"thin\"")
        m.execute("dd if=/dev/urandom of=/dev/mapper/TEST1-thin bs=1M count=10")
        b.wait_in_text("#storage_detail_content", "50% full")
        m.execute("lvremove -f TEST1/thin")
        b.wait_in_text("#storage_detail_content", "1% full")

        # remove the volume group
        b.go("storage")
        m.execute("vgremove -f TEST1")
        b.wait_not_in_text("#storage_vgs", "TEST1")

        # Explicitly wipe the disks and force LVM to see that.
        # Otherwise, storaged will do the wipe but lvmetad will miss
        # it and the subsequent vgcreate will not put the correct
        # signature on the disk, maybe because it thinks that it is
        # already there.
        #
        # Newer versions of storaged also work around this bug, and once that
        # workaround is in place, we can remove it here.
        #
        # https://bugzilla.redhat.com/show_bug.cgi?id=1063813

        def wipe_for_lvm(serial):
            dev = "/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_%s" % serial
            m.execute ("wipefs -a %s; pvscan --cache %s" % (dev, dev))

        wipe_for_lvm("DISK1")
        wipe_for_lvm("DISK2")
        wipe_for_lvm("DISK3")

        # wait for the disks to be free
        def wait_free(serial):
            block = self.get_block_object(serial)
            b.wait_dbus_object_prop (block, "com.redhat.Cockpit.Storage.Block", "PvGroup", "/")

        wait_free("DISK1")
        wait_free("DISK2")
        wait_free("DISK3")

        # create volume group in the UI
        b.click('#storage_create_volume_group')
        b.wait_popup('create-volume-group-dialog')
        b.set_val('#create-vg-name', "TEST2");
        self.select_disk('create-vg-drives', "DISK1")
        self.select_disk('create-vg-drives', "DISK2")
        b.click('#create-vg-create')
        b.wait_popdown('create-volume-group-dialog')
        b.wait_in_text("#storage_vgs", "TEST2")
        b.click('tr:contains("TEST2")')

        # create a logical volume
        self.content_default_action(1, "Create Plain Logical Volume")
        b.wait_popup('storage_create_plain_volume_dialog')
        b.set_val('#create-pvol-name', "one")
        b.set_val('#create-pvol-size', "20")
        b.click('#create-pvol-create')
        b.wait_popdown('storage_create_plain_volume_dialog')
        b.wait_in_text("#storage_detail_content", "Logical Volume \"one\"")

        # format and mount it
        self.content_default_action(1, "Format")
        b.wait_popup('storage_format_dialog')
        b.set_val('#format-type', "ext4")
        b.set_val("#format-mounting", "custom")
        b.set_val('#format-mount-point', "/one");
        b.click('#format-format')
        b.wait_popdown('storage_format_dialog')
        b.wait_in_text("#storage_detail_content", "(ext4 File System)")
        b.wait_dbus_prop("com.redhat.Cockpit.Storage.Block", "MountPoint", "/one")
        self.content_default_action(1, "Mount")
        b.wait_in_text("#storage_detail_content", "mounted on /one")

        # unmount it
        self.content_default_action(1, "Unmount")
        b.wait_in_text("#storage_detail_content", "not mounted")

        # delete it
        self.content_action(1, "Delete")
        self.confirm()
        b.wait_not_in_text("#storage_detail_content", "Logical Volume \"one\"")
        check_eq(m.execute("grep /one /etc/fstab || true"), "")

        # remove disk
        m.execute("pvmove /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK2 || true")
        b.wait_action_btn('#vg-physical-volumes li:nth-child(2) .btn-group', "Remove")
        b.click_action_btn('#vg-physical-volumes li:nth-child(2) .btn-group')
        b.wait_not_in_text("#vg-physical-volumes", "DISK2")

        # create thin pool and volume
        self.content_action(1, "Create Pool for Thin Logical Volumes")
        b.wait_popup('storage_create_thin_pool_dialog')
        b.set_val('#create-tpool-name', "pool")
        b.set_val('#create-tpool-size', "20")
        b.click('#create-tpool-create')
        b.wait_popdown('storage_create_thin_pool_dialog')
        b.wait_in_text('#storage_detail_content', "Pool for Thin Logical Volumes \"pool\"")

        self.content_default_action(1, "Create Thin Volume")
        b.wait_popup('storage_create_thin_volume_dialog')
        b.set_val('#create-tvol-name', "thin")
        b.set_val('#create-tvol-size', "80")
        b.click('#create-tvol-create')
        b.wait_popdown('storage_create_thin_volume_dialog')
        b.wait_in_text('#storage_detail_content', "Thin Logical Volume \"thin\"")

        # cause the pool to overflow by erasing the thin volume
        self.content_default_action(2, "Format")
        b.wait_popup('storage_format_dialog')
        b.set_val('#format-erase', "zero")
        b.set_val('#format-type', "ext4")
        b.set_val("#format-mounting", "custom")
        b.set_val('#format-mount-point', "/thin");
        b.click('#format-format')
        with b.wait_timeout(20):
            b.wait_in_text('#storage_detail_content', "100% full")

        # add a disk, resize the pool and let the operation finish
        b.click('#vg-pv-add')
        b.wait_popup('vg_disk_add_dialog')
        self.select_disk('vg-disk-add-drives', "DISK2")
        b.click('#vg-disk-add-add')
        b.wait_popdown('vg_disk_add_dialog')
        b.wait_in_text("#vg-physical-volumes", "DISK2")

        self.content_action(1, "Resize")
        b.wait_popup('storage_resize_volume_dialog')
        b.set_val('#resize-lvol-size', "80")
        b.click('#resize-lvol-resize')
        b.wait_popdown('storage_resize_volume_dialog')
        with b.wait_timeout(40):
            b.wait_in_text("#storage_detail_content", "(ext4 File System)")
        b.wait_dbus_prop("com.redhat.Cockpit.Storage.Block", "MountPoint", "/thin")

        # remove volume group
        b.click_action_btn('#vg_action_btn', "Delete")
        self.confirm()
        b.enter_page("storage")
        check_eq(m.execute("grep /thin /etc/fstab || true"), "")

    def testResize(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")
        b.wait_in_text("#storage_drives", "VirtIO")
        self.add_disk("50M", serial="DISK1")

        m.execute("vgcreate TEST /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1")
        m.execute("lvcreate TEST -n vol -L 20m")
        m.execute("mkfs.ext4 -L FSYS /dev/TEST/vol")

        b.wait_in_text("#storage_vgs", "TEST")
        b.click('tr:contains("TEST")')
        b.enter_page("storage-detail")
        b.wait_in_text("#storage_detail_partition_list", "FSYS")

        self.content_action(1, "Mount")
        b.wait_in_text("#storage_detail_partition_list", "/run/media/admin/FSYS")

        self.content_action(1, "Resize")
        b.wait_popup("storage_resize_volume_dialog")
        b.set_val("#resize-lvol-size", "40")
        b.click("#resize-lvol-resize")
        b.wait_popdown("storage_resize_volume_dialog")

        size = int(m.execute("df -k --output=size /run/media/admin/FSYS | tail -1").strip())
        assert (size > 30000)

        self.content_action(1, "Resize")
        b.wait_popup("storage_resize_volume_dialog")
        b.set_val("#resize-lvol-size", "20")
        b.click("#resize-lvol-resize")
        b.wait_popdown("storage_resize_volume_dialog")

        # Shrinking a filesystem will unmount it
        self.content_action(1, "Mount")
        b.wait_in_text("#storage_detail_partition_list", "/run/media/admin/FSYS")

        size = int(m.execute("df -k --output=size /run/media/admin/FSYS | tail -1").strip())
        assert (size < 30000)

    def testUsed(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")
        b.wait_in_text("#storage_drives", "VirtIO")

        self.add_disk("50M", serial="DISK1")
        b.wait_in_text("#storage_drives", "DISK1")
        m.execute("parted -s /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1 mktable msdos")
        m.execute("parted -s /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1 mkpart primary ext2 0 25")
        m.execute("udevadm settle")
        m.execute("echo einszweidrei | cryptsetup luksFormat /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1-part1")
        m.execute("echo einszweidrei | cryptsetup luksOpen /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1-part1 dm-test")
        m.execute("udevadm settle")
        m.execute("mke2fs -L TEST /dev/mapper/dm-test")
        m.execute("mount /dev/mapper/dm-test /mnt")

        # Now all of /dev/mapper/dm-test, /dev/sda1, and /dev/sda should be 'in use'.

        b.click('tr:contains("DISK1")')
        b.enter_page("storage-detail")
        b.wait_in_text("#storage_detail_content", "/mnt")

        self.content_action(2, "Format")
        b.wait_popup("storage_format_dialog")
        b.click("#format-format")
        b.wait_popdown("storage_format_dialog")
        b.wait_popup("error-popup")
        b.wait_in_text("#error-popup-message", "is in use: mounted at")
        b.click("#error-popup button")
        b.wait_popdown("error-popup")

        self.content_action(1, "Delete")
        self.confirm()
        b.wait_popup("error-popup")
        b.wait_in_text("#error-popup-message", "is in use: mounted at")
        b.click("#error-popup button")
        b.wait_popdown("error-popup")

        b.click('#drive_format')
        b.wait_popup("storage_format_disk_dialog")
        b.click("#format-disk-format")
        b.wait_popdown("storage_format_disk_dialog")
        b.wait_popup("error-popup")
        b.wait_in_text("#error-popup-message", "is in use: mounted at")
        b.click("#error-popup button")
        b.wait_popdown("error-popup")

        # Unmount and format the disk.

        m.execute("umount /mnt")
        b.wait_in_text("#storage_detail_content", "not mounted")

        b.click('#drive_format')
        b.wait_popup("storage_format_disk_dialog")
        b.click("#format-disk-format")
        b.wait_popdown("storage_format_disk_dialog")

        b.wait_in_text("#storage_detail_content", "50.0 MB Free Space")

    def testHidden(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")

        self.add_disk("50M", serial="DISK1")
        b.wait_in_text("#storage_drives", "DISK1")

        # Create a volume group with a logical volume with a encrypted
        # filesystem.

        m.execute("vgcreate TEST /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1")
        m.execute("lvcreate TEST -n lvol -L 48")
        m.execute("echo einszweidrei | cryptsetup luksFormat /dev/TEST/lvol")
        m.execute("echo einszweidrei | cryptsetup luksOpen /dev/TEST/lvol dm-test")
        m.execute("udevadm settle")
        m.execute("mke2fs -L FS /dev/mapper/dm-test")
        m.execute("echo '/dev/mapper/dm-test /mount ext4 defaults 0 0' >>/etc/fstab")
        b.wait_dbus_prop("com.redhat.Cockpit.Storage.Block", "MountPoint", "/mount")

        # Now doubly hide /dev/mapper/dm-test by locking dm-test and deactivating /dev/TEST/lvol
        m.execute("cryptsetup luksClose dm-test")
        m.execute("lvchange TEST/lvol -a n")

        # Restart cockpitd by logging in again
        self.allow_restart_journal_messages()
        b.relogin('storage')

        # Delete the volume group and check that fstab has been cleaned up
        b.wait_in_text("#storage_vgs", "TEST")
        b.click('tr:contains("TEST")')
        b.click_action_btn('#vg_action_btn', "Delete")
        self.confirm()
        b.enter_page("storage")
        check_eq(m.execute("grep /mount /etc/fstab || true"), "")

    def testUnused(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")
        b.wait_in_text("#storage_drives", "VirtIO")

        # The following block devices should not be offered for creating a
        # raid
        #
        # - filesystems
        # - extended partition containers
        # - partition tables
        #
        # So we partition a disk with two logical partitions, one of which
        # has a filesystem on it.

        self.add_disk("50M", "DISK1")
        self.add_disk("50M", "DISK2")
        b.wait_in_text("#storage_drives", "DISK1")
        b.wait_in_text("#storage_drives", "DISK2")
        m.execute("parted /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1 mktable msdos")
        m.execute("parted /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1 mkpart extended 0 50")
        m.execute("parted /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1 mkpart logical ext2 1 25")
        m.execute("parted /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1 mkpart logical ext2 25 50")
        m.execute("udevadm settle")
        m.execute("mke2fs -L TEST /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1-part5")
        b.wait_dbus_prop("com.redhat.Cockpit.Storage.Block", "IdLabel", "TEST")

        b.click('#storage_create_raid')
        b.wait_popup('create-raid-dialog')

        b.eval_js("""
    ph_texts = function (sel) {
      return $(sel).map(function (i, e) { return $(e).text(); }).get();
    }
    """)

        blocks = b.eval_js ("return ph_texts('#create-raid-drives .checkbox')")
        check_eq (len(blocks), 2);
        check_in (blocks[0], "/dev/sda6");
        check_in (blocks[1], "/dev/sdb");

    def testIgnored(self):
        m = self.machine
        b = self.browser

        self.login_and_go("storage", href="/storage/devices")
        b.wait_in_text("#storage_drives", "VirtIO")

        self.add_disk("50M", "DISK1")
        m.execute("mke2fs -L TEST /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1")
        b.wait_in_text("#storage_drives", "DISK1")
        b.wait_in_text("#storage_mounts", "TEST")

        # Hide it via a udev rule

        m.write("/etc/udev/rules.d/99-ignore.rules",
                'SUBSYSTEM=="block", ENV{ID_SERIAL_SHORT}=="DISK1", ENV{UDISKS_IGNORE}="1"\n')

        # XXX - One trigger doesn't seem to be enough so we loop until
        #       UDisks2 picks up the change.

        def is_ignored():
            m.execute("udevadm trigger")
            text = m.execute("gdbus introspect -y -d org.freedesktop.UDisks2 -o /org/freedesktop/UDisks2/block_devices/sda | grep HintIgnore")
            return "true" in text

        wait(is_ignored)

        b.wait_not_in_text("#storage_mounts", "TEST")

test_main()
