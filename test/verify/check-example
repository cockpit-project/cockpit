#!/usr/bin/env python3

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import time
import unittest

import parent  # noqa: F401
from testlib import MachineCase, nondestructive, skipDistroPackage, skipPackage, test_main
from fmf_metadata import FMF


@FMF.tag("example")
@skipPackage("example")
@skipDistroPackage()
class TestExample(MachineCase):

    @unittest.expectedFailure
    def testExpectedFail(self):
        self.login_and_go("/system")
        self.assertFalse(True)

    def testFail(self):
        self.login_and_go("/system")
        if os.environ.get('TEST_FAILURES'):
            self.assertFalse(True)

    @unittest.skip
    def testSkip(self):
        self.login_and_go("/system")
        self.assertFalse(True)

    def testRaiseSkip(self):
        raise unittest.SkipTest("dynamic skip")

    @nondestructive
    def testNondestructive(self):
        self.login_and_go("/system")

    def testBasic(self):
        self.login_and_go("/system")


@FMF.tag("example")
@nondestructive
@skipDistroPackage()
class TestNondestructiveExample(MachineCase):

    def testOne(self):
        self.assertEqual(self.machine.execute("whoami").strip(), "root")

    def testTwo(self):
        self.assertIn("usr", self.machine.execute("ls -l /").strip())


@FMF.tag("example")
@skipDistroPackage()
class TestSimple(unittest.TestCase):

    def testOne(self):
        for i in range(0, 10):
            time.sleep(0.100)
            if i % 2:
                sys.stderr.write(">1%i\n" % i)
            else:
                print(">2", i)
        self.assertTrue(True)

    @unittest.expectedFailure
    def testTwo(self):
        self.assertFalse(True)

    def testThree(self):
        self.assertTrue(True)


if __name__ == '__main__':
    test_main()
