<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

  <!--
  This file is part of Cockpit.

  Copyright (C) 2013 Red Hat, Inc.

  Cockpit is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 2.1 of the License, or
  (at your option) any later version.

  Cockpit is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with Cockpit; If not, see <http://www.gnu.org/licenses/>.
  -->

  <!-- ********************************************************************** -->

  <!--
      com.redhat.Cockpit.Machines:
      @short_description: For managing information about known machines.

      Interface for <literal>/com/redhat/Cockpit/Machines</literal>.
  -->
  <interface name="com.redhat.Cockpit.Machines">
    <method name="Add">
      <arg name="address" type="s" direction="in"/>
      <arg name="host_key" type="s" direction="in"/>
      <arg name="path" type="o" direction="out"/>
    </method>
  </interface>

  <!--
      com.redhat.Cockpit.Machine:
      @short_description: Information about a machine

      Interface for objects located at <literal>/com/redhat/Cockpit/Machines/</literal>.
  -->
  <interface name="com.redhat.Cockpit.Machine">
    <property name="Address" type="s" access="read"/>
    <property name="Tags" type="as" access="read"/>
    <property name="Color" type="s" access="read"/>
    <property name="Name" type="s" access="read"/>
    <property name="Avatar" type="s" access="read"/>
    <method name="AddTag">
      <arg name="tag" type="s" direction="in"/>
    </method>
    <method name="RemoveTag">
      <arg name="tag" type="s" direction="in"/>
    </method>
    <method name="SetColor">
      <arg name="color" type="s" direction="in"/>
    </method>
    <method name="SetName">
      <arg name="name" type="s" direction="in"/>
    </method>
    <method name="SetAvatar">
      <arg name="avatar" type="s" direction="in"/>
    </method>
  </interface>

  <!-- ********************************************************************** -->

  <!--
      com.redhat.Cockpit.Manager:
      @short_description: Manager singleton

      Interface for top-level manager singleton object located at the
      object path <literal>/com/redhat/Cockpit/Manager</literal>.
  -->
  <interface name="com.redhat.Cockpit.Manager">
    <!-- Version: The version of the cockpitd instance currently running  -->
    <property name="Version" type="s" access="read"/>

    <!-- OperatingSystem: Human-readable string identifying the OS and version -->
    <property name="OperatingSystem" type="s" access="read"/>

    <!-- System: Human-readable description of the system, typically including make and model of the machine  -->
    <property name="System" type="s" access="read"/>

    <!-- SystemSerial: Serial number of the system  -->
    <property name="SystemSerial" type="s" access="read"/>

    <!-- BIOS: Human-readable string describing the BIOS of the system  -->
    <property name="BIOS" type="s" access="read"/>

    <!-- Hostname: The transient host name, see <ulink url="http://www.freedesktop.org/wiki/Software/systemd/hostnamed">systemd-hostnamed</ulink> for details -->
    <property name="Hostname" type="s" access="read"/>

    <!-- StaticHostname: The statically configured host name, see <ulink url="http://www.freedesktop.org/wiki/Software/systemd/hostnamed">systemd-hostnamed</ulink> for details -->
    <property name="StaticHostname" type="s" access="read"/>

    <!-- PrettyHostname: The pretty host name, see <ulink url="http://www.freedesktop.org/wiki/Software/systemd/hostnamed">systemd-hostnamed</ulink> for details -->
    <property name="PrettyHostname" type="s" access="read"/>

    <!--
        SetHostname:
        @pretty_hostname: Pretty Host Name to set
        @static_hostname: Regular host name to set
        @options: Currently unused.

        Sets the host names.
    -->
    <method name="SetHostname">
      <arg name="pretty_hostname" type="s" direction="in"/>
      <arg name="static_hostname" type="s" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
    </method>

    <!--
	Shutdown:
        Initiate a shutdown or restart of the system.

	@kind: What to do, either "shutdown" or "restart".
	@when: When to shutdown, either "HH:MM" or "+MINUTES", as for the "shutdown" command.
	@message: The wall message to display.
    -->
    <method name="Shutdown">
      <arg name="kind" type="s" direction="in"/>
      <arg name="when" type="s" direction="in"/>
      <arg name="message" type="s" direction="in"/>
    </method>

    <!--
        CancelShutdown:
	Cancel the currently scheduled shutdown.
    -->
    <method name="CancelShutdown">
    </method>

    <!--
        ShutdownSchedule:

	A dict with details about the currently scheduled schutdown.
	"kind" and "message" come directly from the last call to
	"Shutdown".  The time of the shutdown is indicated by
	"when_seconds", which is the number of seconds since
	1970-01-01 00:00:00 UTC as a double.
    -->
    <property name="ShutdownSchedule" type="a{sv}" access="read"/>

    <!--
        GetServerTime:
        Return the current time on the server.

        @now: Seconds since 1970-01-01 00:00:00 UTC.
	@tz_abbrev: Abbreviation for the server time zone.
	@tz_offset: Offset from UTC of the server time zone, in
	  seconds.  Positive is east, negative is west.
    -->
    <method name="GetServerTime">
      <arg name="now_seconds" type="d" direction="out"/>
      <arg name="tz_abbrev" type="s" direction="out"/>
      <arg name="tz_offset_seconds" type="d" direction="out"/>
    </method>

    <!--
        ServerTimeUpdate:
        A signal that is emitted when the server time has been adjusted.

        It is also emitted when the time zone changes, either
        explicitly or when daylight savings time is changes.
    -->
    <signal name="ServerTimeUpdate">
      <arg name="now_seconds" type="d" direction="out"/>
      <arg name="tz_abbrev" type="s" direction="out"/>
      <arg name="tz_offset_seconds" type="d" direction="out"/>
    </signal>

  </interface>

  <!--
      com.redhat.Cockpit.ResourceMonitor:
      @short_description: Resource Monitor

      Used to convery resources.
  -->
  <interface name="com.redhat.Cockpit.ResourceMonitor">

    <property name="NumSamples" type="u" access="read"/>
    <property name="NumSeries" type="u" access="read"/>

    <!-- Legends:
         The legend to use for each series.

         This array is #com.redhat.Cockpit.ResourceMonitor:NumSeries long.
    -->
    <property name="Legends" type="as" access="read"/>

    <!--
        GetSamples:
        @options: Currently unused.
        @samples: The samples currently collected.

        Returns (up to) #com.redhat.Cockpit.ResourceMonitor:NumSamples
        historical samples, returning the oldest ones first.
    -->
    <method name="GetSamples">
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="samples" type="a(xad)" direction="out"/>
    </method>

    <!--
        NewSample:
        @timestamp: The point in time the sample was captured (micro-seconds since Epoch).
        @values: An array of values.

        Signal emitted when a new sample has been collected.
    -->
    <signal name="NewSample">
      <arg name="timestamp" type="x"/>
      <arg name="values" type="ad"/>
    </signal>
  </interface>

  <!--
      com.redhat.Cockpit.MultiResourceMonitor:

      @short_description: Monitor for a dynamic set of consumers, such
      as all individual cgroups in a hierarchy.
  -->
  <interface name="com.redhat.Cockpit.MultiResourceMonitor">

    <property name="NumSamples" type="u" access="read"/>
    <property name="NumSeries" type="u" access="read"/>
    <property name="Consumers" type="as" access="read"/>

    <!-- Legends:
         The legend to use for each series.

         This array is #com.redhat.Cockpit.MultiResourceMonitor:NumSeries long.
    -->
    <property name="Legends" type="as" access="read"/>

    <!--
        GetSamples:
        @samples: The samples currently collected.

        Returns (up to) #com.redhat.Cockpit.MultiResourceMonitor:NumSamples
        historical samples, returning the oldest ones first.
    -->
    <method name="GetSamples">
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="samples" type="a(xa{sad})" direction="out"/>
    </method>

    <!--
        NewSample:
        @timestamp: The point in time the sample was captured (micro-seconds since Epoch).
        @values: A dict with (consumer, array of values) pairs.

        Signal emitted when a new sample has been collected.
    -->
    <signal name="NewSample">
      <arg name="timestamp" type="x"/>
      <arg name="values" type="a{sad}"/>
    </signal>
  </interface>

  <interface name="com.redhat.Cockpit.Services">
    <method name="ListServices">
      <!-- (name,description,load_state,active_state,sub_state,file_state) -->
      <arg name="services" type="a(ssssss)" direction="out"/>
    </method>

    <signal name="ServiceUpdate">
      <arg name="service" type="(ssssss)" direction="out"/>
    </signal>

    <signal name="ServiceUpdateAll">
    </signal>

    <method name="GetServiceInfo">
      <arg name="name" type="s" direction="in"/>
      <arg name="info" type="a{sv}" direction="out"/>
    </method>

    <method name="ServiceAction">
      <arg name="name" type="s" direction="in"/>
      <arg name="action" type="s" direction="in"/>
    </method>

  </interface>

</node>
