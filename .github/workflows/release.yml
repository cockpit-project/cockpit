name: release
on:
  push:
    tags:
      # this is a glob, not a regexp
      - '[0-9]*'


jobs:
  source:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cockpit-project/unit-tests
      options: --user root
    permissions:
      # create GitHub release
      contents: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Workaround for https://github.com/actions/checkout/pull/697
        run: git fetch --force origin $(git describe --tags):refs/tags/$(git describe --tags)

      - name: Get version number
        run: git describe | tee version

      - name: Extract tag body
        run: git tag --points-at "${GITHUB_REF}" --format '%(contents:body)' | grep . | tee release-body

      - name: Bootstrap automake
        run: ./autogen.sh

      - name: Build release
        run: make dist -j$(nproc)

      - name: Note source archive name
        run: basename "$(make dump-dist)" | tee source-filename

      - id: publish
        name: Publish release
        uses: actions/github-script@v4
        with:
          script: |
            const fs = require('fs');
            const version = fs.readFileSync('version', {encoding: 'ascii'}).trim();
            const source_filename = fs.readFileSync('source-filename', {encoding: 'ascii'}).trim();
            const release_body = fs.readFileSync('release-body', {encoding: 'utf-8'});

            const source = fs.readFileSync(source_filename);

            const release = await github.repos.createRelease({
                owner: context.repo.owner, repo: context.repo.repo,
                tag_name: version, name: version, body: release_body, draft: true
                });

            /* We get a lot of connection reset errors... */
            for (let retry = 0; retry < 5; retry++) {
                try {
                    const upload = await github.repos.uploadReleaseAsset({
                        owner: context.repo.owner, repo: context.repo.repo, release_id: release.data.id,
                        name: source_filename, headers: {'Content-Type': 'application/x-xz'}, data: source});
                    break;
                } catch (error) {
                    console.log(`Failed to upload (status ${error.status})`);
                    if (error.status != 500) {
                        throw error;
                    }
                }
            }

            const update = await github.repos.updateRelease({
              owner: context.repo.owner, repo: context.repo.repo, release_id: release.data.id,
              draft: false});

            core.setOutput('checksum', require('crypto').createHash('sha256').update(source).digest('hex'));
            core.setOutput('download', update.data.assets[0].browser_download_url);
            core.setOutput('filename', source_filename);
            core.setOutput('version', version);

    outputs:
      checksum: ${{ steps.publish.outputs.checksum }}
      download: ${{ steps.publish.outputs.download }}
      filename: ${{ steps.publish.outputs.filename }}
      version: ${{ steps.publish.outputs.version }}


  guide:
    needs: source
    environment: website
    permissions: {}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cockpit-project/unit-tests
      options: --user root
    steps:
      - name: Checkout website repository
        uses: actions/checkout@v3
        with:
          path: website
          repository: cockpit-project/cockpit-project.github.io
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Download source release
        run: curl -L -o '${{ needs.source.outputs.filename }}' '${{ needs.source.outputs.download }}'

      - name: Verify checksum
        run: echo '${{ needs.source.outputs.checksum }} ${{ needs.source.outputs.filename }}' | sha256sum -c

      - name: Build guide
        run: |
          mkdir source build
          tar --directory source --extract --strip-components=1 --file '${{ needs.source.outputs.filename }}'
          (
              cd build
              ../source/configure
              make doc/guide/html/index.html
          )

      - name: Update the website
        run: |
          rm -rf website/guide/latest
          mv -Tv build/doc/guide/html website/guide/latest

          # Add frontmatter for Jekyll
          find website/guide/latest -name '*.html' -exec sed -i '
          1i\
          ---\
          layout: guide\
          ---' '{}' ';'

          git config --global user.name "GitHub Workflow"
          git config --global user.email "cockpituous@cockpit-project.org"

          cd website
          git add guide/
          git commit --message='Update guide to version ${{ needs.source.outputs.version }}'
          git show --stat
          git push origin main


  flathub:
    needs: source
    environment: flathub
    permissions: {}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v3
        with:
          path: src

      - name: Checkout flathub repository
        uses: actions/checkout@v3
        with:
          path: flathub
          repository: flathub/org.cockpit_project.CockpitClient
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          # this is needed so we can push to a different repository
          fetch-depth: 0

      - name: Update flathub repository
        run: |
          set -x

          DOWNLOAD='${{ needs.source.outputs.download }}'
          CHECKSUM='${{ needs.source.outputs.checksum }}'
          VERSION='${{ needs.source.outputs.version }}'

          git config --global user.name "GitHub Workflow"
          git config --global user.email "cockpituous@cockpit-project.org"

          cd flathub
          git checkout -b "${VERSION}"
          git add "$(../src/containers/flatpak/prepare "${DOWNLOAD}" "${CHECKSUM}")"
          git commit -m "Update to version ${VERSION}"
          git show
          git push git@github.com:cockpit-project/org.cockpit_project.CockpitClient HEAD


  node-cache:
    # doesn't depend on it, but let's make sure the build passes before we do this
    needs: [source]
    runs-on: ubuntu-latest
    environment: node-cache
    # done via deploy key, token needs no write permissions at all
    permissions: {}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up git
        run: |
            git config user.name "GitHub Workflow"
            git config user.email "cockpituous@cockpit-project.org"

      - name: Tag node-cache
        run: |
          set -eux
          # this is a shared repo, prefix with project name
          TAG="${GITHUB_REPOSITORY#*/}-$(basename $GITHUB_REF)"
          tools/node-modules checkout
          cd node_modules
          git tag "$TAG"
          git remote add cache "ssh://git@github.com/${GITHUB_REPOSITORY%/*}/node-cache"
          eval $(ssh-agent)
          ssh-add - <<< '${{ secrets.DEPLOY_KEY }}'
          # make this idempotent: delete an existing tag
          git push cache :"$TAG" || true
          git push cache tag "$TAG"
          ssh-add -D
