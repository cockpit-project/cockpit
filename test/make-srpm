#!/bin/bash
# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

# make-srpm  --  Create a srpm out of a Git repository.
#
# Usage: make-srpm [SPEC] [COMMIT]
#
# SPEC is the spec file template, and will be guessed if omitted.
# COMMIT is the Git commit to use.  When omitted, the current working
# tree is used.

set -e

SELF="make-srpm"

usage()
{
	echo >&2 "usage: $SELF [SPEC] [COMMIT]"
}

args=$(getopt -o "h" -l "help" -- "$@")
eval set -- "$args"
while [ $# -gt 0 ]; do
	case $1 in
	-h|--help)
		usage
		exit 0
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

top=$(git rev-parse --show-toplevel)

git_archive_all=$(dirname "$0")/git-archive-all
if [ ! -x "$git_archive_all" ]; then
  git_archive_all=git-archive-all
fi

if [ $# == 2 ]; then
    spec=$1
    commit=$2
elif [ $# == 1 ]; then
    if [ -f "$1" ]; then
        spec=$1
        commit=""
    else
        spec=""
        commit=$1
    fi
elif [ $# == 0 ]; then
    spec=""
    commit=""
else
    usage
    exit 1
fi

if [ -z "$spec" ]; then
    if [ $(ls -1 "$top"/test/*.spec.in | wc -l) != 1 ]; then
        echo >&2 "Can't guess spec filename, please specify."
        exit 1
    fi
    spec=$(echo "$top"/test/*.spec.in)
fi

NAME=$(grep ^Name: "$spec" | sed 's/^Name:[ \t]*\([^ \t]\+\)[ \t]*/\1/')
if [ -n "$commit" ]; then
    VERSION=$(git describe "$commit" | sed -e 's,-,\.,g' -e 's,^v,,')
else
    VERSION=wip
fi
RELEASE=1%{?dist}

# First make a .tar.gz with all the files tracked by Git

PREFIX=${NAME}-${VERSION}
TARBALL_NAME=${PREFIX}.tar.gz

rpm_tmpdir=$(mktemp -d -t rpmbuild.XXXXXX)

if [ -z "$commit" ]; then
    files=$rpm_tmpdir/FILES
    ( cd "$top"
      ( git ls-files
        git submodule foreach --recursive --quiet 'git ls-files | sed "s,^,$path/,"'
       ) >$files
      tar -czf "$rpm_tmpdir/$TARBALL_NAME" --transform "s,^,./$PREFIX/,S" -T $files
    )
else
    "$git_archive_all" ${PREFIX} "$commit" >"$rpm_tmpdir/$TARBALL_NAME"
fi

# Then build a SRPM out of it

sed < "$spec" > "${rpm_tmpdir}/$NAME.spec" \
    -e "s,@TARBALLS_ARE_STUPID\@,${TARBALL_NAME}," \
    -e "s,@VERSION\@,${VERSION}," \
    -e "s,@RELEASE\@,${RELEASE}," \

( cd ${rpm_tmpdir}
  rpmbuild -bs \
      --quiet \
      --define "_sourcedir `pwd`" \
      --define "_specdir `pwd`" \
      --define "_builddir `pwd`" \
      --define "_srcrpmdir `pwd`" \
      --define "_rpmdir `pwd`" \
      --define "_buildrootdir `pwd`/.build" \
      --define "optflags -ggdb3 -O0" \
      $NAME.spec
)

for f in "${rpm_tmpdir}"/*.src.rpm; do
    echo $(basename $f)
    mv "$f" .
done

if test -z "$DEVRPM_SAVE_TEMPS"; then
    rm -rf "${rpm_tmpdir}"
else
    echo >&2 "Temporary files preserved in ${rpm_tmpdir}."
fi
