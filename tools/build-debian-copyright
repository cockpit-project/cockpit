#!/usr/bin/python3
# generate debian/copyright from debian/copyright.template and node_modules
# Author: Martin Pitt <mpitt@debian.org>
#         Allison Karlitskaya <allison.karlitskaya@redhat.com>

import os
import sys
import re
import argparse


license_patterns = {
    # Common patterns
    r'\bMIT\b': ['MIT'],
    r'\bApache License v2.0\b': ['Apache-2.0'],

    # https://github.com/janl/mustache.js/blob/master/LICENSE
    r'\bmustache.js\b': ['MIT'],

    # https://github.com/focus-trap/focus-trap/blob/master/LICENSE
    r'\bfocus-trap\b': ['MIT'],
}

copyright_patterns = {
    # Common patterns
    r'Copyright (.*)$': [r'\1'],
    r'@copyright (.*)$': [r'\1'],
    r'\(c\) (.*)$': [r'\1'],

    # https://github.com/janl/mustache.js/blob/master/LICENSE
    r'\bmustache.js\b': ['2009 Chris Wanstrath (Ruby)',
                         '2010-2014 Jan Lehnardt (JavaScript)',
                         '2010-2015 The mustache.js community'],

    # https://github.com/focus-trap/focus-trap/blob/master/LICENSE
    r'\bfocus-trap\b': ['2015-2016 David Clark'],

    # No copyright notices found
    r'\bDatepicker for Bootstrap\b': ['boostrap-datepicker authors'],
}

used_patterns = set()

debian_dir = os.path.join(os.path.dirname(__file__), 'debian')
template_file = os.path.join(debian_dir, 'copyright.template')


def parse_args():
    p = argparse.ArgumentParser(description='Generate debian/copyright file from template and node_modules')
    return p.parse_args()


def template_licenses(template):
    '''Return set of existing License: short names'''

    ids = set()
    for line in template.splitlines():
        if line.startswith('License:'):
            ids.add(line.split(None, 1)[1].lower())
    return ids


def find_patterns(patterns, text):
    results = set()

    for pattern, templates in patterns.items():
        for match in re.finditer(pattern, text, re.MULTILINE):
            used_patterns.add(pattern)
            results.update(match.expand(template) for template in templates)

    return sorted(results)

#
# main
#


args = parse_args()

with open(template_file, encoding='UTF-8') as f:
    template = f.read()

license_ids = template_licenses(template)

paragraphs = {}

for directory, subdirs, files in os.walk('dist'):
    for file in files:
        if not file.endswith('.LICENSE.txt'):
            continue

        with open(os.path.join(directory, file)) as license_file:
            comments = license_file.read().split('\n\n')

        for comment in comments:
            licenses = find_patterns(license_patterns, comment)
            if len(licenses) != 1:
                raise SystemError('Can not determine license of:\n%s' % comment)
            if licenses[0].lower() not in license_ids:
                raise KeyError('License {licenses[0]} not found in {template_file}')

            copyrights = '\n '.join(find_patterns(copyright_patterns, comment))
            if not copyrights:
                raise SystemError('Did not find any copyrights in:\n%s' % comment)

            paragraph = f'Copyright: {copyrights}\nLicense: {licenses[0]}'

            if paragraph not in paragraphs:
                paragraphs[paragraph] = set()
            paragraphs[paragraph].add(directory)

for pattern in set.union(set(license_patterns), set(copyright_patterns)):
    if pattern not in used_patterns:
        # We'll have no LICENSE.txt files in that dev builds
        # so of course we won't use any of the patterns
        if os.getenv('NODE_ENV') == 'development':
            continue

        sys.exit(f'build-debian-copyright: Unused pattern: {pattern}')

output = []
for paragraph in sorted(paragraphs):
    files = '\n '.join(f'{dir}' for dir in sorted(paragraphs[paragraph]))
    output.append(f'Files: {files}\n{paragraph}')

# force UTF-8 output, even when running in C locale
for line in template.splitlines():
    if '#NPM' in line:
        sys.stdout.buffer.write('\n\n'.join(output).encode('UTF-8'))
    else:
        sys.stdout.buffer.write(line.encode('UTF-8'))
    sys.stdout.buffer.write(b'\n')
