policy_module(cockpitselinux, 1.0.0)

# Common types and requires

require {
	type hi_reserved_port_t;
	type ssh_port_t;
	type user_home_t;
	type unconfined_exec_t;
}

# Handy links:
#
# http://selinuxproject.org/page/ObjectClassesPerms

# -----------------------------------------------------------------
# cockpit-ws local policy

type cockpit_ws_t;
type cockpit_ws_exec_t;
init_daemon_domain(cockpit_ws_t,cockpit_ws_exec_t)

type cockpit_var_lib_t;
files_type(cockpit_var_lib_t)

type cockpit_tmp_t;
files_tmp_file(cockpit_tmp_t)

type cockpit_unit_file_t;
systemd_unit_file(cockpit_unit_file_t)

# cockpit-ws can read from /var/lib/cockpit, but not write to it
read_files_pattern(cockpit_ws_t,cockpit_var_lib_t,cockpit_var_lib_t)
search_dirs_pattern(cockpit_ws_t,cockpit_var_lib_t,cockpit_var_lib_t)

# cockpit-ws can read from /dev/urandom
dev_read_urand(cockpit_ws_t) # for authkey
dev_read_rand(cockpit_ws_t)  # for libssh

# cockpit-ws can read from a reserved port
allow cockpit_ws_t hi_reserved_port_t:tcp_socket name_bind;
allow cockpit_ws_t self:capability net_admin;
allow cockpit_ws_t self:tcp_socket accept;
corenet_tcp_bind_all_unreserved_ports(cockpit_ws_t)

# cockpit-ws can execute cockpit-session
exec_files_pattern(cockpit_ws_t,bin_t,cockpit_session_exec_t)
allow cockpit_ws_t cockpit_session_t:process signal;
domtrans_pattern(cockpit_ws_t,cockpit_session_exec_t,cockpit_session_t)
unconfined_signal(cockpit_session_t)

# cockpit-ws can write to its temp files
manage_files_pattern(cockpit_ws_t,tmp_t,cockpit_tmp_t)
files_tmp_filetrans(cockpit_ws_t,cockpit_tmp_t,file)

# cockpit-ws can connect to other hosts via ssh
allow cockpit_ws_t ssh_port_t:tcp_socket { name_connect recv_msg shutdown getopt setopt write recvfrom send_msg sendto read };

auth_use_nsswitch(cockpit_ws_t)
logging_send_syslog_msg(cockpit_ws_t)

# ------------------------------------------------------------------
# cockpit-session local policy

type cockpit_session_t;
type cockpit_session_exec_t;
domain_type(cockpit_session_t)
domain_entry_file(cockpit_session_t,cockpit_session_exec_t)

# cockpit-session runs a full pam stack, including pam_selinux.so
auth_login_pgm_domain(cockpit_session_t)

# cockpit-session changes to the actual logged in user
allow cockpit_session_t self:capability { sys_admin dac_override setuid setgid };
rw_files_pattern(cockpit_session_t,user_home_t,user_home_t)

# cockpit-session communicates back with cockpit-ws
allow cockpit_session_t cockpit_ws_t:unix_stream_socket { getattr read recvfrom write getopt setopt shutdown };

auth_use_nsswitch(cockpit_session_t)
logging_send_syslog_msg(cockpit_session_t)

# cockpit-session can execute cockpit-agent as the user
userdom_spec_domtrans_all_users(cockpit_session_t, userdomain)

# cockpit-session can write to temp files
write_files_pattern(cockpit_session_t,var_log_t,wtmp_t)
