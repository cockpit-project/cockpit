#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *

import os
import subprocess
import unittest

@unittest.skipIf("atomic" in os.environ.get("TEST_OS", ""), "atomic: missing bind-utils")
class TestRealms(MachineCase):

    def testIpa(self):
        m = self.machine
        b = self.browser

        # TODO: Make this work with non-root
        b.default_user = "root"

        # Start the FreeIPA instance and use it as the DNS server
        #
        ipa = self.new_machine(flavor="ipa")
        ipa.start()
        ipa.wait_boot()

        m.execute("hostnamectl set-hostname x0.cockpit.lan")
        m.execute("echo -e 'domain cockpit.lan\nsearch cockpit.lan\nnameserver %s\n' >/etc/resolv.conf; chattr +i /etc/resolv.conf" % ipa.address)

        # Wait for DNS to work as expected.
        # https://bugzilla.redhat.com/show_bug.cgi?id=1071356#c11
        #
        wait(lambda: m.execute("nslookup -type=SRV _ldap._tcp.cockpit.lan"))

        self.login_and_go("/system")

        def wait_number_domains(n):
            if n == 0:
                b.wait_text("#system_information_realms_button", "Join Domain")
            else:
                b.wait_text_not("#system_information_realms_button", "Join Domain")
            b.wait_not_attr("#system_information_realms_button", "disabled", "disabled")

        wait_number_domains(0)

        # Join cockpit.lan
        b.click("#system_information_realms_button")
        b.wait_popup("realms-op")
        with b.wait_timeout(120):
            b.set_val(".realms-op-address", "cockpit.lan")
            b.wait_attr(".realms-op-admin", "placeholder", 'e.g. "admin"')
            b.set_val(".realms-op-admin", "admin")
            b.set_val(".realms-op-admin-password", "foobarfoo")
            b.click(".realms-op-apply")
            b.wait_popdown("realms-op")

            # Check that this has worked
            wait_number_domains(1)

        # Leave the domain
        b.click("#system_information_realms_button")
        b.wait_popup("realms-op")
        b.click(".realms-op-apply")
        b.wait_popdown("realms-op")
        wait_number_domains(0)

        # Send a wrong password
        b.click("#system_information_realms_button")
        b.wait_popup("realms-op")
        b.set_val(".realms-op-address", "cockpit.lan")
        b.wait_attr(".realms-op-admin", "placeholder", 'e.g. "admin"')
        b.set_val(".realms-op-admin", "admin")
        b.set_val(".realms-op-admin-password", "foo")
        b.click(".realms-op-apply")
        b.wait_text_not(".realms-op-error", "")
        b.click(".realms-op-cancel")
        b.wait_popdown("realms-op")

        # Try to join a non-existing domain
        b.click("#system_information_realms_button")
        b.wait_popup("realms-op")
        b.set_val(".realms-op-address", "NOPE")
        b.wait_js_cond("$('.realms-op-address-error').attr('title') != ''")
        b.click(".realms-op-cancel")
        b.wait_popdown("realms-op")

        # Cancel a join
        b.click("#system_information_realms_button")
        b.wait_popup("realms-op")
        b.set_val(".realms-op-address", "cockpit.lan")
        b.wait_attr(".realms-op-admin", "placeholder", 'e.g. "admin"')
        b.set_val(".realms-op-admin", "admin")
        b.set_val(".realms-op-admin-password", "foobarfoo")
        b.click(".realms-op-apply")
        b.wait_visible(".realms-op-spinner")
        b.click(".realms-op-cancel")
        b.wait_popdown("realms-op")

        # HACK: https://bugzilla.redhat.com/show_bug.cgi?id=1256636
        self.allow_journal_messages(".*type=1400 audit.*denied.*nsupdate.*nsswitch.conf.*realmd_var_lib_t.*")

KRB5_TEMPLATE = """
[logging]
 default = FILE:%(dir)s/krb5.log
[libdefaults]
 dns_lookup_realm = false
 default_realm = COCKPIT.LAN
 rdns = false
[realms]
 COCKPIT.LAN = {
   kdc = %(addr)s
   master_kdc = %(addr)s
 }
[domain_realm]
 %(addr)s = COCKPIT.LAN
"""

JOIN_SCRIPT = """
set -e
hostnamectl set-hostname x0.cockpit.lan
echo -e 'domain cockpit.lan\nsearch cockpit.lan\nnameserver %(addr)s\n' > /etc/resolv.conf
chattr +i /etc/resolv.conf
# HACK: https://bugzilla.redhat.com/show_bug.cgi?id=1071356#c11
for x in 1 2 3 4 5 6 7 8 9 10; do
    if nslookup -type=SRV _ldap._tcp.cockpit.lan; then
        break
    else
        sleep 1
    fi
done
echo '%(password)s' | realm join -U admin cockpit.lan

# HACK: https://bugzilla.redhat.com/show_bug.cgi?id=1144292
echo '%(password)s' | kinit admin@COCKPIT.LAN
curl -s --negotiate -u : https://f0.cockpit.lan/ipa/json --header 'Referer: https://f0.cockpit.lan/ipa' --header "Content-Type: application/json" --header "Accept: application/json" --data '{"params": [["HTTP/x0.cockpit.lan@COCKPIT.LAN"], {"raw": false, "all": false, "version": "2.101", "force": true, "no_members": false}], "method": "service_add", "id": 0}'
ipa-getkeytab -q -s f0.cockpit.lan -p HTTP/x0.cockpit.lan -k /etc/krb5.keytab
"""

# This is here because our test framework can't run ipa VM's twice
@unittest.skipIf("atomic" in os.environ.get("TEST_OS", ""), "atomic: missing bind-utils")
class TestKerberos(MachineCase):
    def setUp(self):
        self.ipa = self.new_machine(flavor="ipa")
        self.ipa.start()
        self.ipa.wait_boot()

        MachineCase.setUp(self)

        # Setup a place for kerberos caches
        self.ccache = "%s/krb5cc" % self.tmpdir
        os.environ['KRB5CCNAME'] = self.ccache
        self.config = "%s/krb5.conf" % self.tmpdir

        args = { "addr": self.ipa.address, "dir": self.tmpdir, "password": "foobarfoo" }

        # Setup a kerberos config that doesn't require DNS
        os.environ['KRB5_CONFIG'] = self.config
        with open(self.config, "w") as f:
            data = KRB5_TEMPLATE % args
            f.write(data)

        self.start_cockpit()

        self.machine.execute(script=JOIN_SCRIPT % args)
        env = os.environ.copy()
        proc = subprocess.Popen(["kinit", "admin@COCKPIT.LAN"], env=env, stdin=subprocess.PIPE)
        proc.communicate(args['password'])
        self.assertEqual(proc.wait(), 0)

    def tearDown(self):
        del os.environ['KRB5CCNAME']
        del os.environ['KRB5_CONFIG']

        MachineCase.tearDown(self)

    def testNegotiate(self):
        output = subprocess.check_output(['/usr/bin/curl', '-s', '--negotiate', '-u', ':', "-D", "-",
                                          '--resolve', 'x0.cockpit.lan:9090:%s' % self.machine.address,
                                          'http://x0.cockpit.lan:9090/cockpit/login'])
        self.assertIn("HTTP/1.1 200 OK", output)
        self.assertIn('"admin@cockpit.lan"', output)

test_main()
