#!/usr/bin/python3

# This file is part of Cockpit.
#
# Copyright (C) 2018 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import parent
import unittest
import subprocess

from testlib import *
import machineslib


class TestMachinesDBus(machineslib.TestMachines):

    def skipIfNotLibvirtDbusAvailable(self):
        try:
            self.machine.execute("busctl introspect org.libvirt /")
        except subprocess.CalledProcessError:
            raise unittest.SkipTest("libvirt-dbus is not available");

    def allowSystemDBusUnprivileged(self):
        # Add admin user to libvirt group so that he has access to system libvirt-dbus
        self.machine.execute("sudo usermod -a -G libvirt admin")

    def setUp(self):
        super(TestMachinesDBus, self).setUp()

        self.skipIfNotLibvirtDbusAvailable()
        self.allowSystemDBusUnprivileged()
        self.provider = "libvirt-dbus"


    def testDetachDisk(self):
        b = self.browser
        m = self.machine

        # prepare libvirt storage pools
        m.execute("mkdir /mnt/vm_one; chmod a+rwx /mnt/vm_one")
        m.execute("virsh pool-create-as myPoolOne --type dir --target /mnt/vm_one")
        m.execute("virsh vol-create-as myPoolOne mydiskofpoolone_1 --capacity 1G --format qcow2")
        m.execute("virsh vol-create-as myPoolOne mydiskofpoolone_2 --capacity 1G --format qcow2")
        wait(lambda: "mydiskofpoolone_1" in m.execute("virsh vol-list myPoolOne"))
        wait(lambda: "mydiskofpoolone_2" in m.execute("virsh vol-list myPoolOne"))

        self.startVm("subVmTest1")

        m.execute("virsh attach-disk --domain subVmTest1 --source /mnt/vm_one/mydiskofpoolone_1 --target vdb --targetbus virtio")
        m.execute("virsh attach-disk --domain subVmTest1 --source /mnt/vm_one/mydiskofpoolone_2 --target vdc --targetbus virtio --persistent")

        self.login_and_go("/machines")
        b.wait_in_text("body", "Virtual Machines")
        b.wait_present("tbody tr th")
        b.wait_in_text("tbody tr th", "subVmTest1")

        # Test detaching non permanent disk of a running domain
        b.click("tbody tr th") # click on the row header
        b.wait_present("#vm-subVmTest1-state")
        b.wait_in_text("#vm-subVmTest1-state", "running")

        b.wait_present("#vm-subVmTest1-disks") # wait for the tab
        b.click("#vm-subVmTest1-disks") # open the "Disks" subtab

        b.wait_present("#vm-subVmTest1-disks-vdb-detach") # button
        b.click("#vm-subVmTest1-disks-vdb-detach")
        b.wait_not_present("vm-subVmTest1-disks-vdb-target")

        # Test that detaching disk of a running domain will affect the
        # inactive configuration as well
        b.click("#vm-subVmTest1-off-caret")
        b.wait_visible("#vm-subVmTest1-forceOff")
        b.click("#vm-subVmTest1-forceOff")
        b.wait_in_text("#vm-subVmTest1-state", "shut off")
        b.wait_not_present("vm-subVmTest1-disks-vdb-target")

        # Test detaching permanent disk of a stopped domain
        b.wait_present("#vm-subVmTest1-disks") # wait for the tab
        b.click("#vm-subVmTest1-disks") # open the "Disks" subtab

        b.wait_present("#vm-subVmTest1-disks-vdc-detach") # button
        b.click("#vm-subVmTest1-disks-vdc-detach")
        b.wait_not_present("vm-subVmTest1-disks-vdc-target")


if __name__ == '__main__':
    test_main()
