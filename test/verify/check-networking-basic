#!/usr/bin/python3

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import parent
from netlib import *
from testlib import *

@nondestructive
@skipImage("Do not test BaseOS packages", "rhel-8-3-distropkg", "rhel-8-4-distropkg")
class TestNetworkingBasic(NetworkCase):
    def testBasic(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/network")
        b.wait_visible("#networking")

        iface = 'cockpit1'
        self.add_veth(iface, dhcp_cidr="10.111.113.2/20")
        self.nm_activate_eth(iface)
        self.wait_for_iface(iface)
        b.wait_not_present("#network-interface")

        b.wait_in_text("#networking-graphs", "Transmitting")
        b.wait_in_text("#networking-graphs", "Receiving")

        # Details of test iface
        self.select_iface(iface)
        b.wait_visible("#network-interface")

        con_id = wait(lambda: self.iface_con_id(iface))

        # Toggle "Connect automatically"
        #
        b.wait_visible('#autoreconnect:checked')
        b.set_checked('#autoreconnect', False)
        self.assertEqual(m.execute("nmcli -g connection.autoconnect con show %s" % con_id), "no\n")
        b.wait_visible('#autoreconnect:not(:checked)')
        b.set_checked('#autoreconnect', True)
        b.wait_visible('#autoreconnect:checked')
        self.assertEqual(m.execute("nmcli -g connection.autoconnect con show %s" % con_id), "yes\n")

        # Configure a manual IP address
        #
        self.configure_iface_setting('IPv4')
        b.wait_popup("network-ip-settings-dialog")
        b.select_from_dropdown("#network-ip-settings-dialog select", "manual")
        # Manual mode  disables automatic switches
        b.wait_visible("#network-ip-settings-dialog [data-field='dns'] input[type=checkbox]:disabled")
        b.wait_visible("#network-ip-settings-dialog [data-field='dns_search'] input[type=checkbox]:disabled")
        b.wait_visible("#network-ip-settings-dialog [data-field='routes'] input[type=checkbox]:disabled")

        b.set_val('#network-ip-settings-dialog input[placeholder="Address"]', "1.2.3.4")
        b.set_val('#network-ip-settings-dialog input[placeholder*="netmask"]', "255.255.0.8")
        b.click("#network-ip-settings-dialog button:contains('Apply')")
        b.wait_text_not("#network-ip-settings-error h4", "")
        b.set_val('#network-ip-settings-dialog input[placeholder*="netmask"]', "255.255.192.0")
        b.click("#network-ip-settings-dialog button:contains('Apply')")
        b.wait_popdown("network-ip-settings-dialog")
        b.wait_in_text("#network-interface .pf-c-card:contains('%s')" % iface, "1.2.3.4/18")

        # Disconnect
        self.wait_onoff(".pf-c-card__header:contains('%s')" % iface, True)
        self.toggle_onoff(".pf-c-card__header:contains('%s')" % iface)
        self.wait_for_iface_setting('Status','Inactive')

        # Switch it back to "auto" from the command line and bring it
        # up again
        #
        m.execute("nmcli connection modify '%s' ipv4.method auto" % con_id)
        m.execute("nmcli connection modify '%s' ipv4.addresses ''" % con_id)
        self.wait_for_iface_setting('IPv4', "Automatic (DHCP)")
        m.execute("nmcli connection up '%s'" % con_id)
        self.wait_for_iface_setting('Status', '10.111.')

        # Switch off automatic DNS
        #
        self.configure_iface_setting('IPv4')
        b.wait_popup("network-ip-settings-dialog")
        self.wait_onoff("#network-ip-settings-dialog [data-field='dns']", True)
        self.toggle_onoff("#network-ip-settings-dialog [data-field='dns']")
        # The "DNS search domains" setting should follow suit
        self.wait_onoff("#network-ip-settings-dialog [data-field='dns_search']", False)
        b.click("#network-ip-settings-dialog button:contains('Apply')")
        b.wait_popdown("network-ip-settings-dialog")

        wait(lambda: "yes" in m.execute("nmcli -f ipv4.ignore-auto-dns connection show '%s'" % con_id))

    def testNoService(self):
        b = self.browser
        m = self.machine

        iface = "cockpit42"
        self.add_veth(iface)
        self.addCleanup(m.execute, "systemctl enable --now NetworkManager")

        def assert_running():
            b.wait_not_present("#networking-nm-crashed")
            b.wait_not_present("#networking-nm-disabled")
            b.wait_visible("#networking-graphs")
            b.wait_visible("#networking-interfaces")
            b.wait_in_text("#networking-interfaces", iface)

        def assert_stopped(enabled):
            # should hide graphs and actions and show the appropriate notification
            b.wait_not_present("#networking-graphs")
            b.wait_not_present("#networking-interfaces")
            if enabled:
                b.wait_visible("#networking-nm-crashed")
                b.wait_not_present("#networking-nm-disabled")
            else:
                b.wait_not_present("#networking-nm-crashed")
                b.wait_visible("#networking-nm-disabled")

        self.login_and_go("/network")
        assert_running()

        # stop/start NM on CLI, page should notice
        m.execute("systemctl stop NetworkManager")
        assert_stopped(True)
        m.execute("systemctl start NetworkManager")
        assert_running()

        # stop NM, test inline start button
        m.execute("systemctl stop NetworkManager")
        assert_stopped(True)
        b.click("#networking-nm-crashed button")
        assert_running()

        # stop NM, test troubleshoot button
        m.execute("systemctl stop NetworkManager")
        assert_stopped(True)
        b.click("#networking-nm-crashed a")
        b.enter_page("/system/services")
        b.wait_text(".service-name", "Network Manager")
        b.click(".service-top-panel .pf-c-dropdown button")
        b.click(".service-top-panel .pf-c-dropdown__menu a:contains('Start')")
        b.wait_in_text("#statuses", "Running")

        # networking page should notice start from Services page
        b.go("/network")
        b.enter_page("/network")
        assert_running()

        # stop and disable NM, enablement info notification
        m.execute("systemctl stop NetworkManager; systemctl disable NetworkManager")
        assert_stopped(False)
        b.click("#networking-nm-disabled button")
        assert_running()
        wait(lambda: m.execute("systemctl is-enabled NetworkManager"))

        self.allow_journal_messages(".*org.freedesktop.NetworkManager.*")


if __name__ == '__main__':
    test_main()
