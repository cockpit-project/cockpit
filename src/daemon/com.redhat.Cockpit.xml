<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

  <!--
  This file is part of Cockpit.

  Copyright (C) 2013 Red Hat, Inc.

  Cockpit is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 2.1 of the License, or
  (at your option) any later version.

  Cockpit is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with Cockpit; If not, see <http://www.gnu.org/licenses/>.
  -->

  <!--
      com.redhat.Cockpit.Manager:
      @short_description: Manager singleton

      Interface for top-level manager singleton object located at the
      object path <literal>/com/redhat/Cockpit/Manager</literal>.
  -->
  <interface name="com.redhat.Cockpit.Manager">
    <!-- Version: The version of the cockpitd instance currently running  -->
    <property name="Version" type="s" access="read"/>

    <!-- OperatingSystem: Human-readable string identifying the OS and version -->
    <property name="OperatingSystem" type="s" access="read"/>

    <!-- Hostname: The transient host name, see <ulink url="http://www.freedesktop.org/wiki/Software/systemd/hostnamed">systemd-hostnamed</ulink> for details -->
    <property name="Hostname" type="s" access="read"/>

    <!-- StaticHostname: The statically configured host name, see <ulink url="http://www.freedesktop.org/wiki/Software/systemd/hostnamed">systemd-hostnamed</ulink> for details -->
    <property name="StaticHostname" type="s" access="read"/>

    <!-- PrettyHostname: The pretty host name, see <ulink url="http://www.freedesktop.org/wiki/Software/systemd/hostnamed">systemd-hostnamed</ulink> for details -->
    <property name="PrettyHostname" type="s" access="read"/>

    <!--
        SetHostname:
        @pretty_hostname: Pretty Host Name to set
        @static_hostname: Regular host name to set
        @options: Currently unused.

        Sets the host names.
    -->
    <method name="SetHostname">
      <arg name="pretty_hostname" type="s" direction="in"/>
      <arg name="static_hostname" type="s" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
    </method>

  </interface>

  <!--
      com.redhat.Cockpit.ResourceMonitor:
      @short_description: Resource Monitor

      Used to convery resources.
  -->
  <interface name="com.redhat.Cockpit.ResourceMonitor">

    <property name="NumSamples" type="u" access="read"/>
    <property name="NumSeries" type="u" access="read"/>

    <!-- Legends:
         The legend to use for each series.

         This array is #com.redhat.Cockpit.ResourceMonitor:NumSeries long.
    -->
    <property name="Legends" type="as" access="read"/>

    <!--
        GetSamples:
        @options: Currently unused.
        @samples: The samples currently collected.

        Returns (up to) #com.redhat.Cockpit.ResourceMonitor:NumSamples
        historical samples, returning the oldest ones first.
    -->
    <method name="GetSamples">
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="samples" type="a(xad)" direction="out"/>
    </method>

    <!--
        NewSample:
        @timestamp: The point in time the sample was captured (micro-seconds since Epoch).
        @values: An array of values.

        Signal emitted when a new sample has been collected.
    -->
    <signal name="NewSample">
      <arg name="timestamp" type="x"/>
      <arg name="values" type="ad"/>
    </signal>
  </interface>

  <!--
      com.redhat.Cockpit.MultiResourceMonitor:

      @short_description: Monitor for a dynamic set of consumers, such
      as all individual cgroups in a hierarchy.
  -->
  <interface name="com.redhat.Cockpit.MultiResourceMonitor">

    <property name="NumSamples" type="u" access="read"/>
    <property name="NumSeries" type="u" access="read"/>
    <property name="Consumers" type="as" access="read"/>

    <!-- Legends:
         The legend to use for each series.

         This array is #com.redhat.Cockpit.MultiResourceMonitor:NumSeries long.
    -->
    <property name="Legends" type="as" access="read"/>

    <!--
        GetSamples:
        @samples: The samples currently collected.

        Returns (up to) #com.redhat.Cockpit.MultiResourceMonitor:NumSamples
        historical samples, returning the oldest ones first.
    -->
    <method name="GetSamples">
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="samples" type="a(xa{sad})" direction="out"/>
    </method>

    <!--
        NewSample:
        @timestamp: The point in time the sample was captured (micro-seconds since Epoch).
        @values: A dict with (consumer, array of values) pairs.

        Signal emitted when a new sample has been collected.
    -->
    <signal name="NewSample">
      <arg name="timestamp" type="x"/>
      <arg name="values" type="a{sad}"/>
    </signal>
  </interface>

  <!--
      com.redhat.Cockpit.Realms:
      @short_description: For managing realm membership.

      Realms are identified by their display name.

      This interface is implemented by
      /com/redhat/Cockpit/Realms.
  -->
  <interface name="com.redhat.Cockpit.Realms">

    <!-- Joined:
         The joined realms, as a list of 'name', 'detail' tuples.

         The details are a dict like the one returned by Discover
         below.
    -->
    <property name="Joined" type="a(sa{sv})" access="read"/>

    <!-- Busy:
         What we are busy with
    -->
    <property name="Busy" type="(ss)" access="read"/>

    <!-- GetDiagnostics:
         Get the diagnostics of the last Join or Leave operation
         command.
    -->
    <method name="GetDiagnostics">
      <arg name="text" type="s" direction="out"/>
    </method>

    <!-- Discover:
         Discover information about one realm.

         The given string is used to find the realm.  When it is
         empty, a default realm might be returned.

         The name of the realm is returned, and some further details
         as a list of dictionaries.  Each entry in that list describes
         one way to interact with that realm, and might contain the
         following keys:

	 server-software (s)
	 client-software (s)
	 supported-join-credentials (as)
	 supported-leave-credentials (as)
	 suggested-administrator (s)

         When no realm is found, the 'name' result is the empty
         string.
    -->
    <method name="Discover">
      <arg name="string" type="s" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="name" type="s" direction="out"/>
      <arg name="details" type="aa{sv}" direction="out"/>
    </method>

    <!-- Join:
         Join a realm.
    -->
    <method name="Join">
      <arg name="realm" type="s" direction="in"/>
      <arg name="creds" type="(sss)" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
    </method>

    <!-- Leave:
         Leave a realm.
    -->
    <method name="Leave">
      <arg name="name" type="s" direction="in"/>
      <arg name="creds" type="(sss)" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
    </method>

    <!-- Cancel:
         Cancel a ongoing Join or Leave method call.
    -->
    <method name="Cancel">
    </method>

  </interface>

  <interface name="com.redhat.Cockpit.Services">
    <method name="ListServices">
      <!-- (name,description,load_state,active_state,sub_state,file_state) -->
      <arg name="services" type="a(ssssss)" direction="out"/>
    </method>

    <signal name="ServiceUpdate">
      <arg name="service" type="(ssssss)" direction="out"/>
    </signal>

    <signal name="ServiceUpdateAll">
    </signal>

    <method name="GetServiceInfo">
      <arg name="name" type="s" direction="in"/>
      <arg name="info" type="a{sv}" direction="out"/>
    </method>

    <method name="ServiceAction">
      <arg name="name" type="s" direction="in"/>
      <arg name="action" type="s" direction="in"/>
    </method>

  </interface>

</node>
