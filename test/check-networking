#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *
import time
import os

class TestNetworking(MachineCase):
    def setUp(self):
        MachineCase.setUp(self)

    def get_iface(self, m, mac):
        def getit():
            path = m.execute("grep -li '%s' /sys/class/net/*/address" % mac)
            return path.split("/")[-2]
        iface = wait(getit).strip()
        print "%s -> %s" % (mac, iface)
        return iface

    def wait_for_iface(self, iface):
        sel = "#networking-interfaces tr[data-interface='%s']" % iface

        valid_states = [
                          "Inactive",
                          "bps",
                          "Configuring IP"
                       ]

        def is_valid():
            row_text = self.browser.text(sel)
            for state in valid_states:
                if state in row_text:
                    return True
            return False

        try:
            self.browser.wait_present(sel)
            self.browser.wait_visible(sel)
            self.browser.wait(is_valid)
        except:
            print "Interface %s didn't show up." % iface
            print self.browser.eval_js("$('#networking-interfaces').html()")
            print self.machine.execute("grep . /sys/class/net/*/address")
            raise

    def switch_off_rp_filter(self, m):
        #
        # HACK - rp_filter interacts badly with our multi-homed
        #        interfaces.  Thus, we switch it off by setting all
        #        instances of it to zero.  This should catch all
        #        existing interfaces as well as 'all' and 'default'
        #        (for interfaces added in the future).
        #
        # https://bugzilla.redhat.com/show_bug.cgi?id=1211287
        #
        m.execute("for d in /proc/sys/net/ipv4/conf/*; do echo 0 >$d/rp_filter; done")

    def testBasic(self):
        b = self.browser
        m = self.machine

        self.switch_off_rp_filter(m)

        # Something strange is happening here.
        #
        # When hot-plugging the network interface below, it is
        # automatically recognized and NM will create a connection
        # settings object for it with path
        # /org/freedesktop/NetworkManager/Settings/1.  No file in
        # /etc/sysconfig/network-scripts exists for it.  The interface
        # will be activated automatically with those default settings.
        #
        # Calling 'Update' on that object will cause a file to be
        # created in /etc/sysconfig/network-scripts, the connection is
        # activated immediately (so that the actual IP address of the
        # network interface changes), the settings object disappears
        # from D-Bus, and a new object with the same id and uuid
        # appears at /org/freedesktop/NetworkManager/Settings/2.
        #
        # In order to avoid racing against this, we explicitly modify
        # the connection with nmcli so that NetworkManager settles
        # down.

        self.login_and_go("/network")
        b.wait_in_text("#networking-interfaces", m.address)

        # Add interface, wait for it to be recognized and activated by
        # Network Manager, and switch to its page

        mac = "52:54:00:9e:00:F2"
        label = "test"
        m.execute("echo -e 'TYPE=Ethernet\nHWADDR=%s\nBOOTPROTO=autoip\n' >/etc/sysconfig/network-scripts/ifcfg-%s" % (mac, label))
        m.execute("nmcli c reload")
        iface = self.get_iface(m, m.add_netiface(mac));

        self.wait_for_iface(iface)
        b.click("#networking-interfaces tr[data-interface='%s']" % iface)
        b.wait_visible("#network-interface")

        # Make sure we are working on the settings written above.
        # "Link local" corresponds to "BOOTPROTO=autoip".
        #
        b.wait_present("tr:contains('IPv4')")
        b.wait_in_text("tr:contains('IPv4')", "Link local")

        # Configure a manual IP address
        #
        b.click("tr:contains('IPv4') button")
        b.wait_popup("network-ip-settings-dialog")
        b.click("#network-ip-settings-dialog .btn.dropdown-toggle")
        b.click("#network-ip-settings-dialog a:contains('Manual')")
        b.set_val('#network-ip-settings-dialog input[placeholder="Address"]', "1.2.3.4")
        b.set_val('#network-ip-settings-dialog input[placeholder*="Netmask"]', "255.255.0.8")
        b.click("#network-ip-settings-dialog button:contains('Apply')")
        b.wait_text_not("#network-ip-settings-error", "")
        b.set_val('#network-ip-settings-dialog input[placeholder*="Netmask"]', "255.255.192.0")
        b.click("#network-ip-settings-dialog button:contains('Apply')")
        b.wait_popdown("network-ip-settings-dialog")
        b.wait_in_text("#network-interface .panel:contains('%s')" % iface, "1.2.3.4/18")

        # Disconnect
        #
        b.click(".panel-heading:contains('%s') .btn:contains('Off')" % iface)
        b.wait_in_text("tr:contains('Status')", "Inactive")

        # Switch it back to "auto" from the command line and bring it
        # up again
        #
        id = "System %s" % label
        m.execute("nmcli c m '%s' ipv4.method auto" % id)
        m.execute("nmcli c m '%s' ipv4.addresses ''" % id)
        b.wait_in_text("tr:contains('IPv4')", "Automatic (DHCP)")
        m.execute("nmcli c up '%s'" % id)
        b.wait_in_text("tr:contains('Status')", "10.111.")

    def testBond(self):
        b = self.browser
        m = self.machine

        self.switch_off_rp_filter(m)

        self.login_and_go("/network")
        b.wait_in_text("#networking-interfaces", m.address)

        # Add interfaces and wait for them to be active or not (as
        # appropriate for the OS).

        # HACK - The second interface is connected to a different
        # outside network than the first to avoid something similar to
        #
        #  https://bugzilla.redhat.com/show_bug.cgi?id=1211287
        #
        # Switching off rp_filter doesn't seem to be enough in the
        # case of bonds.

        iface1 = self.get_iface(m, m.add_netiface());
        iface2 = self.get_iface(m, m.add_netiface(vlan=1))
        self.wait_for_iface(iface1)
        self.wait_for_iface(iface2)

        # Bond them
        b.click("button:contains('Add Bond')")
        b.wait_popup("network-bond-settings-dialog")
        b.set_val("#network-bond-settings-dialog tr:contains('Name') input", "tbond")
        b.set_checked("input[data-iface='%s']" % iface1, True)
        b.set_checked("input[data-iface='%s']" % iface2, True)
        b.click("#network-bond-settings-dialog button:contains('Apply')")
        b.wait_popdown("network-bond-settings-dialog")
        b.wait_in_text("#networking-interfaces", "tbond")

        # Wait for the bond to be active
        b.click("#networking-interfaces td:first-child:contains('tbond')")
        b.wait_visible("#network-interface")
        b.wait_in_text("tr:contains('Status')", "10.111.")
        b.wait_present("tr[data-interface='%s']" % iface1)
        b.wait_present("tr[data-interface='%s']" % iface2)

        # Deactivate the bond and make sure it is still there after a
        # reload.
        b.click(".panel-heading:contains('tbond') .btn:contains('Off')")
        b.wait_in_text("tr:contains('Status')", "Inactive")
        b.reload()
        b.enter_page("/network")
        b.wait_present("#network-interface-name")
        b.wait_text("#network-interface-name", "tbond")
        b.wait_text("#network-interface-hw", "Bond")
        b.wait_in_text("tr:contains('Status')", "Inactive")
        b.wait_present("tr[data-interface='%s']" % iface1)
        b.wait_present("tr[data-interface='%s']" % iface2)

        # Delete the bond
        b.click("#network-interface button:contains('Delete')")
        b.wait_visible("#networking")
        b.wait_not_in_text("#networking-interfaces", "tbond")

        # Due to above reload
        self.allow_journal_messages(".*Connection reset by peer.*")

    def testBridge(self):
        b = self.browser
        m = self.machine

        self.switch_off_rp_filter(m)

        self.login_and_go("/network")
        b.wait_in_text("#networking-interfaces", m.address)

        # Add interfaces and wait for them to be active or not (as
        # appropriate for the OS).

        # The second interface is connected to a different outside
        # network than the first to avoid a cycle between the
        # "cockpit1" bridge that all VMs are connected to, and the
        # bridge we are creating here.

        iface1 = self.get_iface(m, m.add_netiface());
        iface2 = self.get_iface(m, m.add_netiface(vlan=1));
        self.wait_for_iface(iface1)
        self.wait_for_iface(iface2)

        # Bridge them
        b.click("button:contains('Add Bridge')")
        b.wait_popup("network-bridge-settings-dialog")
        b.set_val("#network-bridge-settings-dialog tr:contains('Name') input", "tbridge")
        b.set_checked("input[data-iface='%s']" % iface1, True)
        b.set_checked("input[data-iface='%s']" % iface2, True)
        b.click("#network-bridge-settings-dialog button:contains('Apply')")
        b.wait_popdown("network-bridge-settings-dialog")
        b.wait_in_text("#networking-interfaces", "tbridge")

        # Wait for the bridge to be active.
        b.click("#networking-interfaces td:first-child:contains('tbridge')")
        b.wait_visible("#network-interface")
        b.wait_in_text("tr:contains('Status')", "10.111.")

        # Delete the bridge
        b.click("#network-interface button:contains('Delete')")
        b.wait_visible("#networking")
        b.wait_not_in_text("#networking-interfaces", "tbridge")

test_main()
