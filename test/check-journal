#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *
import re

class TestJournal(MachineCase):
    def testBasic(self):
        b = self.browser
        m = self.machine

        # TODO: Make this work with non-root

        b.default_user = "root"

        def inject_extras():
            b.eval_js("""
            ph_get_log_lines = function () {
              var lines = [ ], i;
              lines.push($('.journal-end').text());
              $('.journal-lines').children().each(function (i, e) {
                var $e = $(e);
                if ($e.is('.panel-heading'))
                  lines.push ($e.text());
                else {
                  var c = $e.children();
                  var cc = $(c[1]).children();
                  var ident = $(c[0]).text();
                  var msg = $(cc[0]).text();
                  var count = $e.find('.badge').text();
                  lines.push ([ ident, msg, count ]);
                }
              });
              lines.push($('.journal-start').text());
              // console.log(JSON.stringify(lines));
              return lines;
            }
            """)

        # Certain versions of journald wont set _SYSTEMD_UNIT
        # correctly for entries that are processed after the
        # originating process has already exited.  So we keep the
        # process around for a bit longer after the last line has been
        # output.
        #
        m.write("/usr/lib/systemd/system/log123.service",
"""
[Unit]
Description=123 different log lines

[Service]
ExecStart=/bin/sh -c '/usr/bin/seq 123; sleep 10'
""")

        m.write("/usr/lib/systemd/system/slow10.service",
"""
[Unit]
Description=Slowly log 10 identical lines

[Service]
ExecStart=/bin/sh -c 'for s in $(seq 10); do echo SLOW; sleep 0.1; done; sleep 10'
""")

        m.execute("systemctl stop chronyd; date 010112002050; hwclock -w")

        self.login_and_go("/system/log")
        inject_extras()

        def wait_log_lines(expected):
            b.wait_js_func("""(function (expected) {
          var lines = ph_get_log_lines ();
          if (expected.length != lines.length)
            return false;
          for (i = 0; i < expected.length; i++)
            if (JSON.stringify(expected[i]) != JSON.stringify(lines[i]))
              return false;
          return true;
        })""", expected)

        def wait_journal_empty():
            wait_log_lines([ "-- End of Journal, waiting for more --",
                         "-- Start of Journal --"
                       ])

        b.go("/?prio=*&service=log123.service")
        wait_journal_empty()

        def wait_log123():
            b.wait_js_func ("""(function () {
          var lines = ph_get_log_lines();

          if (lines[0] != "-- End of Journal, waiting for more --")
            return false;

          if (lines[1] != "January 1, 2050")
            return false;

          if (lines[lines.length-1] != "-- Start of Journal --")
            return false;

          var seq = 123;
          var seen_day = false;

          for (i = 2; i < lines.length-1; i++) {
            l = lines[i];
            if (l[2] != "") {
              // console.log("repeat", l[2], "?");
              return false;
            }
            if (l[0] == "systemd: ") {
              // console.log(l[1], "?");
              return false;
            } else if (l[0] == "sh: ") {
              if (l[1] != seq.toString()) {
                // console.log(l[1], "?");
                return false;
              }
              seq = seq - 1;
            } else {
              // console.log(l[0], "?");
              return false;
            }
          }

          if (seq != 0) {
            // console.log("Didn't see all 'seq' lines.")
            return false;
          }

          return true;
        })""")

        m.execute("systemctl start log123")
        wait_log123()

        b.go("/?prio=*&start=oldest&service=nonexisting.service")
        wait_journal_empty()
        b.go("/?prio=*&start=oldest&service=log123.service")
        wait_log123()

        b.go("/?prio=*&start=recent&service=nonexisting.service")
        wait_journal_empty()
        b.go("/?prio=*&start=recent&service=log123.service")
        wait_log123()

        b.go("/?prio=*&start=recent&service=slow10.service")
        wait_journal_empty()

        def wait_slow10():
            wait_log_lines([ "-- End of Journal, waiting for more --",
                         "January 1, 2050",
                         [ "sh: ", "SLOW", "10" ],
                         "-- Start of Journal --"
                       ])

        m.execute("systemctl start slow10")
        wait_slow10()

        b.go("/?prio=*&start=oldest&service=nonexisting.service")
        wait_journal_empty()
        b.go("/?prio=*&start=oldest&service=slow10.service")
        wait_slow10()

        # insert messages as errors because we know these will be shown by default
        m.execute("logger -p user.err --tag check-journal BEFORE BOOT");
        m.spawn("sleep 0.1 && reboot", "reboot")
        m.wait_boot()
        m.execute("logger -p user.err --tag check-journal AFTER BOOT");

        self.start_cockpit()
        b.switch_to_top()
        b.relogin('/system/log')
        inject_extras()

        b.go("/?tag=check-journal")
        wait_log_lines([ "-- End of Journal, waiting for more --",
                         "January 1, 2050",
                         [ "check-journal: ", "AFTER BOOT", "" ],
                         [ "Reboot", "", "" ],
                         [ "check-journal: ", "BEFORE BOOT", "" ],
                         "-- Start of Journal --"
                     ])

        b.go("/?start=boot&tag=check-journal")
        wait_log_lines([ "-- End of Journal, waiting for more --",
                         "January 1, 2050",
                         [ "check-journal: ", "AFTER BOOT", "" ],
                         "Load earlier entries",
                     ])

        b.click('#journal-load-earlier')
        wait_log_lines([ "-- End of Journal, waiting for more --",
                         "January 1, 2050",
                         [ "check-journal: ", "AFTER BOOT", "2" ],
                         [ "Reboot", "", "" ],
                         [ "check-journal: ", "BEFORE BOOT", "" ],
                         "-- Start of Journal --"
                     ])

        self.allow_restart_journal_messages()

test_main()
