#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

BASELINE_PRIORITY = 10

BRANCHES = [ 'master', 'rhel-7.4' ]

DEFAULT_VERIFY = {
    'avocado/fedora': BRANCHES,
    'container/kubernetes': BRANCHES,
    'selenium/firefox': BRANCHES,
    'selenium/chrome': BRANCHES,
    'verify/centos-7': BRANCHES,
    'verify/continuous-atomic': [ ],
    'verify/debian-stable': [ 'master' ],
    'verify/debian-testing': [ 'master' ],
    'verify/fedora-i386': BRANCHES,
    'verify/fedora-26': [ ],
    'verify/fedora-27': [ 'master' ],
    'verify/fedora-atomic': BRANCHES,
    'verify/fedora-testing': [ ],
    'verify/ubuntu-1604': [ 'master' ],
    'verify/ubuntu-stable': [ 'master' ],
}

NPM_REPOS = {
    'cockpit-project/registry-image-widgets': ['container/kubernetes', 'verify/fedora-26']
}

# Non-public images used for testing
REDHAT_VERIFY = {
    "verify/rhel-7": [ 'master' ],
    "verify/rhel-7-4": [ 'master', 'rhel-7.4' ],
    "verify/rhel-7-5": [ 'master', 'rhel-7.5' ],
    "verify/rhel-atomic": [ 'master' ],
    'selenium/explorer': [ 'master' ],
}

# Host interfaces that tell us we're not in a namespaced network
HOST_INTERFACES = [ "cockpit1", "docker0", "virbr0" ]

# Branches that need the bridged network to work
LEGACY_BRANCHES = [
    'rhel-7.4',
]

import argparse
import os
import json
import pipes
import random
import subprocess
import sys
import time
import urllib.request, urllib.parse, urllib.error

sys.dont_write_bytecode = True

from task import github, REDHAT_PING

def main():
    parser = argparse.ArgumentParser(description='Bot: scan and update status of pull requests on GitHub')
    parser.add_argument('-v', '--human-readable', action="store_true", default=False,
                        help='Display human readable output rather than tasks')
    parser.add_argument('-d', '--dry', action="store_true", default=False,
                        help='Don''t actually change anything on GitHub')
    opts = parser.parse_args()
    api = github.GitHub()

    try:
        results = scan(api, not opts.dry, opts.human_readable)
    except RuntimeError as ex:
        sys.stderr.write("tests-scan: " + str(ex) + "\n")
        return 1

    for result in results:
        if result:
            sys.stdout.write(result + "\n")

    return 0

# Prepare a human readable output
def tests_human(priority, name, revision, ref, context, base=None, repo=None, command=None):
    if not priority:
        return
    try:
        priority = int(priority)
    except (ValueError, TypeError):
        pass
    return "{name:11} {context:25} {revision:10} {priority}".format(
        priority=priority,
        revision=revision[0:7],
        context=context,
        name=name
    )

# Prepare an test invocation command
def tests_invoke(priority, name, revision, ref, context, base=None, repo=None, command=None):
    try:
        priority = int(priority)
    except (ValueError, TypeError):
        priority = 0
    if priority <= 0:
        return
    current = time.strftime('%Y%m%d-%H%M%M')
    if not command:
        command = "bots/tests-invoke"

    checkout = "PRIORITY={priority:04d} bots/make-checkout --verbose"
    cmd = "TEST_NAME='{name}-{current}' TEST_REVISION='{revision}' {command}"
    if base:
        cmd += " --rebase='{base}'"
        checkout += " --base='{base}'"

    if repo:
        cmd = "GITHUB_BASE='{repo}' " + cmd

    cmd += " '{context}' '{ref}'"
    checkout += " '{ref}' '{revision}' && "

    return (checkout + cmd).format(
        priority=priority,
        name=pipes.quote(name),
        revision=pipes.quote(revision),
        base=pipes.quote(str(base)),
        ref=pipes.quote(ref),
        context=pipes.quote(context),
        current=current,
        repo=repo,
        command=command,
    )

def prioritize(status, title, labels, priority, context):
    state = status.get("state", None)
    update = { "state": "pending" }

    # This commit definitively succeeded or failed
    if state in [ "success", "failure" ]:
        priority = 0
        update = None

    # This test errored, we try again but low priority
    elif state in [ "error" ]:
        priority -= 6

    elif state in [ "pending" ]:
        update = None

    if priority > 0:
        if "priority" in labels():
            priority += 2
        if "blocked" in labels():
            priority -= 1

        # Pull requests where the title starts with WIP get penalized
        if title.startswith("WIP"):
            priority -= 3

        # Is testing already in progress?
        description = status.get("description", "")
        if description.startswith(github.TESTING):
            priority = description
            update = None

        # Prefer "local" operating system
        elif os.environ.get("TEST_OS", "?") not in context:
            priority -= random.randint(1, 2)

    if update:
        if priority <= 0:
            update = None
        else:
            update["description"] = github.NOT_TESTED

    return [priority, update]

def dict_is_subset(full, check):
    for (key, value) in check.items():
        if not key in full or full[key] != value:
            return False
    return True

def update_status(api, revision, context, last, changes):
    if changes:
        changes["context"] = context
    if changes and not dict_is_subset(last, changes):
        response = api.post("statuses/" + revision, changes, accept=[ 422 ]) # 422 Unprocessable Entity
        errors = response.get("errors", None)
        if not errors:
            return True
        for error in response.get("errors", []):
            sys.stderr.write("{0}: {1}\n".format(revision, error.get('message', json.dumps(error))))
            sys.stderr.write(json.dumps(changes))
        return False
    return True

def external_tasks (update, policy):
    results = []
    whitelist = github.whitelist()

    for repo, contexts in NPM_REPOS.items():
        api = github.GitHub(base="https://api.github.com/repos/{}/".format(repo))

        for pull in api.pulls():
            title = pull["title"]
            number = pull["number"]
            revision = pull["head"]["sha"]
            statuses = api.statuses(revision)
            login = pull["head"]["user"]["login"]

            have = len(statuses.keys()) > 0
            for context in contexts:
                status = statuses.get(context, None)

                if not context in policy or (have and not status):
                    continue

                if not status:
                    status = { }

                baseline = BASELINE_PRIORITY

                # For unmarked and untested status, user must be in whitelist
                # Not this only applies to this specific commit. A new status
                # will apply if the user pushes a new commit.
                if login not in whitelist and status.get("description", github.NO_TESTING) == github.NO_TESTING:
                    priority = github.NO_TESTING
                    changes = { "description": github.NO_TESTING, "context": context, "state": "pending" }
                else:
                    (priority, changes) = prioritize(status, title, lambda: [], baseline, context)
                if not update or update_status(api, revision, context, status, changes):
                    results.append((priority, "%s-pull-%d" % (repo, number), revision, "master", context, None, repo, "bots/npm-repo-test-invoke"))

    return results

def cockpit_tasks (api, update, policy):
    contexts = policy

    results = []
    branch_contexts = { }
    for (context, branches) in contexts.items():
        for branch in branches:
            if branch not in branch_contexts:
                branch_contexts[branch] = [ ]
            branch_contexts[branch].append(context)

    branch_priority = BASELINE_PRIORITY - 3
    for branch in branch_contexts:
        ref = api.get("git/refs/heads/{0}".format(branch))
        # if the branch doesn't exist but other branches begin with this name, GitHub returns a list
        # we don't want to use such a list
        # https://developer.github.com/v3/git/refs/
        if ref and not isinstance(ref, list):
            revision = ref["object"]["sha"]
            statuses = api.statuses(revision)
            which = list(statuses.keys()) or branch_contexts[branch]
            for context in which:
                status = statuses.get(context, { })
                (priority, changes) = prioritize(status, "", lambda: [], branch_priority, context)
                if not update or update_status(api, revision, context, status, changes):
                    results.append((priority, branch, revision, branch, context, None))

    whitelist = github.whitelist()
    for pull in api.pulls():
        title = pull["title"]
        number = pull["number"]
        revision = pull["head"]["sha"]
        statuses = api.statuses(revision)
        login = pull["head"]["user"]["login"]
        base = pull["base"]["ref"]  # The branch this pull request targets

        def labels():
            if "labels" not in pull:
                result = [ ]
                for label in api.get("issues/{0}/labels".format(number)):
                    result.append(label["name"])
                pull["labels"] = result
            return pull["labels"]

        # Do we have any statuses for this commit?
        have = len(statuses.keys()) > 0

        for context in contexts:
            status = statuses.get(context, None)
            baseline = BASELINE_PRIORITY

            # modify the baseline slightly to favor older pull requests, so that we don't
            # end up with a bunch of half tested pull requests
            baseline += 1.0 - (min(100000, float(number)) / 100000)

            # Only create new status for requests that have none
            if not status:
                if have or context not in branch_contexts.get(base, []):
                    continue
                status = { }

            # For unmarked and untested status, user must be in whitelist
            # Not this only applies to this specific commit. A new status
            # will apply if the user pushes a new commit.
            if login not in whitelist and status.get("description", github.NO_TESTING) == github.NO_TESTING:
                priority = github.NO_TESTING
                changes = { "description": github.NO_TESTING, "context": context, "state": "pending" }
            else:
                (priority, changes) = prioritize(status, title, labels, baseline, context)
            if not update or update_status(api, revision, context, status, changes):
                results.append((priority, "pull-%d" % number, revision, "pull/%d/head" % number, context, base))

    return results

def scan_for_pull_tasks(api, update, human, policy):
    results = cockpit_tasks(api, update, policy)
    results.extend(external_tasks(update, policy))

    if human:
        func = lambda x: tests_human(*x)
        results.sort(reverse=True, key=lambda x: str(x))
    else:
        func = lambda x: tests_invoke(*x)
    return list(map(func, results))

def scan(api, update, human):
    kvm = os.access("/dev/kvm", os.R_OK | os.W_OK)
    if not kvm:
        sys.stderr.write("tests-scan: No /dev/kvm access, not running tests here\n")
        return []

    policy = DEFAULT_VERIFY

    # Check if we have access to Red Hat network
    try:
        urllib.request.urlopen(REDHAT_PING).read()
        policy.update(REDHAT_VERIFY)
    except IOError:
        pass

    # Check if we're in a namespaced network
    null = open("/dev/null", "r+")
    for interface in HOST_INTERFACES:
        if subprocess.call([ "ip", "link", "show", interface ], stdout=null, stderr=null) == 0:
            break

    # In a namespaced network, remove legacy branches
    else:
        for context, branches in policy.items():
            policy[context] = [branch for branch in branches if branch not in LEGACY_BRANCHES]

    return scan_for_pull_tasks(api, update, human, policy)

if __name__ == '__main__':
    sys.exit(main())
