#!/usr/bin/env node

var webpack = require("webpack");
var path = require("path");
var stdio = require("stdio");
var fs = require("fs");

var ops = stdio.getopt({
    deps: { key: "d", args: 1, description: "Output dependencies in Makefile format" }
});

if (!ops.args || ops.args.length < 1 || ops.args.length > 2) {
    console.log("usage: webpack config [section]");
    process.exit(2);
}

var srcdir = process.env.SRCDIR;
var makefile = ops.deps;
var prefix = "section";

if (makefile) {
    prefix = makefile.split("-")[1].split(".")[0];
    process.env["ONLYDIR"] = prefix + "/";
}

var cwd = process.cwd();
var config = require(path.resolve(cwd, ops.args[0]));

webpack(config, function(err, stats) {
    // process.stdout.write(stats.toString({colors: true}) + "\n");

    if (err) {
        console.log(JSON.stringify(err));
        process.exit(1);
        return;
    }

    // Failure exit code when compilation fails
    if (stats.hasErrors() || stats.hasWarnings()) {
        console.log(stats.toString("normal"));
        process.exit(1);
        return;
    }

    if (makefile)
        generateDeps(makefile, stats);
});

function generateDeps(makefile, stats) {
    var inputs = { };
    stats.compilation.modules.forEach(function(module) {
        var parts = module.identifier().split("!");
        parts.concat(module.fileDependencies || []).forEach(function(part) {
            var input = part.split("?")[0];
            maybePushInput(inputs, input);
        });
    });

    stats.compilation.fileDependencies.forEach(function(file) {
        maybePushInput(inputs, file);
    });

    // That was a cheap way of doing a set
    inputs = Object.keys(inputs);

    // All the dependent files
    var outputs = [];
    var installs = [];
    var asset, output;
    var now = Math.floor(Date.now() / 1000);

    for(asset in stats.compilation.assets) {
        output = path.join(stats.compilation.outputOptions.path, asset);
        fs.utimesSync(output, now, now);
        outputs.push(output)
	if (!endsWith(output, "manifest.json") &&
            !endsWith(output, "override.json") &&
            !endsWith(output, "shell/index.html") &&
            !endsWith(output, "shell/stub.html") &&
            !endsWith(output, "shell/simple.html") &&
            !endsWith(output, ".png") &&
            !endsWith(output, ".gif")) {
            output += ".gz";
	}
        installs.push(output);
    }

    // Output a makefile

    var lines = [
        prefix + "_INPUTS = " + inputs.join(" "),
        prefix + "_OUTPUTS = " + outputs.join(" "),
        prefix + "_INSTALL = " + installs.join(" "),
	"",
    ];

    outputs.forEach(function(name) {
        lines.push(name + ": $(WEBPACK_CONFIG) $(" + prefix + "_INPUTS)");
        if (makefile)
            lines.push("\t$(WEBPACK_RULE) -d " + makefile + " $(WEBPACK_CONFIG)");
        else
            lines.push("\t$(WEBPACK_RULE) $(WEBPACK_CONFIG)");
    });

    lines.push("");
    lines.push("WEBPACK_INPUTS += $(" + prefix + "_INPUTS)");
    lines.push("WEBPACK_OUTPUTS += $(" + prefix + "_OUTPUTS)");
    lines.push("WEBPACK_INSTALL += $(" + prefix + "_INSTALL)");

    data = lines.join("\n");
    fs.writeFileSync(makefile, data);
}

function maybePushInput(inputs, input) {
    // Don't include node_modules files or external refs
    if (input.split(path.sep).indexOf("node_modules") === -1 && !endsWith(input, '/') &&
        input.indexOf("external ") !== 0 && input.indexOf("multi ") !== 0) {
        input = path.relative(cwd, input);
	if (srcdir && input.indexOf(srcdir) === 0)
		input = "$(srcdir)" + input.substr(srcdir.length);
        inputs[input] = true;
    }
}

function endsWith(string, suffix) {
    return (string.lastIndexOf(suffix) === (string.length - suffix.length))
}
