name: repository
on:
  pull_request_target:
    types: [opened, reopened, synchronize, labeled, unlabeled]

jobs:
  check:
    name: Protection checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      GIT_DIR: git-dir.git
      HEAD_SHA: ${{ github.event.pull_request.head.sha }}
      BASE_SHA: ${{ github.event.pull_request.base.sha }}

    steps:
      - name: Create work area
        run: |
          set -x
          git init -b main
          # git fetch --shallow-exclude="${BASE_SHA}" origin "${BASE_SHA}"  # GitHub doesn't support this
          git remote add origin "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"
          git fetch origin "${BASE_SHA}" "${HEAD_SHA}"

      - name: Clear .github-changes label
        if: ${{ !endsWith(github.event.action, 'labeled') }}
        uses: actions/github-script@v3
        with:
          script: |
            try {
              await github.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: '.github-changes'
              });
            } catch (e) {
              if (e.name == 'HttpError' && e.status == 404) {
                /* expected: 404 if label is unset */
              } else {
                throw e;
              }
            }

      - name: Check for .github changes
        # We want to run this check any time the .github-changes label is not
        # set, which needs to include the case where we just unset it above.
        if: ${{ !endsWith(github.event.action, 'labeled') ||
                !contains(github.event.pull_request.labels.*.name, '.github-changes') }}
        run: |
          set -x
          git log --full-history --exit-code --patch "${HEAD_SHA}" --not "${BASE_SHA}" -- .github >&2

      - name: Check for node_modules availability and package.json consistency
        run: |
          set -x
          git remote add cache "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY%/*}/node-cache"

          # for each commit in the PR...
          for commit in $(git log --full-history --format=%H "${HEAD_SHA}" --not "${BASE_SHA}" --reverse); do
              # ... check that package.json and node_modules/.package.json are in sync
              node_modules="$(git rev-parse "${commit}:node_modules")"
              package_json="$(git rev-parse "${commit}:package.json")"
              if ! git fetch cache "sha-${node_modules}"; then
                  echo "Commit ${commit} has node_modules ${node_modules} which isn't on the server" >&2
                  exit 1
              fi
              [ "$(git rev-parse FETCH_HEAD)" = "${node_modules}" ]
              node_modules_package_json="$(git rev-parse "${node_modules}:.package.json")"
              if [ "${package_json}" != "${node_modules_package_json}" ]; then
                  printf "Commit %s package.json and node_modules aren't in sync\n\n" "${commit}" >&2
                  git show --stat "${commit}" >&2
                  exit 1
              fi
          done
