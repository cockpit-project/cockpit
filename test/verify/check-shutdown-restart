#!/usr/bin/python3

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import time

import parent
from testlib import *
from hacklib import *



class TestShutdownRestart(MachineCase):
    provision = {
        "machine1": {"address": "10.111.113.1/20"},
        "machine2": {"address": "10.111.113.2/20"}
    }

    def setUp(self):
        super().setUp()
        self.machine.execute("hostnamectl set-hostname machine1")
        self.machines['machine2'].execute("hostnamectl set-hostname machine2")
        HACK_disable_problematic_preloads(self.machine)
        HACK_disable_problematic_preloads(self.machines['machine2'])

    def testNoAdminGroup(self):
        m = self.machine
        b = self.browser

        self.allow_authorize_journal_messages()
        self.allow_restart_journal_messages()

        # Create a user without any role
        m.execute("useradd user -s /bin/bash -c 'User' || true")
        m.execute("echo user:foobar | chpasswd")

        m.start_cockpit()

        # login
        b.open("/system")
        b.wait_visible("#login")
        b.set_val("#login-user-input", "user")
        b.set_val("#login-password-input", "foobar")
        b.click('#login-button')
        b.expect_load()
        b.enter_page("/system")
        b.wait_present("#restart-button[disabled]")
        b.wait_present("#shutdown-group[disabled]")

        b.logout()

        # now give user direct sudo access
        m.execute("echo 'user ALL=(ALL) ALL' > /etc/sudoers.d/user")
        self.login_and_go("/system", user="user")

        # it takes a while for the permission check to finish, it is always enabled at first
        time.sleep(2)

        # shutdown button should be enabled and working
        b.click("#restart-button")
        b.wait_popup("shutdown-dialog")
        b.wait_in_text("#shutdown-dialog button{0}".format(self.danger_btn_class), 'Restart')
        b.click("#shutdown-dialog .dropdown button")
        b.click("a:contains('No Delay')")
        b.click("#shutdown-dialog button{0}".format(self.danger_btn_class))
        b.switch_to_top()

        b.wait_in_text(".curtains-ct h1", "Disconnected")

        m.wait_reboot()

    def testBasic(self):
        m = self.machine
        b = self.browser

        m2 = self.machines['machine2']
        b2 = self.new_browser(m2)

        m.start_cockpit()

        self.login_and_go("/system")

        # Reboot
        b.click("#restart-button")
        b.wait_popup("shutdown-dialog")
        b.wait_in_text("#shutdown-dialog button{0}".format(self.danger_btn_class), 'Restart')
        b.click("#shutdown-dialog .dropdown button")
        b.click("a:contains('No Delay')")
        b.click("#shutdown-dialog button{0}".format(self.danger_btn_class))
        b.switch_to_top()

        b.wait_in_text(".curtains-ct h1", "Disconnected")

        m.wait_reboot()
        m.start_cockpit()
        b.click("#machine-reconnect")
        b.expect_load()
        b.wait_visible("#login")

        self.allow_restart_journal_messages()
        self.allow_authorize_journal_messages()
        self.allow_journal_messages("Shutdown scheduled for .*")
        self.check_journal_messages()

        m2.start_cockpit()
        b2.login_and_go("/system")

        # Add machine with static IP to m2
        b2.switch_to_top()
        b2.go("/@10.111.113.1")
        b2.wait_visible("#machine-troubleshoot")
        b2.click('#machine-troubleshoot')
        b2.wait_popup('troubleshoot-dialog')
        b2.wait_text('#troubleshoot-dialog {}'.format(self.primary_btn_class), "Add")
        b2.click('#troubleshoot-dialog {}'.format(self.primary_btn_class))
        b2.wait_in_text('#troubleshoot-dialog', "Fingerprint")
        b2.click('#troubleshoot-dialog {}'.format(self.primary_btn_class))
        b2.wait_popdown('troubleshoot-dialog')
        b2.enter_page("/system", host="10.111.113.1")
        b2.wait_text("#system_information_hostname_text", "machine1")

        # Check auto reconnect on restart
        b2.click("#restart-button")
        b2.wait_popup("shutdown-dialog")
        b2.wait_in_text("#shutdown-dialog button{0}".format(self.danger_btn_class), 'Restart')
        b2.click("#shutdown-dialog .dropdown button")
        b2.click("a:contains('No Delay')")
        b2.click("#shutdown-dialog button{0}".format(self.danger_btn_class))
        b2.switch_to_top()

        b2.wait_visible(".curtains-ct")
        b2.wait_visible(".curtains-ct .spinner")
        b2.wait_in_text(".curtains-ct h1", "restarting")

        m.wait_reboot()

        b2.wait_not_visible(".curtains-ct")
        b2.enter_page("/system", host="10.111.113.1", reconnect=False)

        # Power off with invalid date
        self.login_and_go("/system")
        b.enter_page("/system")
        b.click("#shutdown-group")  # caret
        b.click("#shutdown")
        b.wait_popup("shutdown-dialog")
        b.click("#shutdown-dialog .dropdown button")
        b.click("a:contains('Specific Time')")
        b.wait_not_val("#shutdown-dialog input.shutdown-hours", "")
        old = b.val("#shutdown-dialog input.shutdown-hours")
        b.set_val("#shutdown-dialog input.shutdown-hours", "blah")
        b.click("#shutdown-dialog button{0}".format(self.danger_btn_class))
        b.wait_text("#shutdown-dialog .dialog-error", "Invalid time format")

        # Now set a correct time and power off
        b.set_val("#shutdown-dialog input.shutdown-hours", old)
        b.click("#shutdown-dialog button{0}".format(self.danger_btn_class))
        b.switch_to_top()

        # we don't need to wait for the dialog to close here, just the disconnect
        b.wait_in_text(".curtains-ct h1", "Disconnected")

        m.wait_poweroff()


if __name__ == '__main__':
    test_main()
