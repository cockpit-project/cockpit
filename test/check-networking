#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *

class TestNetworking(MachineCase):

    def get_iface(self, m, mac):
        def getit():
            return m.execute("for f in /sys/class/net/*; do a=$(cat $f/address); if test \"$a\" == %s; then echo $(basename $f); fi; done" % mac)
        return wait(getit).strip();

    def testBasic(self):
        b = self.browser
        m = self.machine

        # Something strange is happening here.
        #
        # When hot-plugging the network interface below, it is
        # automatically recognized and NM will create a connection
        # settings object for it with path
        # /org/freedesktop/NetworkManager/Settings/1.  No file in
        # /etc/sysconfig/network-scripts exists for it.  The interface
        # will be activated automatically with those default settings.
        #
        # Calling 'Update' on that object will cause a file to be
        # created in /etc/sysconfig/network-scripts, the connection is
        # activated immediately (so that the actual IP address of the
        # network interface changes), the settings object disappears
        # from D-Bus, and a new object with the same id and uuid
        # appears at /org/freedesktop/NetworkManager/Settings/2.
        #
        # In order to avoid racing against this, we explicitly modify
        # the connection with nmcli so that NetworkManager settles
        # down.

        self.login_and_go("networking", href="/network/interfaces")
        b.wait_in_text("#networking-interfaces", m.address)

        # Add interface, wait for it to be recognized and activated by
        # Network Manager, and switch to its page

        mac = "52:54:00:9e:00:f1"
        label = "test"
        m.execute("echo -e 'TYPE=Ethernet\nHWADDR=%s\nBOOTPROTO=dhcp\n' >/etc/sysconfig/network-scripts/ifcfg-%s" % (mac, label))
        m.execute("nmcli c reload")
        iface = self.get_iface(m, m.add_netiface(mac));

        b.wait_in_text("#networking-interfaces", iface)
        b.wait_in_text("#networking-interfaces tr:contains('%s')" % iface, "bps")
        b.click("#networking-interfaces tr:contains('%s')" % iface)
        b.enter_page("network-interface")

        # Configure a manual IP address
        #
        b.wait_in_text("#network-interface", "IPv4")
        b.click("tr:contains('IPv4') button")
        b.wait_popup("network-ip-settings-dialog")
        b.click("#network-ip-settings-dialog a:contains('Manual')")
        b.set_val('#network-ip-settings-dialog input[placeholder="Address"]', "1.2.3.4")
        b.set_val('#network-ip-settings-dialog input[placeholder*="Netmask"]', "255.255.0.8")
        b.click("#network-ip-settings-dialog button:contains('Apply')")
        b.wait_text_not("#network-ip-settings-error", "")
        b.set_val('#network-ip-settings-dialog input[placeholder*="Netmask"]', "255.255.192.0")
        b.click("#network-ip-settings-dialog button:contains('Apply')")
        b.wait_popdown("network-ip-settings-dialog")
        b.wait_in_text("#network-interface .panel:contains('%s')" % iface, "1.2.3.4/18")

        # Disconnect
        #
        b.click(".panel-heading:contains('%s') button:contains('Off')" % iface)
        b.wait_in_text("tr:contains('Status')", "Inactive")

        # Switch it back to "auto" from the command line and bring it
        # up again
        #
        id = "System %s" % label
        m.execute("nmcli c m '%s' ipv4.method auto" % id)
        m.execute("nmcli c m '%s' ipv4.addresses ''" % id)
        b.wait_in_text("tr:contains('IPv4')", "Automatic (DHCP)")
        m.execute("nmcli c up '%s'" % id)
        b.wait_in_text("tr:contains('Status')", "10.111.111")

    def testBond(self):
        b = self.browser
        m = self.machine

        self.login_and_go("networking", href="/network/interfaces")
        b.wait_in_text("#networking-interfaces", m.address)

        # Add interfaces and wait for them to active
        iface1 = self.get_iface(m, m.add_netiface('f1'));
        iface2 = self.get_iface(m, m.add_netiface('f2'));
        b.wait_in_text("#networking-interfaces", iface1)
        b.wait_in_text("#networking-interfaces", iface2)
        b.wait_in_text("#networking-interfaces tr:contains('%s')" % iface1, "bps")
        b.wait_in_text("#networking-interfaces tr:contains('%s')" % iface2, "bps")

        # Bond them
        b.click("button:contains('Add Bond')")
        b.wait_popup("network-bond-settings-dialog")
        b.set_val("#network-bond-settings-dialog tr:contains('Name') input", "tbond")
        b.set_checked("label:contains('%s') input" % iface1, True)
        b.set_checked("label:contains('%s') input" % iface2, True)
        b.click("#network-bond-settings-dialog button:contains('Apply')")
        b.wait_popdown("network-bond-settings-dialog")
        b.wait_in_text("#networking-interfaces", "tbond")

        # Wait for the bond to be active
        b.click("#networking-interfaces td:first-child:contains('tbond')")
        b.enter_page("network-interface")
        b.wait_in_text("tr:contains('Status')", "10.111.111")

        # Delete the bond
        b.click("#network-interface button:contains('Delete')")
        b.enter_page("networking")
        b.wait_not_in_text("#networking-interfaces", "tbond")

    def testBridge(self):
        b = self.browser
        m = self.machine

        self.login_and_go("networking", href="/network/interfaces")
        b.wait_in_text("#networking-interfaces", m.address)

        # Add interfaces and wait for them to active.  The second
        # interface is connected to a different outside network than
        # the first to avoid a cycle between the "cockpit0" bridge
        # that all VMs are connected to, and the bridge we are
        # creating here.

        iface1 = self.get_iface(m, m.add_netiface('f1'));
        iface2 = self.get_iface(m, m.add_netiface('f2', vlan=1));
        b.wait_in_text("#networking-interfaces", iface1)
        b.wait_in_text("#networking-interfaces", iface2)
        b.wait_in_text("#networking-interfaces tr:contains('%s')" % iface1, "bps")
        b.wait_in_text("#networking-interfaces tr:contains('%s')" % iface2, "Configuring IP")

        # Bridge them
        b.click("button:contains('Add Bridge')")
        b.wait_popup("network-bridge-settings-dialog")
        b.set_val("#network-bridge-settings-dialog tr:contains('Name') input", "tbridge")
        b.set_checked("label:contains('%s') input" % iface1, True)
        b.set_checked("label:contains('%s') input" % iface2, True)
        b.click("#network-bridge-settings-dialog button:contains('Apply')")
        b.wait_popdown("network-bridge-settings-dialog")
        b.wait_in_text("#networking-interfaces", "tbridge")

        # Wait for the bridge to be active.
        b.click("#networking-interfaces td:first-child:contains('tbridge')")
        b.enter_page("network-interface")
        b.wait_in_text("tr:contains('Status')", "10.111.111")

        # Delete the bridge
        b.click("#network-interface button:contains('Delete')")
        b.enter_page("networking")
        b.wait_not_in_text("#networking-interfaces", "tbridge")

test_main()
