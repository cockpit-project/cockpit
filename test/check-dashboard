#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *

class TestDashboard(MachineCase):
    def inject_extras(self, b):
        b.eval_js("""
        dashboard_addresses = function () {
          var addresses = $('#dashboard-hosts .list-group-item').map(function(i,e) { return $(e).data("address"); }).get();
          return addresses;
        }
        """)

    def check_discovered_addresses(self, b, addresses):
        b.click('#dashboard-add')
        b.wait_popup('dashboard_setup_server_dialog')
        self.wait_discovered_addresses (b, addresses)
        b.click('#dashboard_setup_server_dialog button.close')
        b.wait_popdown('dashboard_setup_server_dialog')

    def wait_dashboard_addresses(self, b, expected):
        b.wait_js_func(
            """(function (expected) {
            return expected.sort().toString() == dashboard_addresses().sort().toString();
            })""", expected)

    def wait_discovered_addresses(self, b, expected):
        b.wait_js_func(
            """(function (expected) {
            var actual = $('#dashboard_setup_address_discovered li').map(function(i,e) { return $(e).text() }).get();
            return expected.sort().toString() == actual.sort().toString();
            })""", expected)


    def machine_remove(self, b, address):
        b.click("#dashboard-enable-edit")
        b.click("#dashboard-hosts a[data-address='%s'] button.pficon-delete" % address)

    def add_machine(self, b, address):
        b.click('#dashboard-add')
        b.wait_popup('dashboard_setup_server_dialog')
        b.set_val('#dashboard_setup_address', address)
        self.add_machine_finish(b)

    def add_machine_finish(self, b):
        b.wait_text('#dashboard_setup_next', "Next")
        b.wait_present("#dashboard_setup_next:not([disabled])")
        b.click('#dashboard_setup_next')
        b.wait_text('#dashboard_setup_next', "Add host")
        b.click('#dashboard_setup_next')
        b.wait_text('#dashboard_setup_next', "Close")
        b.click('#dashboard_setup_next')
        b.wait_popdown('dashboard_setup_server_dialog')

    def testBasic(self):
        b = self.browser
        m = self.machine

        m2 = self.new_machine()
        m2.start()
        m2.wait_boot()

        m3 = self.new_machine()
        m3.start()
        m3.wait_boot()

        self.login_and_go("/dashboard")
        self.inject_extras(b)

        self.wait_dashboard_addresses (b, [ "localhost" ])

        # Start second browser and check that it is in sync
        b2 = self.new_browser()
        b2.default_user = "root"
        b2.login_and_go("/dashboard")
        self.inject_extras(b2)
        self.wait_dashboard_addresses (b2, [ "localhost" ])
        b.wait_present("#dashboard-hosts a[data-address='localhost'] button.pficon-delete.disabled")

        self.add_machine (b, m2.address)
        self.wait_dashboard_addresses (b, [ "localhost", m2.address ])
        self.wait_dashboard_addresses (b2, [ "localhost", m2.address ])

        self.add_machine (b, m3.address)
        self.wait_dashboard_addresses (b, [ "localhost", m3.address, m2.address ])
        self.wait_dashboard_addresses (b2, [ "localhost", m3.address, m2.address ])

        # Remove two
        self.machine_remove (b, m2.address)
        self.wait_dashboard_addresses (b, [ "localhost", m3.address ])
        self.wait_dashboard_addresses (b2, [ "localhost", m3.address ])

        self.machine_remove (b, m3.address)
        self.wait_dashboard_addresses (b, [ "localhost" ])
        self.wait_dashboard_addresses (b2, [ "localhost" ])

        # Check that the two removed machines are listed in "Add Host"
        # on both browsers
        self.check_discovered_addresses (b, [ m2.address, m3.address ])
        self.check_discovered_addresses (b2, [ m2.address, m3.address ])

        # Add one back, check addresses on both browsers
        self.add_machine (b, m2.address)
        self.wait_dashboard_addresses (b, [ "localhost", m2.address ])
        self.wait_dashboard_addresses (b2, [ "localhost", m2.address ])
        self.check_discovered_addresses (b, [ m3.address ])
        self.check_discovered_addresses (b2, [ m3.address ])

        # And the second one, check addresses on both browsers
        self.add_machine (b, m3.address)
        self.wait_dashboard_addresses (b, [ "localhost", m2.address, m3.address ])
        self.wait_dashboard_addresses (b2, [ "localhost", m2.address, m3.address ])
        self.check_discovered_addresses (b, [  ])
        self.check_discovered_addresses (b2, [  ])

        # Test switching
        b.leave_page()
        b.wait_js_cond('$("#machine-dropdown ul li").length == 3')
        b.click("#machine-link")
        b.click("#machine-dropdown ul a[data-address='localhost']")
        b.wait_js_cond('window.location.pathname == "/system"')
        b.click("#machine-link")
        b.click("#machine-dropdown ul a[data-address='%s']" % m2.address)
        b.wait_js_cond('window.location.pathname.indexOf("/@%s") === 0' % m2.address)
        b.click("#machine-link")
        b.click("#machine-dropdown ul a[data-address='%s']" % m3.address)
        b.wait_js_cond('window.location.pathname.indexOf("/@%s") === 0' % m3.address)

        self.allow_journal_messages('.*: .* host key for server is not known: .*')

    def testEdit(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/dashboard")
        self.inject_extras(b)
        self.wait_dashboard_addresses (b, [ "localhost" ])
        old_style = b.attr("#dashboard-hosts .list-group-item[data-address='localhost']", "style")

        b.wait_not_visible('#dashboard-hosts a:first-child button.pficon-edit')
        b.click('#dashboard-enable-edit')
        b.wait_visible('#dashboard-hosts a:first-child button.pficon-edit')

        b.click('#dashboard-hosts a:first-child button.pficon-edit')
        b.wait_not_visible('#dashboard-hosts a:first-child button.pficon-edit')

        b.wait_popup('host-edit-dialog')
        b.set_val('#host-edit-name', "Horst")
        b.click('#host-edit-color')
        b.wait_visible('#host-edit-color-popover')
        b.click('#host-edit-color-popover div.popover-content > div:first-child > div:nth-child(3)')
        b.wait_not_visible('#host-edit-color-popover')
        b.click('#host-edit-apply')
        b.wait_popdown('host-edit-dialog')

        b.wait_in_text('#dashboard-hosts a:first-child span.host-label', "Horst")
        b.wait_not_attr("#dashboard-hosts .list-group-item[data-address='localhost']", "style", old_style)

        self.assertEqual(m.execute("hostnamectl --pretty"), "Horst\n")

    def testSetup(self):
        b = self.browser

        # TODO: Make this work as non-root
        b.default_user = "root"

        m1 = self.machine
        m2 = self.new_machine()
        m2.start()
        m2.wait_boot()

        # Create some users on m1 and m2.

        m1.execute("groupadd docker")
        m2.execute("groupadd docker")

        m1.execute("useradd junior -G docker")
        m1.execute("echo foobar | passwd --stdin junior")

        m1.execute("useradd senior -G wheel")
        m1.execute("echo foobar | passwd --stdin senior")
        m2.execute("useradd senior")
        m2.execute("echo barfoo | passwd --stdin senior")

        # Sync them via Setup.

        self.login_and_go("/dashboard")
        self.inject_extras(b)

        self.wait_dashboard_addresses (b, [ "localhost" ])
        b.click('#dashboard-add')
        b.wait_popup('dashboard_setup_server_dialog')
        b.set_val('#dashboard_setup_address', m2.address)
        b.set_checked('#dashboard_setup_address_reuse_creds', False)
        b.wait_text('#dashboard_setup_next', "Next")
        b.click('#dashboard_setup_next')
        b.wait_visible('#dashboard_setup_login_tab')
        b.set_val('#dashboard_setup_login_user', "root")
        b.set_val('#dashboard_setup_login_password', "notthepassword")
        b.click('#dashboard_setup_next')
        b.wait_text('#dashboard_setup_login_error', "Login failed")
        b.set_val('#dashboard_setup_login_password', "foobar")
        b.click('#dashboard_setup_next')
        b.wait_text('#dashboard_setup_next', "Add host")

        b.click('#dashboard_setup_next')
        b.wait_text('#dashboard_setup_next', "Close")
        b.click('#dashboard_setup_next')
        b.wait_popdown('dashboard_setup_server_dialog')

        # Check the result

        def password_hash(machine, user):
            return machine.execute("getent shadow %s | cut -d: -f2" % user)

        def groups(machine, user):
            return machine.execute("groups %s | cut -d: -f2" % user)

        self.assertEqual(password_hash(m1, "junior"),
                         password_hash(m2, "junior"))

        self.assertEqual(password_hash(m1, "senior"),
                         password_hash(m2, "senior"))

        self.assertIn ("docker", groups(m2, "junior"))
        self.assertIn ("wheel", groups(m2, "senior"))

        self.allow_journal_messages('.*: .* host key for server is not known: .*')

test_main()
