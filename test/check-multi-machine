#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *

import socket
import time

def inject_extras(browser):
    browser.eval_js("""
    dashboard_addresses = function () {
       var addresses = $('#dashboard-hosts .list-group-item').map(function(i,e) { return $(e).data("address"); }).get();
       return addresses;
    }
    """)

def wait_dashboard_addresses(b, expected):
    b.wait_js_func(
        """(function (expected) {
        return expected.sort().toString() == dashboard_addresses().sort().toString();
        })""", expected)

def wait_machine_dropdown_addresses(b, expected):
    b.wait_js_func(
        """(function (expected) {
        var dropdown_items = $('#machine-dropdown [data-address]')
        var dropdown_addresses = dropdown_items.map(function (i,e) { return $(e).data("address"); }).get();
        return expected.sort().toString() == dropdown_addresses.sort().toString();
        })""", expected)

def add_machine(b, address):
    b.click('#dashboard-add')
    b.wait_popup('dashboard_setup_server_dialog')
    b.set_val('#dashboard_setup_address', address)
    b.wait_text('#dashboard_setup_next', "Next")
    b.click('#dashboard_setup_next')
    b.wait_text('#dashboard_setup_next', "Add host")
    b.click('#dashboard_setup_next')
    b.wait_text('#dashboard_setup_next', "Close")
    b.click('#dashboard_setup_next')
    b.wait_popdown('dashboard_setup_server_dialog')

def kill_user_admin(machine):
    machine.execute("loginctl kill-user admin")

class TestMultiMachine(MachineCase):
    def setUp(self):
        MachineCase.setUp(self)
        self.machine2 = self.new_machine()
        self.machine2.start()
        self.machine2.wait_boot()
        self.machine2.execute("hostnamectl set-hostname machine2")

        self.machine3 = self.new_machine()
        self.machine3.start()
        self.machine3.wait_boot()
        self.machine3.execute("hostnamectl set-hostname machine3")

    def tearDown(self):
        if self.runner and self.runner.wasSuccessful():
            self.check_journal_messages(self.machine2)
            self.check_journal_messages(self.machine3)
        MachineCase.tearDown(self)

    def testBasic(self):
        b = self.browser
        m1 = self.machine
        m2 = self.machine2
        m3 = self.machine3

        self.login_and_go("/dashboard")
        inject_extras(b)
        wait_dashboard_addresses (b, [ "localhost" ])

        add_machine(b, m2.address)
        wait_dashboard_addresses (b, [ "localhost", m2.address ])

        add_machine(b, m3.address)
        wait_dashboard_addresses (b, [ "localhost", m2.address, m3.address ])

        # TODO: The concrete error message when killing the bridge and
        # session is not predictable.  So we just wait for any error
        # to appear without checking the precise text.  We print the
        # error message, to help with issue #606.
        #
        # https://github.com/cockpit-project/cockpit/issues/606

        kill_user_admin(m2)
        b.wait_attr("#dashboard-hosts a[data-address='%s'] img" % m2.address, 'src', '../shell/images/server-error.png')

        kill_user_admin(m3)
        b.wait_attr("#dashboard-hosts a[data-address='%s'] img" % m3.address, 'src', '../shell/images/server-error.png')

        # Navigating reconnects
        b.click("#dashboard-hosts a[data-address='%s']" % m2.address)
        b.switch_to_top()
        b.wait_js_cond('window.location.pathname != "/dashboard"')
        b.enter_page("/system", host=m2.address)
        b.wait_text_not("#system_information_hostname_button", "")
        b.switch_to_top()
        b.go("/dashboard")
        b.enter_page("/dashboard")
        b.wait_attr("#dashboard-hosts a[data-address='%s'] img" % m2.address, 'src', '../shell/images/server-small.png')

        b.click("#dashboard-hosts a[data-address='%s']" % m3.address)
        b.switch_to_top()
        b.wait_js_cond('window.location.pathname != "/dashboard"')
        b.enter_page("/system", host=m3.address)
        b.wait_text_not("#system_information_hostname_button", "")
        b.switch_to_top()
        b.go("/dashboard")
        b.enter_page("/dashboard")
        b.wait_attr("#dashboard-hosts a[data-address='%s'] img" % m3.address, 'src', '../shell/images/server-small.png')

        self.allow_restart_journal_messages()
        self.allow_journal_messages(".*: .* host key for server is not known: .*",
                                    # Might happen when killing the bridge.
                                    "localhost: dropping message while waiting for child to exit",
                                    "Received message for unknown channel: .*",
                                    ".*: error reading from ssh",
                                    ".*: bridge program failed: Child process exited with code .*")

    def testExternalPage(self):
        b = self.browser
        m1 = self.machine
        m2 = self.machine2

        # Modify the terminals to be different on the two machines.
        m1.needs_writable_usr()
        m1.execute("gunzip -c /usr/share/cockpit/system/terminal.min.html.gz | sed -e 's|</body>|magic-m1-token</body>|' > /usr/share/cockpit/system/terminal.html")
        m2.needs_writable_usr()
        m2.execute("gunzip -c /usr/share/cockpit/system/terminal.min.html.gz | sed -e 's|</body>|magic-m2-token</body>|' > /usr/share/cockpit/system/terminal.html")

        self.login_and_go("/dashboard")
        inject_extras(b)
        add_machine(b, m2.address)
        wait_dashboard_addresses (b, [ "localhost", m2.address ])

        # Switch to the shell and wait for it to also notice m2.
        b.leave_page()
        wait_machine_dropdown_addresses(b, [ "localhost", m2.address ])

        # Once the shell knows about m2, we can navigate to it.
        b.go("/@%s/system/terminal" % m2.address)
        b.enter_page("/system/terminal", host=m2.address)
        b.wait_present("body")
        b.wait_in_text("body", "magic-m2-token")

        b.leave_page()
        b.go("/@localhost/system/terminal")
        b.enter_page("/system/terminal")
        b.wait_present("body")
        b.wait_in_text("body", "magic-m1-token")

    def testFrameNavigation(self):
        b = self.browser
        m1 = self.machine
        m2 = self.machine2

        m2_path = "/@%s/playground/test"% m2.address
        dashboard_path = "/dashboard"

        # Add a machine
        self.login_and_go(None)
        b.go(dashboard_path)
        b.enter_page("/dashboard")
        inject_extras(b)
        add_machine(b, m2.address)
        wait_dashboard_addresses (b, [ "localhost", m2.address ])

        # Check the server image
        b.wait_attr("#dashboard-hosts a[data-address='%s'] img" % m2.address, 'src', '../shell/images/server-small.png')
        b.switch_to_top()

        # Go to the path, remove the image
        inject_extras(b)
        wait_machine_dropdown_addresses(b, [ "localhost", m2.address ])
        b.go(m2_path)
        b.enter_page("/playground/test", m2.address)
        b.wait_present("img[src='hammer.gif']");
        b.click("img[src='hammer.gif']");
        b.switch_to_top()

        # kill admin, lock account
        # kicked to dashboard, server down
        m2.execute('passwd -l admin')
        kill_user_admin(m2)

        b.wait_present(".curtains");
        b.wait_text(".curtains h1", "Couldn't connect to the machine")
        self.assertEqual(b.text(".curtains button"), "Reconnect")

        b.go(dashboard_path)
        b.enter_page("/dashboard")
        b.wait_attr("#dashboard-hosts a[data-address='%s'] img" % m2.address, 'src', '../shell/images/server-error.png')
        b.switch_to_top()

        # navigating there again will fail
        b.go(m2_path)
        b.wait_present(".curtains");
        b.wait_text(".curtains h1", "Couldn't connect to the machine")
        self.assertEqual(b.text(".curtains button"), "Reconnect")
        self.assertTrue(b.is_present(".curtains button:not(.disabled)"))

        # wait for dashboard to load
        b.go(dashboard_path)
        b.enter_page("/dashboard")
        b.wait_attr("#dashboard-hosts a[data-address='%s'] img" % m2.address, 'src', '../shell/images/server-error.png')
        b.switch_to_top()

        # renable admin
        m2.execute('passwd -u admin')

        # path should reconnect at this point
        b.go(m2_path)
        b.enter_page("/playground/test", m2.address, reconnect=True)
        # image is back because it page was reloaded after disconnection
        b.wait_present("img[src='hammer.gif']");
        b.switch_to_top()

        # Dashboard shows it as up
        b.go(dashboard_path)
        b.enter_page("/dashboard")
        b.wait_attr("#dashboard-hosts a[data-address='%s'] img" % m2.address, 'src', '../shell/images/server-small.png')
        b.switch_to_top()

        # Bad host also bounces
        b.go("/@10.0.0.0/playground/test")
        b.wait_present(".curtains");
        self.assertEqual(b.text(".curtains h1"), "Couldn't connect to the machine")
        self.assertEqual(b.text(".curtains p"), "Cannot connect to an unknown machine")

        self.allow_restart_journal_messages()
        self.allow_journal_messages(".*: .* host key for server is not known: .*",
                                    # Might happen when killing the bridge.
                                    "localhost: dropping message while waiting for child to exit",
                                    "Received message for unknown channel: .*",
                                    ".*: error reading from ssh",
                                    ".*: bridge program failed: Child process exited with code .*",
                                    "/playground/test.html: failed to retrieve resource: authentication-failed")

    def testFrameReload(self):
        b = self.browser
        m1 = self.machine
        m2 = self.machine2

        frame = "cockpit1:%s/playground/test" % m2.address
        m2_path = "/@%s/playground/test" % m2.address

        # Add a machine
        self.login_and_go(None)
        b.go("/dashboard")
        b.enter_page("/dashboard")
        inject_extras(b)
        add_machine(b, m2.address)
        wait_dashboard_addresses (b, [ "localhost", m2.address ])

        b.switch_to_top()
        b.go(m2_path)
        b.enter_page("/playground/test", m2.address)

        b.wait_present('#file-content')
        b.wait_text('#file-content', "0")
        b.click("#modify-file")
        b.wait_text('#file-content', "1")


        # load the same page on m1
        b.switch_to_top()
        b.go("/@localhost/playground/test")
        b.enter_page("/playground/test")
        b.wait_present('#file-content')
        b.wait_text('#file-content', "0")

        # go back to m2 and reload frame.
        b.switch_to_top()
        b.go(m2_path)
        b.enter_page("/playground/test", m2.address)
        b.wait_text('#file-content', "1")
        b.switch_to_top()

        b.eval_js('ph_set_attr("iframe[name=\'%s\']", "data-ready", null)' % frame)
        b.eval_js('ph_set_attr("iframe[name=\'%s\']", "src", "../playground/test.html?i=1#/")' % frame)
        b.wait_present("iframe.container-frame[name='%s'][data-ready]" % frame)

        b.enter_page("/playground/test", m2.address)

        b.wait_present('#file-content')
        b.wait_text('#file-content', "1")

        self.allow_journal_messages(".*: .* host key for server is not known: .*")

test_main()
