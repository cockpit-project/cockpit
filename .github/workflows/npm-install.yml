name: npm install runner

on:
  issue_comment:
    types: [created]

jobs:
  start:
    if: ${{ github.event.action == 'created' &&
            github.event.comment.body == '/npm install' }}
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    permissions:
      pull-requests: write
    env:
      GIT_DIR: git-dir.git
      BASE_SHA: ${{ github.sha }}

    steps:
      - name: Interpret comment
        id: interpret
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            if (!('pull_request' in context.payload.issue)) {
                core.setFailed('This command only works in pull requests');
                return;
            }

            // Check the permissions of the sender
            const permission_response = await github.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.payload.sender.login
            });
            const permission = permission_response.data.permission;
            if (permission !== 'admin' && permission !== 'write') {
                await github.reactions.createForIssueComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: context.payload.comment.id,
                    content: 'confused'
                });
                await github.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: '> /npm install\n\nThis command can only be used by users with write access to the repository.'
                });
                core.setFailed(`User ${context.payload.sender.login} has insufficient permissions`);
                return;
            }

            // Figure out what we should be building, exactly.
            const pull_response = await github.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
            });
            core.exportVariable('HEAD_SHA', pull_response.data.head.sha);

            // Indicate that we're about to start work
            await github.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'rocket'
            });

            return 'request-valid';

      - name: Set up work area
        run: |
          set -ux
          git init -b main
          git remote add origin "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"
          git fetch origin "${BASE_SHA}" "${HEAD_SHA}"

      - name: Ensure PR is up to date with package.json on the base branch
        run: git log --exit-code "${BASE_SHA}" --not "${HEAD_SHA}" -- package.json

      - name: Extract package.json
        run: git cat-file blob "${HEAD_SHA}:package.json" > package.json

      - name: Store package.json as output variable
        id: package_json
        uses: actions/github-script@v3
        with:
          script: return require('fs').readFileSync('package.json');
          result-encoding: string

    outputs:
      interpretation: ${{ steps.interpret.outputs.result }}
      package_json: ${{ steps.package_json.outputs.result }}

  build:
    needs: start
    if: ${{ needs.start.result == 'success' }}
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    permissions:
      pull-requests: none
    steps:
      - name: Write package.json
        uses: actions/github-script@v3
        with:
          script: require('fs').writeFileSync("package.json", ${{ toJSON(needs.start.outputs.package_json) }});

      - name: npm install
        run: |
          set -ux

          exec >&2 # close workflow command channel

          container="$(docker create -u node -w /home/node node:14 npm install --ignore-scripts)"
          docker cp package.json "${container}:/home/node/package.json"
          docker start -a "${container}" 2>&1 | tee npm-install.log
          docker cp "${container}:/home/node/package.json" npm-package.json
          docker cp "${container}:/home/node/package-lock.json" package-lock.json
          docker cp "${container}:/home/node/node_modules" - > node_modules.tar
          docker rm -f "${container}"

      - name: Ensure no changes to package.json
        run: diff -u package.json npm-package.json

      - uses: actions/upload-artifact@v2
        name: Create artifact
        with:
          name: npm-install-results
          path: |
            npm-install.log
            package.json
            package-lock.json
            node_modules.tar
          retention-days: 1

  upload:
    needs: [start, build]
    if: ${{ needs.build.result == 'success' }}
    runs-on: ubuntu-20.04
    environment: node-cache upload
    permissions:
      pull-requests: write
    env:
      GIT_DIR: git-dir.git
    steps:
      - name: Set up work area
        run: |
            set -ux

            git init -b main

            git config user.name "GitHub Workflow"
            git config user.email "cockpituous@cockpit-project.org"

            git remote add cache "ssh://git@github.com/${GITHUB_REPOSITORY%/*}/node-cache"

      - name: Write package.json
        uses: actions/github-script@v3
        with:
          script: require('fs').writeFileSync("package.json", ${{ toJSON(needs.start.outputs.package_json) }});

      - uses: actions/download-artifact@v2
        with:
          name: npm-install-results
          path: artifact

      - name: Verify artifact package.json matches request
        run: diff -u package.json artifact/package.json

      - name: Unpack node_modules tar
        run: |
          set -ux
          tar -xf artifact/node_modules.tar --exclude '.git*' node_modules
          rm artifact/node_modules.tar

      - name: Stage git commit
        run: |
          set -ux
          rm artifact/package.json
          mv package.json node_modules/.package.json
          mv artifact/package-lock.json node_modules/.package-lock.json
          cat - artifact/npm-install.log > commit-message <<EOF
          PR: ${{ github.event.issue.html_url }}

          EOF
          rm artifact/npm-install.log
          rmdir artifact
          echo /.cache >> node_modules/.gitignore
          git --work-tree node_modules add --all
          git --work-tree node_modules commit --quiet -F - < commit-message
          rm -rf node_modules

          echo -n "$(git rev-parse HEAD)" > sha
          git tag "sha-$(cat sha)"

      - name: Push git commit
        run: |
          eval $(ssh-agent)
          ssh-add - <<< '${{ secrets.NODE_CACHE_DEPLOY_KEY }}'
          git push cache tag "sha-$(cat sha)"
          ssh-add -D
          ssh-agent -k

      - name: Comment on PR
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');

            body = `> /npm install

            \`node_modules\` rebuild complete.  The following commands will incorporate the changes locally:

            \`\`\`sh
            tools/node-modules checkout ${fs.readFileSync('sha')}
            git commit -om 'node_modules changes' node_modules
            \`\`\`

            ...at which point you should rebase your changes.`;

            await github.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: '+1'
            });
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  fail:
    needs: [start, build, upload]
    if: ${{ failure() && needs.start.outputs.interpretation == 'request-valid' }}
    runs-on: ubuntu-20.04
    permissions:
      pull-requests: write
    steps:
      - name: Write failure comment
        uses: actions/github-script@v4
        with:
          script: |
            await github.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: '-1'
            });
            await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `> /npm install\n\nThe workflow failed.  See here for more information: https://github.com/${owner}/${repo}/actions/runs/${context.runId}`
            });
