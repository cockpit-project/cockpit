#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *

class TestSession(MachineCase):
    def testBasic(self):
        m = self.machine
        b = self.browser

        # TODO: Make this work with non-root
        b.default_user = "root"

        def check_session(should_exist):
            check = check_in if should_exist else check_not_in
            check(m.execute("loginctl list-sessions"), "admin")

        def kill_user_admin():
            # logind from systemd 208 is buggy, so we use systemd directly if it fails
            # https://bugs.freedesktop.org/show_bug.cgi?id=71092
            m.execute("loginctl kill-user admin || systemctl kill user-1000.slice")

        check_session(False)

        # Login
        self.login_and_go("server", "admin")
        check_session(True)

        # Logout
        b.click('#content-user-name')
        b.click('a[onclick*="cockpit_logout"]')
        b.wait_visible("#login")
        check_session(False)

        # Login again
        b.set_val("#login-user-input", "admin")
        b.set_val("#login-password-input", "foobar")
        b.click('#login-button')
        b.wait_page("server")
        check_session(True)

        # Kill session from the outside
        kill_user_admin()
        check_session(False)
        b.relogin("server", "admin")
        check_session(True)

        # TODO: This doesn't work as non-root
        # Kill session from the inside
        # b.click('#content-user-name')
        # b.click('a[onclick*="cockpit_go_login_account"]')
        # b.wait_page("account")
        # b.wait_text("#account-user-name", "admin")
        # b.click("#account-logout")
        # check_session(False)

        self.allow_journal_messages("peer did not close io when expected",
                                    "Error receiving data: Connection reset by peer",
                                    # Might happen when killing the agent.
                                    "localhost: dropping message while waiting for child to exit")


test_main ()
