#!/usr/bin/env python
# This file is part of Cockpit.
#
# Copyright (C) 2017 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import subprocess
import argparse
import socket
import traceback

sys.dont_write_bytecode = True

from task import github
from task import sink

HOSTNAME = socket.gethostname().split(".")[0]
BOTS = os.path.abspath(os.path.dirname(__file__))
BASE = os.path.normpath(os.path.join(BOTS, ".."))

def start_publishing(host, name, revision, context):
        api = github.GitHub()
        identifier = "-".join([
            name.replace("/", "-"),
            revision[0:8],
            context.replace("/", "-")
        ])

        description = "{0} [{1}]".format(github.TESTING, HOSTNAME)

        status = {
            "github": {
                "token": api.token,
                "requests": [
                    # Set status to pending
                    { "method": "POST",
                      "resource": api.qualify("statuses/" + revision),
                      "data": {
                            "state": "pending",
                            "context": context,
                            "description": description,
                            "target_url": ":link"
                        }
                    }
                ],
                "watches": [{
                    "resource": api.qualify("commits/" + revision + "/status"),
                    "result": {
                        "statuses": [
                            {
                                "context": context,
                                "description": description,
                                "target_url": ":link"
                            }
                        ]
                    }
                }]
            },
            "revision": revision,
            "link": "log.html",
            "extras": [ "https://raw.githubusercontent.com/cockpit-project/cockpit/master/bots/task/log.html" ],
            "onaborted": {
                "github": {
                    "token": api.token,
                    "requests": [
                        # Set status to error
                        { "method": "POST",
                          "resource": api.qualify("statuses/" + revision),
                          "data": {
                              "state": "error",
                              "context": context,
                              "description": "NPM Install failed",
                              "target_url": ":link"
                          }
                        }
                    ]
                }
            }
        }

        return sink.Sink(host, identifier, status)

def install(repo, revision, ref, name):
    if ref:
        subprocess.check_call([ "git", "fetch", "origin", ref ])
        subprocess.check_output([ "git", "checkout", "origin/" + ref])

    subprocess.check_output([ "npm", "install", "--save", "git+https://github.com/{0}#{1}".format(repo, revision)])

    subprocess.check_output([ "git", "add", os.path.join(BASE, "package.json")])
    subprocess.check_output(["git", "checkout", "--detach"])

    # Commit the changes, if nothing to commit then there is nothing to test
    try:
        subprocess.check_output([ "git", "commit", "-m", "Testing {}".format(name)])
    except subprocess.CalledProcessError:
        return None

    return subprocess.check_output([ "git", "rev-parse", "HEAD" ]).strip()

def main():
    parser = argparse.ArgumentParser(description='Run cockpit integration tests on a remote dependency')
    parser.add_argument('-j', '--jobs', dest="jobs", type=int,
            default=os.environ.get("TEST_JOBS", 1), help="Number of concurrent jobs")
    parser.add_argument('--rebase', help="Rebase onto the specific branch before testing")
    parser.add_argument('-o', "--offline", action='store_true',
            help="Work offline, don''t fetch new data from origin for rebase")
    parser.add_argument('--publish', dest='publish', default=os.environ.get("TEST_PUBLISH", ""),
            action='store', help='Publish results centrally to a sink')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output')
    parser.add_argument('context', help="The context or type of integration tests to run")
    parser.add_argument('ref', nargs='?', help="The Git remote ref to pull")
    opts = parser.parse_args()

    git_base = github.determine_github_base()
    repo = os.environ.get("GITHUB_BASE", git_base)
    name = os.environ.get("TEST_NAME", "{0}-tests".format(repo))
    revision = os.environ.get("TEST_REVISION")

    if not revision:
        sys.stderr.write("Npm install failed: missing revision\n")
        sys.exit(1)

    active_sink = None
    if opts.publish:
        active_sink = start_publishing(opts.publish, name, revision, opts.context)

    try:
        head = install(repo, revision, opts.ref, name)
    except subprocess.CalledProcessError:
        traceback.print_exc()
        return 1

    if not head:
        sys.stderr.write("Cockpit is already at this version: Nothing to test")
        return 1

    if active_sink:
        active_sink.flush(status={
            "state": "pending",
            "context": opts.context,
            "description": "{0} [{1}]".format(github.TESTING, HOSTNAME),
            "target_url": ":link"
        })


    del os.environ["TEST_REVISION"]

    os.environ["TEST_REVISION"] = head
    os.environ["GITHUB_REVISION"] = revision
    os.environ["GITHUB_KNOWN_ISSUE_BASE"] = git_base
    os.environ["TEST_NAME"] = name

    args = list(sys.argv)
    args[0] = os.path.join(BOTS, "tests-invoke")
    os.execv(args[0], args)
    assert False, "not reached"

if __name__ == '__main__':
    sys.exit(main())
