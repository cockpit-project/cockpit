<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

  <!--
  This file is part of Cockpit.

  Copyright (C) 2013 Red Hat, Inc.

  Cockpit is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 2.1 of the License, or
  (at your option) any later version.

  Cockpit is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with Cockpit; If not, see <http://www.gnu.org/licenses/>.
  -->

  <!--
      com.redhat.Cockpit.ResourceMonitor:
      @short_description: Resource Monitor

      Used to convery resources.
  -->
  <interface name="com.redhat.Cockpit.ResourceMonitor">

    <property name="NumSamples" type="u" access="read"/>
    <property name="NumSeries" type="u" access="read"/>

    <!-- Legends:
         The legend to use for each series.

         This array is #com.redhat.Cockpit.ResourceMonitor:NumSeries long.
    -->
    <property name="Legends" type="as" access="read"/>

    <!--
        GetSamples:
        @options: Currently unused.
        @samples: The samples currently collected.

        Returns (up to) #com.redhat.Cockpit.ResourceMonitor:NumSamples
        historical samples, returning the oldest ones first.
    -->
    <method name="GetSamples">
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="samples" type="a(xad)" direction="out"/>
    </method>

    <!--
        NewSample:
        @timestamp: The point in time the sample was captured (micro-seconds since Epoch).
        @values: An array of values.

        Signal emitted when a new sample has been collected.
    -->
    <signal name="NewSample">
      <arg name="timestamp" type="x"/>
      <arg name="values" type="ad"/>
    </signal>
  </interface>

  <!--
      com.redhat.Cockpit.MultiResourceMonitor:

      @short_description: Monitor for a dynamic set of consumers, such
      as all individual cgroups in a hierarchy.
  -->
  <interface name="com.redhat.Cockpit.MultiResourceMonitor">

    <property name="NumSamples" type="u" access="read"/>
    <property name="NumSeries" type="u" access="read"/>
    <property name="Consumers" type="as" access="read"/>

    <!-- Legends:
         The legend to use for each series.

         This array is #com.redhat.Cockpit.MultiResourceMonitor:NumSeries long.
    -->
    <property name="Legends" type="as" access="read"/>

    <!--
        GetSamples:
        @samples: The samples currently collected.

        Returns (up to) #com.redhat.Cockpit.MultiResourceMonitor:NumSamples
        historical samples, returning the oldest ones first.
    -->
    <method name="GetSamples">
      <arg name="options" type="a{sv}" direction="in"/>
      <arg name="samples" type="a(xa{sad})" direction="out"/>
    </method>

    <!--
        NewSample:
        @timestamp: The point in time the sample was captured (micro-seconds since Epoch).
        @values: A dict with (consumer, array of values) pairs.

        Signal emitted when a new sample has been collected.
    -->
    <signal name="NewSample">
      <arg name="timestamp" type="x"/>
      <arg name="values" type="a{sad}"/>
    </signal>
  </interface>

  <!--
      com.redhat.Cockpit.Job:
      @short_description: Information about running operations.

      This interface is implemented by /com/redhat/Cockpit/Jobs/*

      Domain and Operation are symbolic string that together describe
      the operation.  The following values are defined:

      storage / format-mkfs
      storage / format-erase

  -->

  <interface name="com.redhat.Cockpit.Job">
    <property name="Domain" type="s" access="read"/>
    <property name="Operation" type="s" access="read"/>
    <property name="Targets" type="as" access="read"/>

    <property name="Progress" type="d" access="read"/>
    <property name="ProgressValid" type="b" access="read"/>
    <property name="RemainingUSecs" type="t" access="read"/>

    <property name="Cancellable" type="b" access="read"/>

    <method name="Cancel">
    </method>

  </interface>

  <!--
      com.redhat.Cockpit.Storage.Manager:
      @short_description: For managing storage

      This interface is implemented by /com/redhat/Cockpit/Storage.
  -->
  <interface name="com.redhat.Cockpit.Storage.Manager">

    <property name="HaveUDisks" type="b" access="read"/>
    <property name="HaveStoraged" type="b" access="read"/>

    <!--
        MDRaidCreate:
        @blocks: An array of object paths to objects implementing the #com.redhat.Cockpit.Storage.Block interface.
        @level: The RAID level for the array.
        @name: The name for the array.
        @chunk: The chunk size (in bytes) or 0 if @level is <quote>raid1</quote>.

        Creates a new RAID array on the block devices specified by
        @blocks. Each element in this array must be an object path to
        an object implementing the #org.freedesktop.UDisks2.Block
        interface.

        Known and supported values for @level include
        <quote>raid0</quote>, <quote>raid1</quote>,
        <quote>raid4</quote>, <quote>raid5</quote>,
        <quote>raid6</quote> and <quote>raid10</quote>.

        Before the array is created, all devices in @blocks are
        erased. Once created (but before the method returns), the RAID
        array will be erased.
    -->
    <method name="MDRaidCreate">
      <arg name="blocks" direction="in" type="ao"/>
      <arg name="level" direction="in" type="s"/>
      <arg name="name" direction="in" type="s"/>
      <arg name="chunk" direction="in" type="t"/>
    </method>

    <method name="VolumeGroupCreate">
      <arg name="name" direction="in" type="s"/>
      <arg name="blocks" direction="in" type="ao"/>
    </method>

  </interface>

  <!--
      com.redhat.Cockpit.Storage.Block:
      @short_description: Block device

      This interface is used for objects that are block devices.

      Objects implementing this interface are located in
      <literal>/com/redhat/Cockpit/Storage/block_devices/</literal>.
  -->
  <interface name="com.redhat.Cockpit.Storage.Block">
    <!-- For display only.
    -->
    <property name="Device" type="s" access="read"/>

    <property name="DeviceNumber" type="t" access="read"/>

    <!-- Size: The size of the block device, in bytes. -->
    <property name="Size" type="t" access="read"/>

    <!-- Drive:
         Object path of the #com.redhat.Cockpit.Storage.Drive that this
         block device belongs to if any. If there is no drive, the
         value of this property is '/'.
    -->
    <property name="Drive" type="o" access="read"/>

    <!-- CryptoBackingdevice:
         Object path of the #com.redhat.Cockpit.Storage.Block object that
         is the cryptotext device for this cleartext device.  If there
         is no such object, the value of this property is '/'.
    -->
    <property name="CryptoBackingDevice" type="o" access="read"/>

    <!-- PartitionNumber: The partition number or 0 if not a partition -->
    <property name="PartitionNumber" type="i" access="read"/>

    <!-- PartitionTable: The object path of the top-level block device the partition is a part of, or "/" -->
    <property name="PartitionTable" type="o" access="read"/>

    <!-- PartitionTableType: The type of the partition table on this
         block device, or the empty string if this device does not
         have a partition table.
    -->
    <property name="PartitionTableType" type="s" access="read"/>

    <!-- Partitions: The (object path, offset, size, type) of the
         partitions.  Type is 'p' for primary partitions, 'x' for the
         extended partition, and 'l' for logical partitions inside the
         extended partition.
    -->
    <property name="Partitions" type="a(otts)" access="read"/>

    <!-- IdUsage:
         This corresponds to udisks'
         <ulink url="http://udisks.freedesktop.org/docs/latest/gdbus-org.freedesktop.UDisks2.Block.html#gdbus-property-org-freedesktop-UDisks2-Block.IdUsage">IdUsage</ulink>
         property.
    -->
    <property name="IdUsage" type="s" access="read"/>

    <!-- IdType:
         This corresponds to udisks'
         <ulink url="http://udisks.freedesktop.org/docs/latest/gdbus-org.freedesktop.UDisks2.Block.html#gdbus-property-org-freedesktop-UDisks2-Block.IdType">IdType</ulink>
         property.
    -->
    <property name="IdType" type="s" access="read"/>

    <!-- IdVersion:
         This corresponds to udisks'
         <ulink url="http://udisks.freedesktop.org/docs/latest/gdbus-org.freedesktop.UDisks2.Block.html#gdbus-property-org-freedesktop-UDisks2-Block.IdVersion">IdVersion</ulink>
         property.
    -->
    <property name="IdVersion" type="s" access="read"/>

    <!-- IdLabel:
         This corresponds to udisks'
         <ulink url="http://udisks.freedesktop.org/docs/latest/gdbus-org.freedesktop.UDisks2.Block.html#gdbus-property-org-freedesktop-UDisks2-Block.IdLabel">IdLabel</ulink>
         property.
    -->
    <property name="IdLabel" type="s" access="read"/>

    <!-- IdUUID:
         This corresponds to udisks'
         <ulink url="http://udisks.freedesktop.org/docs/latest/gdbus-org.freedesktop.UDisks2.Block.html#gdbus-property-org-freedesktop-UDisks2-Block.IdUUID">IdUUID</ulink>
         property.
    -->
    <property name="IdUUID" type="s" access="read"/>

    <!-- MDRaid:
         If the block device is a running MD-RAID array, this is set
         to the #org.freedesktop.UDisks2.MDRaid object that it
         correspond to. Is '/' if no such object exists.
      -->
    <property name="MDRaid" type="o" access="read"/>

    <!-- MDRaidMember:
         If the block device is a member of a MD-RAID array, this
         is set to the #org.freedesktop.UDisks2.MDRaid object that it
         correspond to. Is '/' if no such object exists.
      -->
    <property name="MDRaidMember" type="o" access="read"/>

    <property name="LogicalVolume" type="o" access="read"/>

    <property name="PvGroup" type="o" access="read"/>
    <property name="PvSize" type="t" access="read"/>
    <property name="PvFreeSize" type="t" access="read"/>

    <property name="MountPoint" type="s" access="read"/>
    <property name="MountOptions" type="s" access="read"/>
    <property name="MountedAt" type="as" access="read"/>

    <property name="CryptoOptions" type="s" access="read"/>

    <property name="HintIgnore" type="b" access="read"/>

    <property name="ReadOnly" type="b" access="read"/>

    <method name="Format">
      <arg name="type" direction="in" type="s"/>
      <arg name="erase" direction="in" type="s"/>
      <arg name="label" direction="in" type="s"/>
      <arg name="passphrase" direction="in" type="s"/>
      <arg name="mount_point" direction="in" type="s"/>
      <arg name="mount_options" direction="in" type="s"/>
      <arg name="crypto_options" direction="in" type="s"/>
      <arg name="crypto_passphrase" direction="in" type="s"/>
    </method>

    <method name="CreatePartition">
      <arg name="offset" direction="in" type="t"/>
      <arg name="size" direction="in" type="t"/>
      <arg name="type" direction="in" type="s"/>
      <arg name="erase" direction="in" type="s"/>
      <arg name="label" direction="in" type="s"/>
      <arg name="passphrase" direction="in" type="s"/>
      <arg name="mount_point" direction="in" type="s"/>
      <arg name="mount_options" direction="in" type="s"/>
      <arg name="crypto_passphrase" direction="in" type="s"/>
      <arg name="crypto_options" direction="in" type="s"/>
    </method>

    <method name="DeletePartition">
    </method>

    <method name="Mount">
    </method>

    <method name="Unmount">
    </method>

    <method name="Lock">
    </method>

    <method name="Unlock">
      <arg name="passphrase" direction="in" type="s"/>
    </method>

    <method name="SetFilesystemOptions">
      <arg name="label" direction="in" type="s"/>
      <arg name="mount_point" direction="in" type="s"/>
      <arg name="mount_options" direction="in" type="s"/>
    </method>

    <method name="SetCryptoOptions">
      <arg name="crypto_passphrase" direction="in" type="s"/>
      <arg name="crypto_options" direction="in" type="s"/>
    </method>

    <method name="GetCryptoPassphrase">
      <arg name="passphrase" direction="out" type="s"/>
    </method>

  </interface>

  <!--
      com.redhat.Cockpit.Storage.Drive:
      @short_description: Disk or Drive

      This interface is used for block devices that correspond to
      physical hard disks or disk drives (or at least, appear to the
      OS in that way).

      Objects implementing this interface are located in
      <literal>/com/redhat/Cockpit/Storage/drives</literal>.
  -->
  <interface name="com.redhat.Cockpit.Storage.Drive">
    <!-- Vendor: A name for the vendor of the drive or blank if unknown. -->
    <property name="Vendor" type="s" access="read"/>

    <!-- Model: A name for the model of the drive or blank if unknown. -->
    <property name="Model" type="s" access="read"/>

    <!-- Revision: Firmware Revision or blank if unknown. -->
    <property name="Revision" type="s" access="read"/>

    <!-- Serial: Serial number of the drive or blank if unknown. -->
    <property name="Serial" type="s" access="read"/>

    <!-- Size: Size of the disk or media (0 if no media is present). -->
    <property name="Size" type="t" access="read"/>

    <!-- Classification:
         A high-level classification of the drive.

         Known values include "ssd", "hdd", "optical" and "removable". Blank if unknown.
    -->
    <property name="Classification" type="s" access="read"/>

    <!-- Name:
         A name for the drive suitable for presentation.

         This name includes the serial number (or similar data) so it
         is suitable to use when there are a lot of drives with the
         same #com.redhat.Cockpit.Storage.Drive:Vendor and
         #com.redhat.Cockpit.Storage.Drive:Model.
    -->
    <property name="Name" type="s" access="read"/>

    <!-- WWN:
         The <ulink
         url="http://en.wikipedia.org/wiki/World_Wide_Name">World Wide
         Name</ulink> of the drive or blank if unknown.
    -->
    <property name="WWN" type="s" access="read"/>

    <!-- SortKey:
         A string that can be used for sorting drive objects.
    -->
    <property name="SortKey" type="s" access="read"/>

    <!-- Temperature: The temperature of the disk in degrees Kelvin (0 if unknown). -->
    <property name="Temperature" type="d" access="read"/>

    <!-- Failing:
         An assessment from the disk itself of whether it is currently failing (%FALSE if unknown).

         The value of this property should be ignored unless
         #com.redhat.Cockpit.Storage.Drive:FailingValid is %TRUE.
    -->
    <property name="Failing" type="b" access="read"/>

    <!-- FailingValid:
         If this is %FALSE, the value of the
         #com.redhat.Cockpit.Storage.Drive:Failing property should be
         ignored..
    -->
    <property name="FailingValid" type="b" access="read"/>
  </interface>

  <!--
      com.redhat.Cockpit.Storage.MDRaid:
      @short_description: mdraid device

      This interface is used for objects that are mdraid devices.

      Objects implementing this interface are located in
      <literal>/com/redhat/Cockpit/Storage/mdraids/</literal>.
  -->
  <interface name="com.redhat.Cockpit.Storage.MDRaid">
    <!-- UUID:
         The UUID of the array.
    -->
    <property name="UUID" type="s" access="read"/>

    <!-- Name:
         The name of the array (TODO: homehost etc).
    -->
    <property name="Name" type="s" access="read"/>

    <!-- Level:
         The RAID level.

         Known values include <literal>raid0</literal>, <literal>raid1</literal>, <literal>raid4</literal>, <literal>raid5</literal>, <literal>raid6</literal> and <literal>raid10</literal>.
    -->
    <property name="Level" type="s" access="read"/>

    <!-- NumDevices:
         Number of devices that are part of the array.
    -->
    <property name="NumDevices" type="u" access="read"/>

    <!-- Size:
         The size of the array or 0 if unknown.

         This is the usable size, e.g. for a RAID-5 array backed by 4
         1TB disks, this will be approximately 3 TB.
    -->
    <property name="Size" type="t" access="read"/>

    <!-- SyncAction:
         The current state of the array or empty if the array is not
         running or if the array does not have any redundancy
         (e.g. RAID-0 or linear).

         Use the org.freedesktop.UDisks2.MDRaid.RequestSyncAction()
         method to change this.

         This property corresponds to the
         <literal>sync_action</literal> sysfs file, see the
         <filename><ulink url="http://www.kernel.org/doc/Documentation/md.txt">Documentation/md.txt</ulink></filename>
         file shipped with the kernel sources.
    -->
    <property name="SyncAction" type="s" access="read"/>

    <!-- SyncCompleted:
         The fraction or sectors completed (always between <constant>0.0</constant> and <constant>1.0</constant>) in the sync operation or 0.0 if no operation is in progress.

         This property corresponds to the
         <literal>sync_completed</literal> sysfs file, see the
         <filename><ulink url="http://www.kernel.org/doc/Documentation/md.txt">Documentation/md.txt</ulink></filename>
         file shipped with the kernel sources.
    -->
    <property name="SyncCompleted" type="d" access="read"/>

    <!-- SyncRate:
         The rate (or speed) at which the sync operation takes
         place. It is averaged over the last 30 seconds and measured
         in bytes per second.

         If the rate is unknown or no operation is in progress, the
         value of this property is 0.

         This property corresponds to the
         <literal>sync_speed</literal> sysfs file, see the
         <filename><ulink url="http://www.kernel.org/doc/Documentation/md.txt">Documentation/md.txt</ulink></filename>
         file shipped with the kernel sources.
    -->
    <property name="SyncRate" type="t" access="read"/>

    <!-- SyncRemainingTime:
         The estimated number of micro-seconds until the operation is
         finished

         If the amount of remaining time is unknown or no operation is
         in progress, the value of this property is 0.

         This property is based on the value of the
         <literal>sync_speed</literal> sysfs file, see the
         <filename><ulink url="http://www.kernel.org/doc/Documentation/md.txt">Documentation/md.txt</ulink></filename>
         file shipped with the kernel sources.
    -->
    <property name="SyncRemainingTime" type="t" access="read"/>

    <!-- Degraded:
         Number of devices by which the array is degraded (0 if not degraded or not running).

         This property corresponds to the
         <literal>degraded</literal> sysfs file, see the
         <filename><ulink url="http://www.kernel.org/doc/Documentation/md.txt">Documentation/md.txt</ulink></filename>
         file shipped with the kernel sources.
    -->
    <property name="Degraded" type="u" access="read"/>

    <!-- BitmapLocation:
         The location of a write-intent bitmap (empty if the array is not running), if any.

         If the RAID array does not suppor write-intent bitmaps (for
         example RAID-0 arrays), this is empty.

         This property corresponds to the
         <literal>bitmap/location</literal> sysfs file, see the
         <filename><ulink url="http://www.kernel.org/doc/Documentation/md.txt">Documentation/md.txt</ulink></filename>
         file shipped with the kernel sources.
    -->
    <property name="BitmapLocation" type="s" access="read"/>

    <!-- ChunkSize:
         The chunk size (0 if the array is not running or not using striping).

         This property corresponds to the
         <literal>chunk_size</literal> sysfs file, see the
         <filename><ulink url="http://www.kernel.org/doc/Documentation/md.txt">Documentation/md.txt</ulink></filename>
         file shipped with the kernel sources.
    -->
    <property name="ChunkSize" type="t" access="read"/>

    <property name="ActiveDevices" type="a(oiast)" access="read"/>

    <method name="Start"/>

    <method name="Stop"/>

    <method name="Delete">
    </method>

    <method name="RequestSyncAction">
      <arg name="sync_action" type="s" direction="in"/>
    </method>

    <method name="SetBitmapLocation">
      <arg name="value" direction="in" type="s"/>
    </method>

    <method name="RemoveDevices">
      <arg name="devices" direction="in" type="ao"/>
    </method>

    <method name="AddDevices">
      <arg name="devices" direction="in" type="ao"/>
    </method>

  </interface>

  <!--
      com.redhat.Cockpit.Storage.VolumeGroup:
      @short_description: A volume group

      Objects implementing this interface are located in
      <literal>/com/redhat/Cockpit/Storage/lvm/.
  -->
  <interface name="com.redhat.Cockpit.Storage.VolumeGroup">
    <property name="UUID" type="s" access="read"/>
    <property name="Name" type="s" access="read"/>
    <property name="Size" type="t" access="read"/>
    <property name="FreeSize" type="t" access="read"/>

    <property name="NeedsPolling" type="b" access="read"/>
    <method name="Poll">
    </method>

    <method name="Delete">
    </method>

    <method name="Rename">
      <arg name="new_name" type="s" direction="in"/>
    </method>

    <method name="AddDevice">
      <arg name="block" type="o" direction="in"/>
    </method>

    <method name="EmptyDevice">
      <arg name="block" type="o" direction="in"/>
    </method>

    <method name="RemoveDevice">
      <arg name="block" type="o" direction="in"/>
    </method>

    <method name="CreatePlainVolume">
      <arg name="name" type="s" direction="in"/>
      <arg name="size" type="t" direction="in"/>
    </method>

    <method name="CreateThinPoolVolume">
      <arg name="name" type="s" direction="in"/>
      <arg name="size" type="t" direction="in"/>
    </method>

    <method name="CreateThinVolume">
      <arg name="name" type="s" direction="in"/>
      <arg name="size" type="t" direction="in"/>
      <arg name="pool" type="o" direction="in"/>
    </method>

  </interface>

  <!--
      com.redhat.Cockpit.Storage.LogicalVolume:
      @short_description: A logical volume

      Objects implementing this interface are located in
      <literal>/com/redhat/Cockpit/Storage/lvm/<VG>/.
  -->
  <interface name="com.redhat.Cockpit.Storage.LogicalVolume">
    <property name="UUID" type="s" access="read"/>
    <property name="Name" type="s" access="read"/>
    <property name="VolumeGroup" type="o" access="read"/>
    <property name="Size" type="t" access="read"/>
    <property name="Active" type="b" access="read"/>
    <property name="DataAllocatedRatio" type="d" access="read"/>
    <property name="MetadataAllocatedRatio" type="d" access="read"/>
    <property name="Type" type="s" access="read"/>

    <property name="ThinPool" type="o" access="read"/>
    <property name="Origin" type="o" access="read"/>

    <method name="Activate">
    </method>

    <method name="Deactivate">
    </method>

    <method name="Delete">
    </method>

    <method name="Rename">
      <arg name="new_name" type="s" direction="in"/>
    </method>

    <method name="Resize">
      <arg name="new_size" type="t" direction="in"/>
      <arg name="options" type="a{sv}" direction="in"/>
    </method>

    <method name="CreateSnapshot">
      <arg name="name" type="s" direction="in"/>
      <arg name="size" type="t" direction="in"/>
    </method>

  </interface>

  <interface name="com.redhat.Cockpit.Services">
    <method name="ListServices">
      <!-- (name,description,load_state,active_state,sub_state,file_state) -->
      <arg name="services" type="a(ssssss)" direction="out"/>
    </method>

    <signal name="ServiceUpdate">
      <arg name="service" type="(ssssss)" direction="out"/>
    </signal>

    <signal name="ServiceUpdateAll">
    </signal>

    <method name="GetServiceInfo">
      <arg name="name" type="s" direction="in"/>
      <arg name="info" type="a{sv}" direction="out"/>
    </method>

    <method name="ServiceAction">
      <arg name="name" type="s" direction="in"/>
      <arg name="action" type="s" direction="in"/>
    </method>

  </interface>

</node>
