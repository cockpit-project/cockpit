#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import os.path
import tempfile
import shutil
import glob

import parent
from testlib import *


@skipImage("No sosreport", "continuous-atomic", "debian-stable", "debian-testing", "ubuntu-1804", "ubuntu-stable")
class TestSOS(MachineCase):

    def testBasic(self):
        b = self.browser

        self.login_and_go("/sosreport")

        b.click('[data-target="#sos"]')
        b.wait_visible("#sos")

        with b.wait_timeout(360):
            b.wait_visible("#sos-download")

        download_dir = tempfile.mkdtemp()
        self.addCleanup(shutil.rmtree, download_dir)
        b.cdp.invoke("Page.setDownloadBehavior", behavior="allow", downloadPath=download_dir)

        b.click("#sos-download button")
        # while the download is ongoing, it will have an *.xz.tmpsuffix name, gets renamed to *.xz when done
        wait(lambda: len(glob.glob(os.path.join(download_dir, "sosreport-*.xz"))) > 0)
        report = glob.glob(os.path.join(download_dir, "sosreport-*.xz"))[0]
        self.assertGreater(os.path.getsize(report), 1000000)

        self.allow_journal_messages('.*comm="sosreport".*')

    @skipImage("Not supported", "continuous-atomic", "fedora-atomic", "rhel-atomic")
    def testAppStream(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/apps")
        b.wait_not_present(".app-list-empty .spinner")
        if m.image.startswith("fedora-"):
            b.wait_present(".app-list tr:contains('Diagnostic Reports')")
            b.wait_present(".app-list tr:contains('Diagnostic Reports') button:contains('Remove')")
        else:
            b.wait_not_present(".app-list tr:contains('Diagnostic Reports')")

if __name__ == '__main__':
    test_main()
