#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2018 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import parent
import time
from testlib import *


def wait_unit_state(machine, unit, state):

    def active_state(unit):
        # HACK: don't use `systemctl is-active` here because of
        #   https://bugzilla.redhat.com/show_bug.cgi?id=1073481
        # Also, use `systemctl --value` once that exists everywhere
        line = machine.execute("systemctl show -p ActiveState {}".format(unit))
        return line.strip().split("=")[1]

    wait(lambda: active_state(unit) == state, delay=0.2)


@skipImage("enabling firewall got fixed in PR #10511", "rhel-7-6-distropkg")
class TestFirewall(MachineCase):

    def testNetworkingPage(self):
        b = self.browser
        m = self.machine

        m.execute("systemctl stop firewalld")

        self.login_and_go("/network")
        b.wait_visible("#networking-firewall")
        b.wait_in_text("#networking-firewall-switch label.active", "Off")

        # to toggle the switch, click on the non-active label, where the slider is
        b.click("#networking-firewall-switch label:not(.active)")
        b.wait_present("#networking-firewall-switch label.active:not(.disabled)")
        b.wait_in_text("#networking-firewall-switch label.active", "On")
        wait_unit_state(m, "firewalld", "active")
        active_rules = m.execute("firewall-cmd --list-services").split()
        b.wait_in_text("#networking-firewall-summary", "{} Active Rule".format(len(active_rules)))

        b.click("#networking-firewall-switch label:not(.active)")
        b.wait_present("#networking-firewall-switch label.active:not(.disabled)")
        b.wait_in_text("#networking-firewall-switch label.active", "Off")
        wait_unit_state(m, "firewalld", "inactive")
        b.wait_in_text("#networking-firewall-summary", "0 Active Rules")

        # toggle the service from CLI, page should react
        m.execute("systemctl start firewalld")
        b.wait_in_text("#networking-firewall-switch label.active", "On")
        b.wait_in_text("#networking-firewall-summary", "{} Active Rule".format(len(active_rules)))
        m.execute("systemctl stop firewalld")
        b.wait_in_text("#networking-firewall-switch label.active", "Off")
        b.wait_in_text("#networking-firewall-summary", "0 Active Rules")

        b.click("#networking-firewall-link")
        b.enter_page("/network/firewall")

        b.click(".breadcrumb li:first a")
        b.enter_page("/network")

    def testFirewallPage(self):
        b = self.browser
        m = self.machine

        m.execute("systemctl stop firewalld")
        self.login_and_go("/network/firewall")

        # "Add Services" button should not be present
        b.wait_not_present("caption button.btn-primary")

        # to toggle the switch, click on the non-active label, where the slider is
        b.wait_present(".btn-onoff-ct label.active")
        b.wait_in_text(".btn-onoff-ct label.active", "Off")
        b.click(".btn-onoff-ct label.active span")
        b.wait_present(".btn-onoff-ct label.active:not(.disabled)")
        b.wait_in_text(".btn-onoff-ct label.active", "On")
        wait_unit_state(m, "firewalld", "active")

        # "Add Services" button should be enabled
        b.wait_present("caption button.btn-primary:enabled")

        # ensure that pop3 is not enabled (shouldn't be on any of our images),
        # so that we can use it for testing
        b.wait_not_present("tr[data-row-id='pop3']")

        m.execute("firewall-cmd --add-service=pop3")
        b.wait_present("tr[data-row-id='pop3']")

        # all services should be shown after the one we added above is
        # visible, so do a basic sanity check now
        active_rules = m.execute("firewall-cmd --list-services").split()
        b.call_js_func("ph_count_check", "tr.listing-ct-item", len(active_rules))

        b.click("tr[data-row-id='pop3'] .listing-ct-toggle")
        b.wait_in_text("tbody.open tr.listing-ct-panel", "Post Office Protocol")

        b.click("tr[data-row-id='pop3'] .btn.pficon-delete")
        b.wait_not_present("tr[data-row-id='pop3']")
        self.assertNotIn('pop3', m.execute("firewall-cmd --list-services").split())

        # Test that service without name is shown properly
        if m.image != "rhel-7-6-distropkg": # Fixed in #11318
            m.execute("firewall-cmd --permanent --new-service=empty && firewall-cmd --reload && firewall-cmd --add-service=empty")
            b.wait_present("tr[data-row-id='empty']")

        # switch service off again
        b.click(".btn-onoff-ct label.active span")
        b.wait_present(".btn-onoff-ct label.active:not(.disabled)")
        b.wait_in_text(".btn-onoff-ct label.active", "Off")
        wait_unit_state(m, "firewalld", "inactive")
        # "Add Services" button should be hidden again
        b.wait_not_present("caption button.btn-primary")

    @skipImage("Filtering got fixed, and IDs changed to data-id in 184", "rhel-7-6-distropkg")
    def testAddServices(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/network/firewall")

        # click on the "Add Services" button
        b.wait_present("caption button.btn-primary:enabled")
        b.click("caption button.btn-primary")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")

        # filter for pop3
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.set_input_text("#filter-services-input", "pop")
        b.wait_not_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")
        self.assertIn("TCP: 110", b.text("#cockpit_modal_dialog .list-view-pf .list-group-item:first-child small"))
        self.assertNotIn("UDP", b.text("#cockpit_modal_dialog .list-view-pf .list-group-item:first-child small"))
        # clear filter
        b.set_input_text("#filter-services-input", "")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")

        # filter for port 110
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.set_input_text("#filter-services-input", "110")
        b.wait_not_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")
        self.assertIn("TCP: 110", b.text("#cockpit_modal_dialog .list-view-pf .list-group-item:first-child small"))
        self.assertNotIn("UDP", b.text("#cockpit_modal_dialog .list-view-pf .list-group-item:first-child small"))
        # clear filter
        b.set_input_text("#filter-services-input", "")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")

        # don't select anything in the dialog
        b.wait_present("#add-services-dialog .modal-footer .btn-primary")
        b.click("#add-services-dialog .modal-footer .btn-primary")
        b.wait_not_present("#cockpit_modal_dialog")

        # now add pop3
        b.wait_present("caption button.btn-primary:enabled")
        b.click("caption button.btn-primary")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")
        b.click("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")
        b.click("#add-services-dialog .modal-footer .btn-primary")
        b.wait_not_present("#cockpit_modal_dialog")
        b.wait_present("tr[data-row-id='pop3']")

        # pop3 should now not appear any more in Add Services dialog
        b.click("caption button.btn-primary")
        b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='imap']")
        b.wait_not_present("#cockpit_modal_dialog .list-view-pf input[data-id='pop3']")
        b.click("#add-services-dialog .modal-footer .btn-cancel")
        b.wait_not_present("#cockpit_modal_dialog")

        # Service without name should appear in the dialog
        if m.image != "rhel-7-6-distropkg": # Fixed in #11318
            m.execute("firewall-cmd --permanent --new-service=empty && firewall-cmd --reload")
            b.click("caption button.btn-primary")
            b.wait_present("#cockpit_modal_dialog .list-view-pf input[data-id='empty']")

    @skipImage("Custom ports were introduced in #11420", "rhel-7-6-distropkg")
    def testAddCustomServices(self):
        b = self.browser

        self.login_and_go("/network/firewall")


        def open_dialog():
            b.wait_present("caption button.btn-primary:enabled")
            b.click("caption button.btn-primary")
            b.wait_present("#add-services-dialog input[value='ports']:enabled")
            b.click("#add-services-dialog input[value='ports']")
            b.wait_present("#tcp-ports")
            b.wait_visible("#tcp-ports")

        def set_field(sel, val, expected):
            b.set_input_text(sel, val)
            b.wait_val("#service-name", expected)

        def check_error(text):
            b.wait_present(".has-error:contains({0})".format(text))
            b.wait_visible(".has-error:contains({0})".format(text))

        def save(identifier, name, tcp, udp):
            b.click("button:contains(Add Ports)")
            b.wait_not_present("#add-services-dialog")
            line_sel = "tr[data-row-id='{0}']".format(identifier)
            b.wait_present(line_sel)
            b.wait_in_text(line_sel, "".join([name, tcp, udp]))

        open_dialog()
        set_field("#tcp-ports", "80", "WorldWideWeb HTTP")
        set_field("#tcp-ports", "", "")
        set_field("#tcp-ports", "80,7", "http, echo")
        set_field("#udp-ports", "194", "http, echo, irc")
        set_field("#udp-ports", "194,   50000", "http, echo, irc...")
        set_field("#tcp-ports", "", "irc, 50000")
        set_field("#tcp-ports", "https", "https, irc, 50000")
        save("custom--https-irc-50000", "https, irc, 50000", "443", "194, 50000")

        open_dialog()
        set_field("#tcp-ports", "80-82", "80-82")
        set_field("#tcp-ports", "80-82, echo", "80-82, echo")
        set_field("#udp-ports", "ntp-irc", "80-82, echo, 123-194")
        set_field("#udp-ports", "83-ntp", "80-82, echo, 83-123")
        set_field("#udp-ports", "83-ntp, irc", "80-82, echo, 83-123...")
        save("custom--80-82-echo-83-123-irc", "80-82, echo, 83-123...", "80-82, 7", "83-123, 194")

        open_dialog()
        set_field("#tcp-ports", "80", "WorldWideWeb HTTP")
        b.set_input_text("#service-name", "I am persistent")
        b.set_input_text("#tcp-ports", "7")
        time.sleep(5) # We need to validate that the service name did not change
        b.wait_val("#service-name", "I am persistent")
        save("custom--echo", "I am persistent", "7", "")

        open_dialog()
        set_field("#tcp-ports", "500000", "")
        check_error("Invalid port number")
        set_field("#tcp-ports", "-1", "")
        check_error("Invalid port number")
        set_field("#tcp-ports", "8a", "")
        check_error("Unknown service name")
        set_field("#tcp-ports", "foobar", "")
        check_error("Unknown service name")
        set_field("#tcp-ports", "80-80", "")
        check_error("Range must be strictly ordered")
        set_field("#tcp-ports", "80-79", "")
        check_error("Range must be strictly ordered")
        set_field("#tcp-ports", "https-http", "")
        check_error("Range must be strictly ordered")
        set_field("#tcp-ports", "80-90-", "")
        check_error("Invalid range")
        set_field("#tcp-ports", "80-90-100", "")
        check_error("Invalid range")


if __name__ == '__main__':
    test_main()
