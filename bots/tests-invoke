#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2016 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
import subprocess
import socket
import sys
import time
import traceback

sys.dont_write_bytecode = True

import github
import sink

HOSTNAME = socket.gethostname().split(".")[0]
BOTS = os.path.abspath(os.path.dirname(__file__))
BASE = os.path.normpath(os.path.join(BOTS, ".."))
DEVNULL = open("/dev/null", "r+")

def main():
    parser = argparse.ArgumentParser(description='Run integration tests')
    parser.add_argument('-j', '--jobs', dest="jobs", type=int,
            default=os.environ.get("TEST_JOBS", 1), help="Number of concurrent jobs")
    parser.add_argument('--rebase', help="Rebase onto the specific branch before testing")
    parser.add_argument('-o', "--offline", action='store_true',
            help="Work offline, don''t fetch new data from origin for rebase")
    parser.add_argument('--publish', dest='publish', default=os.environ.get("TEST_PUBLISH", ""),
            action='store', help='Publish results centrally to a sink')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output')
    parser.add_argument('context', help="The context or type of integration tests to run")
    parser.add_argument('ref', nargs='?', help="The Git remote ref to pull")
    opts = parser.parse_args()

    name = os.environ.get("TEST_NAME", "tests")
    revision = os.environ.get("TEST_REVISION")

    try:
        task = PullTask(name, revision, opts.ref, opts.context, opts.rebase)
        ret = task.run(opts)
    except RuntimeError, ex:
        ret = str(ex)

    if ret:
        sys.stderr.write("tests-invoke: {0}\n".format(ret))
        return 1
    return 0

class PullTask(object):
    def __init__(self, name, revision, ref, context, base=None):
        self.name = name
        self.revision = revision
        self.ref = ref
        self.context = context
        self.base = base
        self.respawn = False

        self.sink = None
        self.github_status_data = None

    def start_publishing(self, host):
        api = github.GitHub()
        identifier = "-".join([
            self.name,
            self.revision[0:8],
            self.context.replace("/", "-")
        ])

        description = "{0} [{1}]".format(github.TESTING, HOSTNAME)

        self.github_status_data = {
            "state": "pending",
            "context": self.context,
            "description": description,
            "target_url": ":link"
        }

        status = {
            "github": {
                "token": api.token,
                "requests": [
                    # Set status to pending
                    { "method": "POST",
                      "resource": api.qualify("statuses/" + self.revision),
                      "data": self.github_status_data
                    }
                ],
                "watches": [{
                    "resource": api.qualify("commits/" + self.revision + "/status"),
                    "result": {
                        "statuses": [
                            {
                                "context": self.context,
                                "description": description,
                                "target_url": ":link"
                            }
                        ]
                    }
                }]
            },
            "revision": self.revision,
            "link": "log.html",
            "extras": [ "https://raw.githubusercontent.com/cockpit-project/cockpit/master/test/common/log.html" ],

            "onaborted": {
                "github": {
                    "token": api.token,
                    "requests": [
                        # Set status to error
                        { "method": "POST",
                          "resource": api.qualify("statuses/" + self.revision),
                          "data": {
                              "state": "error",
                              "context": self.context,
                              "description": "Aborted without status",
                              "target_url": ":link"
                          }
                        }
                    ]
                },
            }
        }

        # Include information about which base we're testing against
        if self.base:
            commit = subprocess.check_output([ "git", "rev-parse", "origin/" + self.base ]).strip()
            status["base"] = commit

        (prefix, unused, image) = self.context.partition("/")
        if not self.base:
            status['irc'] = { }    # Only send to IRC when master

        # For other scripts to use
        os.environ["TEST_DESCRIPTION"] = description
        self.sink = sink.Sink(host, identifier, status)

    def rebase(self, offline=False):
        origin_base = "origin/" + self.base

        # Rebase this branch onto the base, but only if it's not already an ancestor
        try:
            if subprocess.call([ "git", "merge-base", "--is-ancestor", origin_base, "HEAD" ]) != 0:
                sys.stderr.write("Rebasing onto " + origin_base + " ...\n")
                subprocess.check_call([ "git", "rebase", origin_base ])
                self.respawn = True
        except subprocess.CalledProcessError:
            subprocess.call([ "git", "rebase", "--abort" ])
            traceback.print_exc()
            return "Rebase failed"

        # If the bots directory doesn't exist in this branch, check it out from master
        ret = subprocess.call([ "git", "ls-tree", "-d", "HEAD:bots/"], stdout=DEVNULL)
        if ret == 0:
            return None
        try:
            sys.stderr.write("Checking out bots directory from master ...\n")
            subprocess.check_call([ "git", "checkout", "--force", "origin/master", "--", "bots/" ])
            self.respawn = True
        except:
            traceback.print_exc()
            return "Rebase checkout of bots failed"

        return None

    def stop_publishing(self, ret):
        sink = self.sink
        def mark_failed():
            if "github" in sink.status:
                self.github_status_data["state"] = "failure"
            if "irc" in sink.status: # Never send success messages to IRC
                sink.status["irc"]["channel"] = "#cockpit"
        def mark_passed():
            if "github" in sink.status:
                self.github_status_data["state"] = "success"
        def mark_respawn():
            if "github" in sink.status:
                self.github_status_data["state"] = "pending"
        if isinstance(ret, basestring):
            message = ret
            mark_failed()
        elif ret is None:
            message = "Rebased"
            mark_respawn()
        elif ret == 0:
            message = "Tests passed"
            mark_passed()
        else:
            message = "{0} tests failed".format(ret)
            mark_failed()
        sink.status["message"] = message
        if "github" in sink.status:
            self.github_status_data["description"] = message
        del sink.status["extras"]
        sink.flush()

    def run(self, opts):
        if self.ref:
            subprocess.check_call([ "git", "fetch", "origin", self.ref ])
            if not self.revision:
                self.revision = subprocess.check_output([ "git", "rev-parse", "FETCH_HEAD" ]).strip()
            subprocess.check_call([ "git", "checkout", "-f", self.revision ])

        if not self.revision:
            self.revision = subprocess.check_output([ "git", "rev-parse", "HEAD" ]).strip()

        # Retrieve information about our base branch
        if self.base:
            subprocess.check_call([ "git", "fetch", "origin", self.base ])

        os.environ["TEST_NAME"] = self.name
        os.environ["TEST_REVISION"] = self.revision

        # Split a value like verify/fedora-24
        (prefix, unused, value) = self.context.partition("/")

        if prefix in [ 'selenium' ]:
            os.environ["TEST_OS"] = 'fedora-24'
        elif prefix in [ 'container' ]:
            os.environ["TEST_OS"] = 'fedora-25'
        else:
            os.environ["TEST_OS"] = value

        if opts.publish:
            self.start_publishing(opts.publish)
            os.environ["TEST_ATTACHMENTS"] = self.sink.attachments

        msg = "Testing {0} for {1} with {2} on {3}...\n".format(self.revision, self.name,
                                                                self.context, HOSTNAME)
        sys.stderr.write(msg)

        ret = None

        offline = ('offline' in opts) and opts.offline
        if self.base and "TEST_INVOKE_RESPAWN" not in os.environ:
            ret = self.rebase(offline)

        # Did we rebase, if so rexec
        if not ret and self.respawn:
            assert "TEST_INVOKE_RESPAWN" not in os.environ
            os.environ["TEST_INVOKE_RESPAWN"] = "1"
            sys.stderr.write("Rebase complete ... respawning\n")
            if self.sink:
                self.stop_publishing(None)
            os.execv(__file__, sys.argv)
            assert False, "not reached"

        test = os.path.join(BOTS, "..", "test")
        os.environ["PATH"] = "{0}:{1}:{2}".format(os.environ.get("PATH"), BOTS, test)

        # Figure out what to do next
        if prefix == "verify":
            cmd = [ "timeout", "120m", os.path.join(test, "verify", "run-tests"),
                    "--install", "--jobs", str(opts.jobs) ]
        elif prefix == "avocado":
            cmd = [ "timeout", "60m", os.path.join(test, "avocado", "run-tests"),
                    "--install", "--quick", "--tests" ]
        elif prefix == "koji":
            cmd = [ "timeout", "120m", os.path.join(test, "koji", "run-build") ]
        elif prefix == "selenium":
            if value not in ['firefox', 'chrome']:
                ret = "Unknown browser for selenium test"
            cmd = [ "timeout", "60m", os.path.join(test, "avocado", "run-tests"),
                    "--install", "--quick", "--selenium-tests", "--browser", value]
        elif prefix == "image" or prefix == "container":
            cmd = [ "timeout", "90m", os.path.join(test, "containers", "run-tests"),
                    "--install", "--container", value]
        else:
            ret = "Unknown context"

        if cmd and opts.verbose:
            cmd.append("--verbose")

        # Setup network if necessary, any failures caught during testing
        prep = os.path.join(BASE, "test", "vm-prep")
        if os.path.exists(prep):
            subprocess.call(["sudo", "-n", prep ])

        # Actually run the tests
        if not ret:
            ret = subprocess.call(cmd)

        # All done
        if self.sink:
            self.stop_publishing(ret)

        return ret

if __name__ == '__main__':
    sys.exit(main())
