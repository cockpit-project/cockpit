<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<refentry id="api-cockpit">
  <refmeta>
    <refentrytitle>cockpit.js</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>cockpit.js</refname>
    <refpurpose>Basic cockpit API to interact with the system</refpurpose>
  </refnamediv>

  <refsection>
    <title>Loading cockpit.js</title>
    <para><code>cockpit.js</code> should be loaded via a script tag. In general jQuery should
      be loaded before <code>cockpit.js</code> as in the example below. If jQuery is not loaded
      then only the <link linkend="latest-channels">raw channel API</link> will be defined.</para>

<programlisting><![CDATA[
  <script src="../@@latest@@/jquery.js">
  <script src="../@@latest@@/cockpit.js">
]]></programlisting>
  </refsection>

  <refsection>
    <title>User Login</title>

    <refsection id="latest-logout">
      <title>cockpit.logout()</title>
<programlisting>
  cockpit.logout([reload])
</programlisting>
      <para>Logout of Cockpit. Unless <code>reload</code> is <code>false</code> this will also
        cause the page to be reloaded, so that the user can see the logged out state.</para>
    </refsection>

    <refsection id="latest-user">
      <title>cockpit.user</title>
<programlisting>
  cockpit.user["user"]
  cockpit.user["name"]
</programlisting>
      <para>This object contains information about the user that's currently logged into cockpit.
        The following fields are defined:</para>

      <variablelist>
        <varlistentry>
          <term><code>"user"</code></term>
          <listitem><para>This is the unix user like <code>"root"</code>.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>"name"</code></term>
          <listitem><para>This is a readable name for the user.</para></listitem>
        </varlistentry>
      </variablelist>

      <para>The fields will be <code>undefined</code> until a connection is made to the
        cockpit server.</para>
    </refsection>

    <refsection id="latest-info-changed">
      <title>cockpit.user.onchanged</title>
<programlisting>
  $(cockpit.user).on("changed", function() { ... })
</programlisting>
      <para>This event is fired when the user info changes or first becomes available.</para>
    </refsection>

  </refsection>

  <refsection id="latest-spawn">
    <title>Spawning Processes</title>

    <para>This is the API for spawning a process and receiving its output, as well
      as exit codes.</para>

    <refsection id="latest-spawn-spawn">
      <title>cockpit.spawn()</title>
<programlisting>
 process = cockpit.spawn(args, [options])
</programlisting>

      <para>Spawns a process on the system.</para>

      <para>The <code>args</code> should be an array starting with the executable and
        containing all the arguments to pass on the command line. If <code>args</code>
        is a string then it is interpreted as an executable name. The optional
        <code>options</code> argument is a javascript plain object and can contain
        any of the following fields:
      </para>

      <variablelist>
        <varlistentry>
          <term><code>"directory"</code></term>
          <listitem><para>The directory to spawn the process in.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>"error"</code></term>
          <listitem><para>Controls where the standard error is sent. By default it is logged
            to the journal. If set to <code>"output"</code> it is included in with the
            output data.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>"host"</code></term>
          <listitem><para>The remote host to spawn the process on. If no host is specified
            then the correct one will be automatically selected based on the page
            calling this function.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>"environ"</code></term>
          <listitem><para>A javascript plain object that contains strings to be used as
            an environment for the new process.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>"pty"</code></term>
          <listitem><para>Launch the process in its own PTY terminal, and send/receive
            terminal input and output.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>"batch"</code></term>
          <listitem><para>Batch data coming from the process in blocks of at least this
              size. This is not a guarantee. After a short timeout the data will be sent
              even if the data doesn't match the batch size. Defaults to zero.</para></listitem>
        </varlistentry>
      </variablelist>

      <para>The spawned process is a
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink>
        that will complete if the process exits successfully, or fail if there's a problem.
        Some additional methods besides the standard jQuery deferred methods are documented
        below.</para>

      <para>The standard output of the process is made available via the spawned process
        object. Any non-UTF8 output from the process will be coerced into textual form.
        It is highly recommended that only textual output be produced by the command.
        The standard error is logged to the journal.</para>
    </refsection>

    <refsection id="latest-spawn-done">
      <title>process.done()</title>
<programlisting>
 process.done(function(data) { ... })
</programlisting>
      <para>This is a standard
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink>
        method. It sets up a handler to be called when the process finishes successfully.</para>
      <para>The <code>data</code> argument contains the standard output of the process.
        If any <code><link linkend="latest-spawn-stream">process.stream()</link></code>
        handlers are set up, then they will consume the standard output, and the
        <code>data</code> argument will be <code>null</code>.</para>
    </refsection>

    <refsection id="latest-spawn-fail">
      <title>process.fail()</title>
<programlisting>
 process.fail(function(exception) { ... })
</programlisting>
      <para>This is a standard
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink> method.
        It sets up a handler to be called when the process fails, terminates or exits.</para>

      <para>The <code>exception</code> object passed to the handler can have the
        following fields:</para>

      <variablelist>
        <varlistentry>
          <term><code>problem</code></term>
          <listitem><para>A <link linkend="latest-problems">problem code</link> string when
            a problem occurred starting or communicating with the process. This is <code>null</code>
            if the process exited or was terminated.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>exit_status</code></term>
          <listitem><para>The numeric exit status of the process. This is <code>null</code> if
            the process did not exit.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>exit_signal</code></term>
          <listitem><para>A string representing a unix signal that caused the process to terminate.
            This is <code>null</code> if the process did not terminate because of a signal.</para></listitem>
        </varlistentry>
      </variablelist>
    </refsection>

    <refsection id="latest-spawn-always">
      <title>process.always()</title>
<programlisting>
 process.always(function() { ... })
</programlisting>
      <para>This is a standard
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink> method.
        It sets up a handler to be called when when the process completes, whether it exits successfully,
        fails, terminates, or exits with a failure.</para>
    </refsection>

    <refsection id="latest-spawn-stream">
      <title>process.stream()</title>
<programlisting>
 process.stream(function(data) { ... })
</programlisting>
      <para>This sets up a handler to be called when the process has standard output. The
        handler will be called multiple times. The handler will be called regardless of
        whether the process ends up exiting successfully or not.</para>
      <para>If any <code>process.stream()</code> handlers are set up, then the
        <code><link linkend="latest-spawn-done">process.done()</link></code> handlers will
        get a <code>null</code> as their <code>data</code> argument. The stream handlers
        consume the data.</para>
    </refsection>

    <refsection id="latest-spawn-write">
      <title>process.write()</title>
<programlisting>
 process.write(data)
</programlisting>
      <para>This method writes string data to the standard input of the process.</para>
    </refsection>

    <refsection id="latest-spawn-close">
      <title>process.close()</title>
<programlisting>
 process.close([problem])
</programlisting>
      <para>Close the proces. If <code>problem</code> is not specified, then just the standard
        input of the process is closed. If <code>problem</code> is specified it should be a
        standard <link linkend="latest-problems">problem code</link> string. In this case the
        process will be terminated with a signal.</para>
    </refsection>
  </refsection>

  <refsection id="latest-problems">
    <title>Problem Codes</title>
    <para>Cockpit represents problems with standardized problem string codes.</para>
    <variablelist>
      <varlistentry>
        <term><code>"internal-error"</code></term>
        <listitem><para>An unexpected internal error without further info. This should
          not happen during the normal course of operations.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>"no-cockpit"</code></term>
        <listitem><para>The system does not have a compatible version of Cockpit installed
          or installed properly.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>"no-session"</code></term>
        <listitem><para>Cockpit is not logged in.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>"not-authorized"</code></term>
        <listitem><para>The user is not permitted to perform the action in question.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>"not-found"</code></term>
        <listitem><para>Something specifically requested was not found, such as a file,
          executable etc.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>"terminated"</code></term>
        <listitem><para>Something was terminated forcibly, such as a connection, process
          session, etc.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>"timeout"</code></term>
        <listitem><para>Something timed out.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>"unknown-hostkey"</code></term>
        <listitem><para>The remote host had an unexpected or unknown key.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>"no-forwarding"</code></term>
        <listitem><para>Could not forward authentication credentials to the remote host.</para></listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection id="latest-dbus">
    <title>DBus Access</title>

    <para>Cockpit allows access to DBus services via this API.</para>

    <para>DBus values are represented as javascript values and objects as follows:</para>

    <variablelist>
      <varlistentry>
        <term><code>BYTE 'y'</code></term>
        <listitem><para>Javascript number.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>BOOLEAN 'b'</code></term>
        <listitem><para>Javascript boolean.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>INT16 'n'</code></term>
        <listitem><para>Javascript number.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>UINT16 'q'</code></term>
        <listitem><para>Javascript number.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>INT32 'i'</code></term>
        <listitem><para>Javascript number.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>UINT32 'u'</code></term>
        <listitem><para>Javascript number.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>INT64 'x'</code></term>
        <listitem><para>Javascript number.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>UINT64 't'</code></term>
        <listitem><para>Javascript number.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>DOUBLE 'd'</code></term>
        <listitem><para>Javascript number.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>STRING 's'</code></term>
        <listitem><para>Javascript string.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>OBJECT_PATH 'o'</code></term>
        <listitem><para>Javascript string.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>SIGNATURE 'g'</code></term>
        <listitem><para>Javascript string.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>ARRAY of BYTE 'ay'</code></term>
        <listitem><para>A string containing base64 encoded data.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>ARRAY of DICT_ENTRY with STRING keys 'a{s?}'</code></term>
        <listitem><para>A javascript plain object with the keys as property names.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>ARRAY of DICT_ENTRY with other keys 'a{??}'</code></term>
        <listitem><para>A javascript plain object each key JSON encoded into a string property name.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>ARRAY of other</code></term>
        <listitem><para>A javascript array.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><code>VARIANT</code></term>
        <listitem><para>A javascript plain object with the <code>"t"</code> property set to a DBus type string,
            and the <code>"v"</code> property set to a value.</para></listitem>
      </varlistentry>
    </variablelist>

    <refsection id="latest-dbus-dbus">
      <title>cockpit.dbus()</title>
<programlisting>
 client = cockpit.dbus(name, [options])
</programlisting>

      <para>Create a DBus client for the given bus <code>name</code> (eg: service name). Use the
        following functions to make DBus method calls, watch for events, etc. The optional
        <code>options</code> argument is a javascript plain object, and may include:</para>

      <variablelist>
        <varlistentry>
          <term><code>"bus"</code></term>
          <listitem><para>The DBus bus to connect to. Specifying <code>"session"</code> will
              connect to the DBus user session bus, <code>"user"</code> will connect to the
              user bus (on some systems this is identical to the session bus), and <code>"system"</code>
              will connect to the DBus system bus. This defaults to "user" if not
              present.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>"host"</code></term>
          <listitem><para>The host to open the channel to. If no host is specified
            then the correct one will be automatically selected based on the page
            calling this function.</para></listitem>
        </varlistentry>
      </variablelist>
    </refsection>

    <refsection id="latest-dbus-close">
      <title>client.close()</title>
<programlisting>
 client.close([problem])
</programlisting>
      <para>Close the DBus client. If <code>problem</code> is specified it should be a
        <link linkend="latest-problems">problem code</link> string.</para>
    </refsection>

    <refsection id="latest-dbus-onclose">
      <title>client.onclose</title>
<programlisting>
 $(client).on("close", function(options) { ... })
</programlisting>
      <para>An event triggered when the DBus client closes. This can happen either because
        <link linkend="latest-dbus-close">client.close()</link> function was called,
        or the DBus service went away, or some other problem or disconnection.</para>
      <para>The <code>options</code> will contain various close information, including a
        <code>"reason"</code> field which will be set if the channel was closed because
        of a problem.</para>
    </refsection>

    <refsection id="latest-dbus-call">
      <title>client.call()</title>
<programlisting>
  invocation = client.call(path, interface, method, args)
</programlisting>

      <para>Make a DBus method call.</para>

      <para>The <code>path</code> is the DBus object path to make
        the call on, <code>interface</code> is the DBus interface for the method and
        <code>method</code> is the name of the method to call. The <code>args</code> is an
        array of arguments to pass to the method, each of which must be appropriate for the
        expected <link linkend="latest-dbus">DBus type</link> of that argument. The
        <code>args</code> may be <code>null</code> if no arguments are to be sent.</para>

      <para>The returned value is a
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink>
        that will complete sucessfully when the method returns, or fail if an error occurs.</para>
    </refsection>

    <refsection id="latest-dbus-done">
      <title>invocation.done()</title>
<programlisting>
 invocation.done(function(args) { ... })
</programlisting>
      <para>This is a standard
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink>
        method. It sets up a handler to be called when the DBus method call finishes
        successfully.</para>
      <para>The <code>args</code> argument is an array of return values from the DBus method.
        Each of them will be converted to an appropriate
        <link linkend="latest-dbus">javascript type</link>.</para>
    </refsection>

    <refsection id="latest-dbus-fail">
      <title>invocation.fail()</title>
<programlisting>
 invocation.fail(function(exception) { ... })
</programlisting>
      <para>This is a standard
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink> method.
        It sets up a handler to be called when the DBus method call fails.</para>

      <para>The <code>exception</code> object passed to the handler can have the
        following properties:</para>

      <variablelist>
        <varlistentry>
          <term><code>problem</code></term>
          <listitem><para>A <link linkend="latest-problems">problem code</link> string when
              a problem occurred starting or communicating with the DBus service. This is
              <code>null</code> in the cases where an actual DBus error was occurred.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>name</code></term>
          <listitem><para>The DBus error name. This will be <code>null</code> in cases where the
            failure was not due to a DBus error.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>message</code></term>
          <listitem><para>A DBus error message. This will be <code>null</code> in cases where the
            failure was not due to a DBus error.</para></listitem>
        </varlistentry>
      </variablelist>
    </refsection>

    <refsection id="latest-dbus-always">
      <title>invocation.always()</title>
<programlisting>
 invocation.always(function() { ... })
</programlisting>
      <para>This is a standard
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink> method.
        It sets up a handler to be called when when the DBus method call finishes whether successfully,
        or fails.</para>
    </refsection>

    <refsection id="latest-dbus-subscribe">
      <title>client.subscribe()</title>
<programlisting>
 subscription = client.subscribe(match, function(path, interface, signal, args) { ... })
</programlisting>
      <para>Subscribe to signals. The <code>match</code> argument is a javascript plain object which
        defines what signals to subscribe to. Each property in the <code>match</code> argument restricts
        signals subscribed to. If a property is not present then it is treated as a wildcard, matching
        anything. If an empty object is specified as <code>match</code> then all signals will be
        subscribed to. The <code>match</code> argument may contain the following properties:</para>

      <variablelist>
        <varlistentry>
          <term><code>interface</code></term>
          <listitem><para>A DBus interface to match.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>path</code></term>
          <listitem><para>A DBus object path to match. May not be used together with the
            <code>path_namespace</code> property. It should be a valid DBus object path,
            that is, it should have no trailing slash.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>path_namespace</code></term>
          <listitem><para>A DBus object path prefix to match. Any paths in the hierarchy below this
            top path will match. May not be used together with the <code>path</code>
            property.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>member</code></term>
          <listitem><para>The DBus signal name to match.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>arg0</code></term>
          <listitem><para>Matches the first argument of a DBus message, which must be a
             string.</para></listitem>
        </varlistentry>
      </variablelist>

      <para>The handler passed as the second argument will be invoked when the signal is received.
        A <code>subscription</code> is returned which can be used to remove the subscription by
        calling its <code>subscription.remove()</code> method.</para>

      <para>It is not a problem to subscribe to the same signals more than once, with identical
        or slightly different <code>match</code> arguments.</para>
    </refsection>

    <refsection id="latest-dbus-remove">
      <title>subscription.remove()</title>
<programlisting>
 subscription.remove()
</programlisting>

      <para>Unsubscribe from the DBus signal subscription.</para>
    </refsection>

    <refsection id="latest-dbus-variant">
      <title>cockpit.variant()</title>
<programlisting>
 variant = cockpit.variant(type, value)
</programlisting>

      <para>A DBus variant is represented as a plain javascript object with a
        <code>"t"</code> property represesting the full DBus type of the variant,
        and a <code>"v"</code> property containting the variant value.</para>

      <para>This is a helper function for creating such a variant object.</para>
    </refsection>

    <refsection id="latest-dbus-byte-array">
      <title>cockpit.byte_array()</title>
<programlisting>
 byte_array = cockpit.byte_array(type, value)
</programlisting>

      <para>A DBus byte array is represnted as base64 data encoded in a string. This
        is a helper function for creating such a byte array.</para>
    </refsection>
  </refsection>

  <refsection id="latest-packages">
    <title>Package Info</title>

    <para>Package information is available via this API, including access to package
      manifest data.</para>

    <refsection id="latest-packages-lookup">
      <title>cockpit.packages.lookup()</title>
<programlisting>
 lookup = cockpit.packages.lookup(name)
</programlisting>

      <para>This function starts a lookup for information about the package called
        <code>name</code>. The <code>name</code> argument may be a package name,
        an alias, or a checksum. The information may be retrieved from a cache.</para>

      <para>The return value is a
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink>
        that will complete if the lookup happens successfully, or fail if there's a
        problem.</para>
    </refsection>

    <refsection id="latest-packages-done">
      <title>lookup.done()</title>
<programlisting>
 lookup.done(function(pkg) { ... })
</programlisting>
      <para>This is a standard
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink>
        method. It sets up a handler to be called when the package lookup finishes
        successfully.</para>

      <para>The <code>pkg</code> argument contains an object with package information,
        containing the following fields.</para>

      <variablelist>
        <varlistentry>
          <term><code>checksum</code></term>
          <listitem><para>Checksum of the package or <code>null</code></para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>manifest</code></term>
          <listitem><para>The package manifest as a javascript object.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>name</code></term>
          <listitem><para>The canonical package name.</para></listitem>
        </varlistentry>
      </variablelist>

    </refsection>

    <refsection id="latest-packages-fail">
      <title>lookup.fail()</title>
<programlisting>
 lookup.fail(function(exception) { ... })
</programlisting>
      <para>This is a standard
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink> method.
        It sets up a handler to be called when the package lookup fails.</para>

      <para>The <code>exception</code> object passed to the handler will have the
        following fields:</para>

      <variablelist>
        <varlistentry>
          <term><code>problem</code></term>
          <listitem><para>A <link linkend="latest-problems">problem code</link> string when
            a problem occurred starting or communicating with the process. This is <code>null</code>
            if the process exited or was terminated.</para></listitem>
        </varlistentry>
      </variablelist>

      <para>If a package is not found, the <code>problem</code> code will be <code>"not-found"</code>.</para>
    </refsection>

    <refsection id="latest-packages-always">
      <title>lookup.always()</title>
<programlisting>
 lookup.always(function() { ... })
</programlisting>
      <para>This is a standard
        <ulink url="http://api.jquery.com/category/deferred-object/">jQuery deferred</ulink> method.
        It sets up a handler to be called when when the lookup completes, whether successfully or not.</para>
    </refsection>

  </refsection>

  <refsection id="latest-channels">
    <title>Raw Channels</title>

    <para>At a low level Cockpit communicates with the system via messages passed
      through various channels. These are usually exposed via higher level APIs,
      such as the <code><link linkend="latest-spawn">cockpit.spawn()</link></code> function.
      It is rare to use raw channels directly.</para>

    <refsection id="latest-channels-channel">
      <title>cockpit.channel()</title>
<programlisting>
 channel = cockpit.channel(options)
</programlisting>

      <para>This function creates a new channel for communication with the system.
        It returns a new channel object. The <code>options</code> argument is a
        plain object. At least the <code>"payload"</code> option is required, and
        based on the payload type, other options may be required.</para>

      <variablelist>
        <varlistentry>
          <term><code>"host"</code></term>
          <listitem><para>The host to open the channel to. If no host is specified
            then the correct one will be automatically selected based on the page
            calling this function.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>"payload"</code></term>
          <listitem><para>The payload type for the channel. Only specific payload
            types are supported.</para></listitem>
        </varlistentry>
      </variablelist>

      <para>The channel object returned has the following fields and methods and
        events. You should call the
        <code><link linkend="latest-channels-close">channel.close()</link></code>
        method when done with the channel.</para>

      <para>A valid channel will always be returned and the is ready to
        <code><link linkend="latest-channels-send">channel.send()</link></code>. The channel may
        <link linkend="latest-channels-close-ev">close shortly afterword</link> due
        to a failure.</para>
    </refsection>

    <refsection id="latest-channels-options">
      <title>channel.options</title>
      <para>The options used to open this channel. This should not be changed.</para>
    </refsection>

    <refsection id="latest-channels-valid">
      <title>channel.valid</title>
      <para>Will be <code>true</code> for an open channel. Will be set to <code>false</code> if the channel
        closes.</para>
    </refsection>

    <refsection id="latest-channels-send">
      <title>channel.send()</title>
<programlisting>
 channel.send(data)
</programlisting>
      <para>Send a message over the channel. The contents of the message depends on the
        payload type of the channel. The <code>data</code> will be converted to a string if not already
        a string.</para>
    </refsection>

    <refsection id="latest-channels-close">
      <title>channel.close()</title>
<programlisting>
 channel.close([options])
</programlisting>
      <para>Close the channel.</para>
      <para>If <code>options</code> is present it can be a plain javascript object
        containing additional channel close options to send to the peer. If closing for
        because of a problem, set the <code>"reason"</code> field to a
        <link linkend="latest-problems">problem code</link>. If <code>options</code>
        is not an object it will be treated as a <code>"reason"</code>.</para>
      <para>The <link linkend="latest-channels-close-ev">close event</link> will fire.
        A channel can also be closed by a peer or if the underlying transport closes.</para>
    </refsection>

    <refsection id="latest-channels-message">
      <title>channel.onmessage</title>
<programlisting>
 $(channel).on("message", function(event, data) { ... })
 channel.addEventListener("message", function(event, data) { ... })
</programlisting>
      <para>An event triggered when the channel receives a message. The message is
        passed as a string to the handler in the <code>data</code>. The contents of
        the message depends on the payload type of the channel.</para>
    </refsection>

    <refsection id="latest-channels-close-ev">
      <title>channel.onclose</title>
<programlisting>
 $(channel).on("close", function(options) { ... })
 channel.addEventListener("close", function(event, options) { ... })
</programlisting>
      <para>An event triggered when the channel closes. This can happen either because
        <link linkend="latest-channels-close">channel.close()</link> function was called,
        or if the peer closed the channel, or the underlying transport closes.</para>
      <para>The <code>options</code> will contain various close information, including a
        <code>"reason"</code> field which will be set if the channel was closed because
        of a problem.</para>
    </refsection>

    <refsection id="latest-transport-origin">
      <title>cockpit.transport.origin</title>
<programlisting>
  cockpit.transport.origin
</programlisting>
      <para>The HTTP origin that is being used by the underlying channel transport. This is
        read-only, you should not assign a value. If the browser supports
        <code>window.location.origin</code> then this will be identical to that value.</para>
    </refsection>

    <refsection id="latest-transport-options">
      <title>cockpit.transport.options</title>
<programlisting>
  cockpit.transport.options
</programlisting>
      <para>Initialization options received over the underlying channel transport. These
        will be empty until connection is properly established.</para>
    </refsection>

    <refsection id="latest-transport-close">
      <title>cockpit.transport.close()</title>
<programlisting>
  cockpit.transport.close([reason])
</programlisting>
      <para>Close the underlying channel transport. All channels open channels will close.
        The <code>reason</code> argument should be a problem code string. If not specified
        it will default to <code>"disconnected"</code>.</para>
    </refsection>

    <refsection id="latest-transport-filter">
      <title>cockpit.transport.filter()</title>
<programlisting>
  cockpit.transport.filter(function(channel, message) { ... })
</programlisting>
      <para>Add a filter to the underlying channel transport. All incoming messages will be
        passed to each of the filter callbacks that are registered.</para>
      <para>This function is rarely used.</para>
      <para>Filter callbacks are called in the order they are registered. If a filter
        callback returns <code>false</code> then the message will not be dispatched
        further, whether to other filters, or to channels, etc.</para>
       <para>The <code>channel</code> is a string with the intended
       destination of the message, and is either the frame channel for
       regular payload messages , or the value of the "channel" field
       for messages in the control channel.  The <code>message</code>
       is a string with the raw message, including all framing.</para>
    </refsection>

    <refsection id="latest-transport-inject">
      <title>cockpit.transport.inject()</title>
<programlisting>
  cockpit.transport.inject(message)
</programlisting>
      <para>Inject a message into the underlying channel transport. The <code>message</code>
        should be a string, and should be valid according to the Cockpit message protocol.</para>
      <para>This function is rarely used. In general you should only <code>inject()</code>
        messages you got from a <code><link linkend="latest-transport-filter">filter()</link></code>.</para>
    </refsection>
  </refsection>

  <refsection>
    <title>Cockpit Version Info</title>

    <refsection id="latest-info">
      <title>cockpit.info</title>
<programlisting>
  cockpit.info["version"]
  cockpit.info["build"]
</programlisting>
      <para>This object contains information about cockpit itself. Note that when cockpit is
        running on multiple servers, this only reflects the server that was connected to.
        The following fields are defined:</para>

      <variablelist>
        <varlistentry>
          <term><code>"build"</code></term>
          <listitem><para>A string containing build details.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><code>"version"</code></term>
          <listitem><para>A string containing the cockpit version number. It is almost always
            incorrect to use this to make a decision in code.</para></listitem>
        </varlistentry>
      </variablelist>

    </refsection>
  </refsection>

</refentry>
