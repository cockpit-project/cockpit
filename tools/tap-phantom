#!/usr/bin/env phantomjs

/*
 * Copyright (C) 2013 Red Hat, Inc.
 *
 * Cockpit is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * Cockpit is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This is a phantom driver for QUnit which outputs TAP
 */

var sys = require('system');
var fs = require('fs');
var child = require("child_process");

var url = null;
var server = null;

if (phantom.args.length == 1) {
    url = sys.args[1];
} else if (phantom.args.length == 2) {
    server = sys.args[1];
    url = sys.args[2];
} else {
    console.log('usage: tap-phantom [server] file');
    phantom.exit(2);
}

function calc_srcdir()
{
    var dir = sys.args[0];
    var pos = dir.lastIndexOf(fs.separator);
    if(pos == -1)
        return ".";
    else
        return dir.substring(0, pos);
}

function print_error(msg, trace, out, prefix) {
    out.writeLine(prefix + msg);
    if (trace && trace.length) {
        trace.forEach(function(frame) {
            out.writeLine(prefix + "  " + (frame.file || frame.sourceURL) + ':' + frame.line +
                          (frame.function ? ' (in function ' + frame.function +')' : ''));
        });
    }
}

function run(url) {
    var page = require('webpage').create();
    page.viewportSize = { width: 800, height: 480 };

    page.onConsoleMessage = function(msg, lineNum, sourceId) {
        /* All done with testing */
        if (msg === "phantom-tap-done")
            setTimeout(function() { phantom.exit(0); }, 0);

        else if (msg == "phantom-tap-error")
            setTimeout(function() { phantom.exit(1); }, 0);

        /* TAP lines go to stdout */
        else if (msg.match(/^ok [0-9]+/i) ||
                 msg.match(/^not ok [0-9]+/i) ||
                 msg.match(/^Bail out!/i) ||
                 msg.match(/^[0-9]+\.\.[0-9]+/) ||
                 msg.match(/^# /))
            sys.stdout.writeLine(msg);

        /* Everything else goes to stderr */
        else
            sys.stderr.writeLine(msg);
    };

    page.onResourceError = function(ex) {
        console.error('Unable to load resource: ' + ex.url + ': ' + ex.errorString);
        phantom.exit(1);
    };

    phantom.onError = function(msg, trace) {
        print_error(msg, trace, sys.stderr, "");
        phantom.exit(1);
    };

    page.onError = function(msg, trace) {
        print_error(msg, trace, sys.stdout, "# ");
        phantom.exit(1);
    };

    page.open(url, function(status) {
        if (status !== "success") {
            console.log("Unable to load:", url);
            phantom.exit(1);
        }

        page.evaluate(function() {
            if (typeof tests_included === "undefined") {
                console.log("Tests not properly included");
                phantom.exit(1);
            }
        });
    });
}

if (server !== null) {
    var prefix = "";
    var running = false;

    var proc = child.spawn(server, []);
    proc.stdout.on("data", function(data) {
        if (running)
            return;
        prefix = prefix + data;
        var pos = prefix.indexOf('\n');
        if (pos >= 0) {
            running = true;
            run(prefix.substring(0, pos) + "/" + url);
        }
    });
    proc.stderr.on("data", function(data) {
        sys.stderr.write(data);
    });
    proc.on("exit", function(code) {
        console.log(server + " exited unsuccessfully");
        phantom.exit(code);
    });

} else {
    run(url);
}
