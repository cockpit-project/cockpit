#!/usr/bin/env node

var fs, stdio;

try {
    fs = require('fs');
    stdio = require('stdio');
} catch(ex) {
    fatal(ex.message, 127); /* missing looks for this */
}

function fatal(message, code) {
    console.log((input || "jsmodule") + ": " + message);
    process.exit(code || 1);
}

if (process.argv.length < 4) {
    console.log("usage: jsmodule -a api -d dependency -o output file ...");
    process.exit(2);
}

var ops = stdio.getopt({
    amd: { key: "m", description: "Define an AMD module" },
    name: { key: "n", args: 1, description: "Optional named module" },
    api: { key: "a", args: 1, description: "Module API object" },
    output: { key: "o", args: 1, description: "Output file" },
    dependency: { key: "d", multiple: true, description: "Module dependency" }
});

var minified = ops.output && ops.output.indexOf("min.js") !== -1;

var input;
begin();

function begin() {
    var result = "";
    if (!minified)
        result += "/* DO NOT EDIT. Automatically generated file */\n/* jshint ignore:start */\n";
    var deps = ops.dependency || [];
    if (ops.amd) {
        if (!Array.isArray(deps))
            deps = [ deps ];
        result += "define(";
        if (ops.name)
            result += '"' + ops.name + '", ';
        result += JSON.stringify(deps) + ", function() {\n";
    }
    step(result);
}

function step(result) {
    if (ops.args.length === 0) {
        finish(result);
        return;
    }

    var first = !input;
    input = ops.args.shift();

    fs.readFile(input, { encoding: "utf-8" }, function(err, data) {
        if (err)
            fatal(err.message);
        if (!first)
            result += "\n";
        result += data;
	step(result);
    });
}

function finish(result) {
    input = null;
    if (ops.amd) {
        if (ops.api)
            result += "\nreturn " + ops.api + "; ";
        result += "});\n";
    }
    if (!minified)
        result += "\n/* jshint ignore:end */\n";
    if (result[result.length - 1] != '\n')
        result += "\n";
    if (!ops.output) {
        process.stdout.write(result);
        process.exit(0);
    } else {
        fs.writeFile(ops.output, result, function(err) {
            if (err)
                fatal(err.message);
            process.exit(0);
        });
    }
}
