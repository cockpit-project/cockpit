#!/bin/bash

set -x

# Wait for x for many minutes
function wait() {
    for i in $(seq 1 100); do
        if eval "$@"; then
            return 0
        fi
        sleep 6
    done
    exit 6
}

KUBEVIRT_DIR="/kubevirt"
rm -rf ${KUBEVIRT_DIR}
mkdir -p ${KUBEVIRT_DIR}
cd ${KUBEVIRT_DIR}

curl -sL https://api.github.com/repos/kubevirt/kubevirt/releases/latest > kubevirt_latest.json
KUBEVIRT_VERSION=`cat kubevirt_latest.json | grep -m 1 \"name\": | sed -e 's/^.*\"name\":\s*\"\(.*\)\",/\1/' | sed 's/^v//'`
echo Kubevirt version found: ${KUBEVIRT_VERSION}

oc login -u system:admin
oc adm policy add-cluster-role-to-user cluster-admin admin
oc adm policy add-cluster-role-to-user cluster-admin system:admin

# For emphemeral storage:
# _apb_plan_id=storage-demo
# storage_role=storage-demo

docker run --rm --net=host -v $HOME/.kube:/opt/apb/.kube:z -u $UID \
   docker.io/ansibleplaybookbundle/kubevirt-apb provision \
   --extra-vars 'namespace=kubevirt' \
   --extra-vars '_apb_last_requesting_user=admin' \
   --extra-vars '_apb_plan_id=default' \
   --extra-vars 'storage_role=storage-none' \
   --extra-vars 'admin_user=admin' \
   --extra-vars 'admin_password=admin' \
   --extra-vars 'cluster=openshift' \
   --extra-vars "version=${KUBEVIRT_VERSION}"

TARBALL=`cat kubevirt_latest.json | grep \"tarball_url\": | sed -e 's/^.*\"tarball_url\":\s*\"\(.*\)\",/\1/'`
( mkdir kubevirt.src && cd kubevirt.src && curl -sL ${TARBALL} > kubevirt.tar.gz && tar -xzf kubevirt.tar.gz --strip=1 )
cp kubevirt.src/cluster/vm-template-fedora.yaml ./

curl -sL https://github.com/kubevirt/kubevirt/releases/download/v${KUBEVIRT_VERSION}/kubevirt.yaml > /kubevirt/kubevirt.yaml

# change tag
sed -i 's/:devel/:latest/g' ./vm-template-fedora.yaml
grep -q 'running:' ./vm-template-fedora.yaml || sed -i '/^  spec:/a\ \ \ \ running: false' ./vm-template-fedora.yaml

oc project kubevirt

# Create an OfflineVirtualMachine based on kubevirt's template for Fedora
oc process -f vm-template-fedora.yaml -p NAME=fedoravm -p MEMORY=256Mi -p CPU_CORES=1 | oc apply -f -

# Start it (means create VirtualMachine from an OfflineVirtualMachine)
oc patch offlinevirtualmachine fedoravm --type=merge -p '{"spec":{"running": true}}'

# Wait till the VM is running. Means all kubevirt's images are pulled as well
wait "(oc get pods | grep virt-launcher-fedoravm | grep -q Running)"

# Stop it and remove pod (leftover)
oc patch offlinevirtualmachine fedoravm --type=merge -p '{"spec":{"running": false}}'
wait "(oc get pods | grep -qv virt-launcher-fedoravm)"  # pod should be gone

# No VM is running but kubevirt stays deployed
