#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *

class TestPages(MachineCase):
    def testBasic(self):
        m = self.machine
        b = self.browser
        # On atomic systems, we need a hack to change files in /usr/lib/systemd
        if 'atomic' in m.os:
            m.execute(command="mount -o remount,rw /usr")
        m.write("/usr/lib/systemd/system/test.service",
"""
[Unit]
Description=Test Service

[Service]
ExecStart=/bin/true

[Install]
WantedBy=default.target
""")

        self.allow_restart_journal_messages()

        # login so that we have a cookie.
        self.login_and_go(None)

        # check that reloading a page with parameters works
        b.go("/@localhost/system/init/test.service")
        b.enter_page("/system/init")
        b.reload()
        b.enter_page("/system/init")
        b.wait_text("#service-unit .panel-heading", "Test Service")

        m.execute("systemctl restart cockpit-testing.service")
        b.relogin("/system/init")
        b.wait_text("#service-unit .panel-heading", "Test Service")

        # Navigate inside an iframe
        b.switch_to_top()
        b.go("/@localhost/playground/test")
        b.enter_page("/playground/test")
        b.click("button:contains('Go down')")
        b.click("button:contains('Go down')")
        b.switch_to_top()
        b.wait_js_cond("window.location.hash == '#/@localhost/playground/test/0/1?length=1'")

    def testFrameReload(self):
        b = self.browser
        frame = "localhost/playground/test"

        self.login_and_go(None)
        b.go("/@localhost/playground/test")

        b.enter_page("/playground/test")

        b.wait_present('#file-content')
        b.wait_text('#file-content', "0")
        b.click("#modify-file")
        b.wait_text('#file-content', "1")

        b.switch_to_top()
        b.eval_js('ph_set_attr("iframe[name=\'%s\']", "data-loaded", null)' % frame)
        b.eval_js('ph_set_attr("iframe[name=\'%s\']", "src", "../playground/test.html?i=1#/")' % frame)
        b.wait_present("iframe.container-frame[name='%s'][data-loaded]" % frame)

        b.enter_page("/playground/test")

        b.wait_present('#file-content')
        b.wait_text('#file-content', "1")

test_main()
