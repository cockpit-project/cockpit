#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import subprocess
import time

from testlib import *

class TestLogin(MachineCase):
    def testBasic(self):
        m = self.machine
        b = self.browser

        # Setup users and passwords
        m.execute("useradd user -c 'Barney Bär' || true")
        m.execute("echo abcdefg | passwd --stdin user")

        self.start_cockpit()

        def login(user, password):
            b.set_val('#login-user-input', user)
            b.set_val('#login-password-input', password)
            b.click('#login-button')

        # login as admin
        b.open("server")
        b.wait_visible("#login")
        login("admin", "foobar")
        b.wait_page("server")
        b.wait_text('#content-user-name', 'Administrator')

        # logout
        b.click('#content-user-name')
        b.click('a[onclick*="cockpit_logout"]')
        b.wait_visible("#login")

        # try to login as a non-existing user
        login("nonexisting", "blahblah")
        b.wait_text_not("#login-error-message", "")

        # try to login as user with a wrong password
        login("user", "gfedcba")
        b.wait_text_not("#login-error-message", "")

        # login as user
        login ("user", "abcdefg")
        b.wait_page("server")
        b.wait_text('#content-user-name', 'Barney Bär')

        # reload, which should log us in with the cookie
        b.reload()
        b.wait_page("server")
        b.wait_text('#content-user-name', 'Barney Bär')
        b.click('#content-user-name')
        b.click('a[onclick*="cockpit_go_login_account"]')
        b.wait_page("account")
        b.wait_text ("#account-user-name", "user")

        self.allow_journal_messages ("Returning error-response ... with reason .*",
                            "pam_unix\(cockpit:auth\): authentication failure; .*",
                            "pam_unix\(cockpit:auth\): check pass; user unknown",
                            "pam_succeed_if\(cockpit:auth\): requirement .* not met by user .*")

        # Reloading might trigger this.
        self.allow_journal_messages("Error receiving data: Connection reset by peer")

    def curl_post(self, url, data):
        return subprocess.check_output(['/usr/bin/curl', '-s', '-k',  '-D', '-',
                                    'http://%s:21064%s' % (self.machine.address, url),
                                    '--data-binary', data ])

    def curl_post_code(self, url, data):
        lines = self.curl_post(url, data).splitlines()
        assert len(lines) > 0
        tokens = lines[0].split(' ', 2)
        assert len(tokens) == 3
        return int(tokens[1])

    def testRaw(self):
        self.start_cockpit()
        time.sleep(0.5)
        assert self.curl_post_code ('/login', '') == 400
        assert self.curl_post_code ('/login', 'foo') == 400
        assert self.curl_post_code ('/login', 'foo\nbar\n') == 400
        assert self.curl_post_code ('/login', 'foo\nbar\nbaz') == 400
        assert self.curl_post_code ('/login', '\n\n\n') == 400
        assert self.curl_post_code ('/login', 'admin\nbar') == 401
        assert self.curl_post_code ('/login', 'foo\nbar') == 401
        assert self.curl_post_code ('/login', 'x' * 5000) == 413
        assert self.curl_post_code ('/login', 'admin\n' + 'x' * 4000) == 401
        assert self.curl_post_code ('/login', 'x' * 4000 + '\nbar') == 401
        assert self.curl_post_code ('/login', 'a' * 4000 ) == 400
        assert self.curl_post_code ('/login', 'a' * 4000 + '\n') == 401
        assert self.curl_post_code ('/login', 'a' * 4000 + '\nb\nc') == 400
        assert self.curl_post_code ('/login', 'a' * 4000 + '\nb\nc\n') == 400

        self.allow_journal_messages ("Returning error-response ... with reason .*",
                            "pam_unix\(cockpit:auth\): authentication failure; .*",
                            "pam_unix\(cockpit:auth\): check pass; user unknown",
                            "pam_succeed_if\(cockpit:auth\): requirement .* not met by user .*")

test_main()
