#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2017 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
import subprocess
import sys

sys.dont_write_bytecode = True

# Check out the given ref and if necessary overlay the bots
# directory on top of it as expected on non-master branches

BOTS = os.path.dirname(__file__)
BASE = os.path.normpath(os.path.join(BOTS, ".."))

def main():
    parser = argparse.ArgumentParser(description="Fetch and checkout specific revision")
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output")
    parser.add_argument("--base", nargs='?', help="Base branch that revision is for")
    parser.add_argument("--repo", nargs='?', help="Repository to check out")
    parser.add_argument("--bots-ref", help="bots/ ref to check out from cockpit, for non-default --repo")
    parser.add_argument("ref", help="The git ref to fetch")
    parser.add_argument("revision", nargs='?', help="Actual commit to check out, defaults to ref")

    opts = parser.parse_args()
    if not opts.revision:
        opts.revision = "FETCH_HEAD"

    def execute(*args):
        if opts.verbose:
            sys.stderr.write("+ " + " ".join(args) + "\n")
        try:
            output = subprocess.check_output(args, cwd=BASE, universal_newlines=True)
        except subprocess.CalledProcessError as ex:
            sys.exit(ex.returncode)
        if opts.verbose and output:
            sys.stderr.write("> " + output + "\n")
        return output

    # do this before fetching the actual test repo, so that FETCH_HEAD always points to that at the end
    if opts.bots_ref:
        execute("git", "fetch", "origin", opts.bots_ref)
        bots_ref = execute("git", "rev-parse", "FETCH_HEAD").strip()
    else:
        bots_ref = "origin/master"

    # Testing external project, firstly we needs to add remote
    if opts.repo != "cockpit-project/cockpit":
        if "test\n" in subprocess.check_output([ "git", "remote" ], universal_newlines=True):
            execute("git", "remote", "remove", "test")
        execute("git", "remote", "add", "test", "https://github.com/" + opts.repo)

    # if the pr was updated while the command was in the queue, the revision
    # won't be tied to the ref anymore, and it won't exist locally, so exit
    # silently
    output = None
    try:
        args = ["git", "fetch", "test" if opts.repo != "cockpit-project/cockpit" else "origin", opts.ref]
        if opts.verbose:
            sys.stderr.write("+ {0}\n".format(" ".join(args)))
        output = subprocess.check_output(args, cwd=BASE, universal_newlines=True)
        args = ["git", "checkout", "--detach", opts.revision]
        if opts.verbose:
            sys.stderr.write("+ {0}\n".format(" ".join(args)))
        output = subprocess.check_output(args, cwd=BASE, universal_newlines=True)
    except subprocess.CalledProcessError:
        return 0
    finally:
        if opts.verbose and output:
            sys.stderr.write("> " + output + "\n")

    # If the bots directory doesn't exist in this branch or repo, check it out from master
    if opts.repo != "cockpit-project/cockpit" or (opts.base and opts.base != "master"):
        sys.stderr.write("Checking out bots directory from Cockpit %s ...\n" % (opts.bots_ref or bots_ref))
        execute("git", "checkout", "--force", bots_ref, "--", "bots/")


if __name__ == '__main__':
    sys.exit(main())
