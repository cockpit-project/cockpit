#!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + "/../common/pywrap", sys.argv)

# This file is part of Cockpit.
#
# Copyright (C) 2017 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import netlib
import testlib
from lib.constants import TEST_OS_DEFAULT


@testlib.skipDistroPackage()
class TestNetworkingMAC(netlib.NetworkCase):
    provision = {
        "machine1": {"memory_mb": 512},
        "machine2": {"image": TEST_OS_DEFAULT, "address": "10.111.113.2/20", "dhcp": True, "memory_mb": 256}
    }

    def testMac(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/network")
        b.wait_visible("#networking")

        iface = self.add_iface()
        self.wait_for_iface(iface)

        mac = m.execute(f"cat /sys/class/net/{iface}/address").strip()

        self.select_iface(iface)
        b.wait_text("#network-interface-mac", mac.upper())

        if self.networkmanager_version >= [1, 4, 0]:
            new_mac = self.network.interface()["mac"]
            b.click("#network-interface-mac button")
            b.wait_visible("#network-mac-settings-dialog")
            b.set_input_text('#network-mac-settings-mac-input-select-typeahead', new_mac)
            b.click(".pf-v5-c-select ul > li > button")
            b.click("#network-mac-settings-save")
            b.wait_not_present("#network-mac-settings-dialog")

            b.wait_text("#network-interface-mac", new_mac.upper())
            self.assertIn(new_mac.lower(), m.execute(f"ip link show '{iface}'"))

        else:
            b.wait_not_present("#network-interface-mac button")

    def testBondMac(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/network")
        b.wait_visible("#networking")

        iface1 = self.add_iface()
        iface2 = self.add_iface()
        self.wait_for_iface(iface1)
        self.wait_for_iface(iface2)

        b.click("button:contains('Add bond')")
        b.wait_visible("#network-bond-settings-dialog")
        b.set_input_text("#network-bond-settings-interface-name-input", "tbond")
        b.set_checked(f"input[data-iface='{iface1}']", True)
        b.set_checked(f"input[data-iface='{iface2}']", True)
        b.click("#network-bond-settings-dialog button:contains('Save')")
        b.wait_not_present("#network-bond-settings-dialog")

        self.select_iface('tbond')
        b.wait_visible("#network-interface")

        mac = m.execute("cat /sys/class/net/tbond/address").strip()
        b.wait_text("#network-interface-mac", mac.upper())

        if self.networkmanager_version >= [1, 6, 0]:
            new_mac = self.network.interface()["mac"]
            b.click("#network-interface-mac button")
            b.wait_visible("#network-mac-settings-dialog")
            b.set_input_text('#network-mac-settings-mac-input-select-typeahead', new_mac)
            b.click(".pf-v5-c-select ul > li > button")
            b.click("#network-mac-settings-save")
            b.wait_not_present("#network-mac-settings-dialog")

            b.wait_text("#network-interface-mac", new_mac.upper())
            self.assertIn(new_mac.lower(), m.execute("ip link show tbond"))

        else:
            b.wait_not_present("#network-interface-mac button")


if __name__ == '__main__':
    testlib.test_main()
