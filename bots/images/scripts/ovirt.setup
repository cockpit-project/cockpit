#!/bin/bash

set -eux

echo foobar | passwd --stdin root

systemctl stop firewalld NetworkManager kdump
systemctl disable firewalld NetworkManager kdump
iptables -F

FQDN=ovirt.cockpit.lan
hostnamectl set-hostname ${FQDN}

# Latest stable repos
rpm -ivh http://resources.ovirt.org/pub/yum-repo/ovirt-release41.rpm
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
rpm --import /etc/pki/rpm-gpg/RPM-GPG-ovirt-*
rpm --import https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7

# Install ovirt-engine
yum install -y ovirt-engine-setup
echo "SSO_CALLBACK_PREFIX_CHECK=false" >> /etc/ovirt-engine/engine.conf.d/999-ovirt-engine.conf
cat << EOF > /answers.conf
[environment:default]
OVESETUP_DB/user=str:engine
OVESETUP_DB/password=str:engine
OVESETUP_DB/database=str:engine
#OVESETUP_DB/host=str:${FQDN}
#OVESETUP_DB/port=str:5432
#OVESETUP_ENGINE_CONFIG/fqdn=str:${FQDN}
#OVESETUP_CONFIG/fqdn=str:${FQDN}
OVESETUP_CONFIG/adminPassword=str:engine
OVESETUP_PKI/organization=str:oVirt

OVESETUP_CONFIG/updateFirewall=bool:False
OVESETUP_SYSTEM/memCheckEnabled=bool:False
OVESETUP_CONFIG/engineHeapMax=str:2048M
OVESETUP_CONFIG/engineHeapMin=str:2048M
OVESETUP_VMCONSOLE_PROXY_CONFIG/vmconsoleProxyConfig=bool:True
OVESETUP_CONFIG/websocketProxyConfig=bool:True
OVESETUP_DWH_CORE/enable=bool:False
OVESETUP_DWH_PROVISIONING/postgresProvisioningEnabled=bool:False
OVESETUP_CONFIG/imageioProxyConfig=bool:False
# Don't install the the OVN provider:
OVESETUP_OVN/ovirtProviderOvn=bool:False
# Don't perform database full vacuum:
OVESETUP_DB/engineVacuumFull=bool:False
EOF

engine-setup --config=/answers.conf --offline --accept-defaults
runuser -u postgres -- psql engine -c "UPDATE vdc_options set option_value = 'false' where option_name = 'InstallVds';"
runuser -u postgres -- psql engine -c "UPDATE vdc_options set option_value = 'false' where option_name = 'EncryptHostCommunication';"
runuser -u postgres -- psql engine -c "UPDATE vdc_options set option_value = 'true' where option_name = 'UseHostNameIdentifier';"
systemctl restart ovirt-engine

# Install VDSM
rpm --import https://raw.githubusercontent.com/CentOS-Storage-SIG/centos-release-storage-common/master/RPM-GPG-KEY-CentOS-SIG-Storage
yum install -y vdsm vdsm-client vdsm-hook-faqemu
cat << 'EOF' > /etc/vdsm/vdsm.conf
[vars]
ssl = false
fake_kvm_support = true
EOF
# WA until commit bf0f31e2b
sed -i "s/pc-i440fx-rhel7.2.0/pc-i440fx-rhel7.3.0/g" /usr/libexec/vdsm/hooks/after_get_caps/10_faqemu
# WA for plaintext SPICE console support in VM XML
sed -i "/def _graphics_spice_to_vnc(/i @workaround()" /usr/libexec/vdsm/hooks/before_vm_start/10_faqemu
# WA for sanlock holding the lease space on NFS. Since there is only one "host" it is the SPM and holds it indefinitely when powering off
cat << EOF > /usr/libexec/vdsm/hooks/after_vdsm_stop/10-sanlock.sh
#!/bin/bash
sanlock client shutdown -f 1
EOF
chmod +x /usr/libexec/vdsm/hooks/after_vdsm_stop/10-sanlock.sh

# Start VDSM
vdsm-tool configure
systemctl start libvirtd vdsmd

# Setup a NFS server for SD
mkdir -m777 /nfsexport
echo "/nfsexport *(rw,sync,no_root_squash)" > /etc/exports
systemctl enable --now nfs-server

# Configure ovirtmgmt bridge
echo '{"bondings": {}, "networks": {"ovirtmgmt": {"nic": "eth1", "netmask": "255.255.240.0", "ipaddr": "10.111.113.5", "gateway": "10.111.113.1", "defaultRoute": false}}, "options": {"connectivityCheck": false}}' | vdsm-client --insecure -f - Host setupNetworks
vdsm-client --insecure Host setSafeNetworkConfig

# add host
CURL="curl -k -u admin@internal:engine -H Content-type:application/xml"
DC_ID=$(${CURL} "https://${FQDN}/ovirt-engine/api/datacenters?search=name%3DDefault" | xmllint --xpath "string(/data_centers/data_center/@id)" -)
${CURL} -d "<host> <name>host</name> <address>${FQDN}</address> <root_password>foobar</root_password> </host>" https://${FQDN}/ovirt-engine/api/hosts
sleep 10	# should be ok since we do not really install the host
HOST_ID=$(${CURL} "https://ovirt.cockpit.lan/ovirt-engine/api/hosts?search=status%3Dup" | xmllint --xpath "string(/hosts/host/@id)" -)
[ -z ${HOST_ID} ] && exit 1

# create storage on /nfsexport, attach it
STORAGEID=$(${CURL} -d "<storage_domain> <name>data</name> <type>data</type> <storage> <type>nfs</type> <address>${FQDN}</address> <path>/nfsexport</path> </storage> <host> <name>host</name> </host> </storage_domain>" https://${FQDN}/ovirt-engine/api/storagedomains | xmllint --xpath "string(/storage_domain/@id)" -)
${CURL} -d "<storage_domain> <name>data</name> </storage_domain>" https://${FQDN}/ovirt-engine/api/datacenters/${DC_ID}/storagedomains

# wait on DC to go up, may take a while
for (( i = 0; i < 30;  i++ )); do
    sleep 5
    status=$(${CURL} "https://ovirt.cockpit.lan/ovirt-engine/api/datacenters/${DC_ID}" | xmllint --xpath "string(/data_center/status)" -)
    [ "$status" = "up" ] && break
done
[ "$status" != "up" ] && exit 2

# create VM, add NIC, set it to boot from network
VMID=$(${CURL} -d "<vm><name>VM</name><cluster><name>Default</name></cluster><template><name>Blank</name></template></vm>" https://${FQDN}/ovirt-engine/api/vms | xmllint --xpath "string(/vm/@id)" -)
${CURL} -d "<nic><name>nic1</name><network><name>ovirtmgmt</name></network></nic>" https://${FQDN}/ovirt-engine/api/vms/${VMID}/nics
${CURL} -X PUT -d "<vm><os><boot><devices><device>network</device></devices></boot></os></vm>" https://${FQDN}/ovirt-engine/api/vms/${VMID}

# WA for sanlock holding the NFS mounted lockspace on SPM host
sanlock client status
systemctl stop ovirt-engine postgresql vdsmd
umount -l ovirt.cockpit.lan:/nfsexport
LS=""
for (( i = 0; i < 30;  i++ )); do
    sleep 5
    LS=$(sanlock client status || true)
    [ -z "$LS" ] && break
done;
[ -n "$LS" ] && exit 3

# reduce image size
yum clean all
/var/lib/testvm/zero-disk.setup
# Prevent SSH from hanging for a long time when no external network access
echo 'UseDNS no' >> /etc/ssh/sshd_config
# Keep oVirt happy
mkdir -pm755 /var/cache/ovirt-engine && chown ovirt:ovirt /var/cache/ovirt-engine
