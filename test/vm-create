#!/usr/bin/env python
# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

# vm-create  -- Make a root image suitable for use with vm-run.
#
# Usage: vm-create
#
# Installs the OS indicated by TEST_OS and TEST_ARCH into the image
# for test machine TEST_IMAGE and tweaks it to be useable with
# vm-run and testlib.py.

import argparse
import guestfs
import os
import subprocess
import sys

import testvm

parser = argparse.ArgumentParser(description='Create a virtual machine image')
parser.add_argument('-v', '--verbose', action='store_true', help='Display verbose progress details')
parser.add_argument('-f', '--flavor', action='store', help='The flavor to create')
parser.add_argument('-F', '--force', action='store_true', help='Always create image from scratch')
parser.add_argument('-n', '--no-save', action='store_true', help='Don\'t save the new image')
parser.add_argument('args', nargs='*', help='Arguments to the flavor setup script')
args = parser.parse_args()

def download_image(flavor):
    try:
        subprocess.check_call([ "./vm-download", "--flavor", flavor ])
        return True
    except:
        return False

class MachineBuilder:
    def __init__(self, machine):
        self.machine = machine

    def _setup_fstab(self,gf):
        gf.write("/etc/fstab", "/dev/vda / ext4 defaults\n")

    def _setup_ssh_keys(self, gf):
        def copy(fr, to):
            with open(os.path.join(self.machine.test_dir, fr), "r") as f:
                gf.write(to, f.read())

        # We use a fixed host key for all test machines since things
        # get too annoying when it changes from run to run.
        #
        copy("guest/host_key", "/etc/ssh/ssh_host_rsa_key")
        gf.chmod(0600, "/etc/ssh/ssh_host_rsa_key")
        copy("guest/host_key.pub", "/etc/ssh/ssh_host_rsa_key.pub")

        if not gf.exists("/root/.ssh"):
            gf.mkdir_mode("/root/.ssh", 0700)
        copy("guest/identity.pub", "/root/.ssh/authorized_keys")

    def _setup_fedora_network(self,gf):
        ifcfg_eth0 = 'BOOTPROTO="dhcp"\nDEVICE="eth0"\nONBOOT="yes"\n'
        gf.write("/etc/sysconfig/network-scripts/ifcfg-eth0", ifcfg_eth0)

    def _setup_fedora_like (self, gf):
        self._setup_ssh_keys(gf)
        self._setup_fedora_network(gf)

        # systemctl disable sshd.service
        gf.rm_f("/etc/systemd/system/multi-user.target.wants/sshd.service")
        # systemctl enable sshd.socket
        gf.mkdir_p("/etc/systemd/system/sockets.target.wants/")
        gf.ln_sf("/usr/lib/systemd/system/sshd.socket", "/etc/systemd/system/sockets.target.wants/")

    def _setup_fedora_rawhide (self, gf):
        self._setup_ssh_keys(gf)
        self._setup_fedora_network(gf)

    def _setup_rhel_7 (self, gf):
        self._setup_ssh_keys(gf)
        self._setup_fedora_network(gf)

        # systemctl disable sshd.service
        gf.rm_f("/etc/systemd/system/multi-user.target.wants/sshd.service")
        # systemctl enable sshd.socket
        gf.mkdir_p("/etc/systemd/system/sockets.target.wants/")
        gf.ln_sf("/usr/lib/systemd/system/sshd.socket", "/etc/systemd/system/sockets.target.wants/")

        # upload subscription information
        gf.mkdir_p("/root/.rhel")
        gf.upload(os.path.expanduser("~/.rhel/login"), "/root/.rhel/login")
        gf.upload(os.path.expanduser("~/.rhel/pass"), "/root/.rhel/pass")

    def run_modify_func(self, modify_func):
        gf = guestfs.GuestFS(python_return_dict=True)
        if self.machine.verbose:
            gf.set_trace(1)
        try:
            gf.add_drive_opts(self.machine._image_image, readonly=False)
            gf.launch()
            # try to mount device directly
            devices = gf.list_devices()
            assert len(devices) == 1
            try:
                gf.mount(devices[0], "/")
            except:
                # if this fails, we may have to perform more intricate mounting
                # get the first one that isn't swap and mount it as root
                filesystems = gf.list_filesystems()
                for fs in filesystems:
                    if filesystems[fs] == "swap":
                        continue
                    gf.mount(fs, "/")
                    if gf.exists("/etc"):
                        break
                    gf.umount("/")
                if not gf.exists("/etc"):
                    raise Failure("Can't find root partition")

            modify_func(gf)
            gf.touch("/.autorelabel")
        finally:
            gf.close()

    def unpack_base(self, modify_func=None):
        assert not self.machine._domain

        if not os.path.exists(self.machine.run_dir):
            os.makedirs(self.machine.run_dir, 0750)

        bootstrap_script = "./guest/%s.bootstrap" % (self.machine.os, )

        if os.path.exists(self.machine._image_image):
            os.unlink(self.machine._image_image)
        if os.path.exists(self.machine._image_additional_iso):
            os.unlink(self.machine._image_additional_iso)

        if os.path.isfile(bootstrap_script):
            subprocess.check_call([ bootstrap_script, self.machine._image_image, self.machine.arch ])
        else:
            raise Failure("Unsupported OS %s: %s not found." % (self.machine.os, bootstrap_script))

        if modify_func:
            self.run_modify_func(modify_func)

    def run_setup_script(self, script, args):
        """Prepare a test image further by running some commands in it."""
        self.machine.start(maintain=True)
        try:
            self.machine.wait_boot(wait_for_running_timeout=120)
            self.machine.upload([script], "/var/tmp/SETUP")
            env = {
                "TEST_OS": self.machine.os,
                "TEST_ARCH": self.machine.arch,
                "TEST_FLAVOR": self.machine.flavor,
                "TEST_SETUP_ARGS": " ".join(args),
            }
            self.machine.message("run setup script on guest")
            self.machine.execute(script="/var/tmp/SETUP", environment=env, quiet=not self.machine.verbose)
            self.machine.execute(command="rm /var/tmp/SETUP")
            # bug in selinux-policy-targeted-3.13.1-128.13.fc22
            # HACK https://bugzilla.redhat.com/show_bug.cgi?id=1224211
            # we need to restart systemctl and then reboot the system
            # run this after every script for now
            self.machine.execute(command="systemctl daemon-reexec")
            self.machine.execute(command="shutdown --poweroff now &")
        finally:
            self.machine.stop(timeout_sec=60)

    def run_selinux_relabel(self):
        """Boot an image the first time which allows relabeling"""
        self.machine.start(maintain=True)
        try:
            self.machine.wait_boot()
        finally:
            self.machine.stop()

    def build(self, args):
        def modify(gf):
            if self.machine.os in [ "fedora-22", "fedora-22-testing", "fedora-23", "centos-7" ]:
                self._setup_fedora_like(gf)
            elif self.machine.os == "fedora-rawhide":
                self._setup_fedora_rawhide(gf)
            elif self.machine.os == "rhel-7":
                credential_path = os.path.expanduser("~/.rhel/")
                if (not os.path.isfile(credential_path + "login")) or (not os.path.isfile(credential_path + "pass")):
                    raise Failure("Subscription credentials expected in '~/.rhel/login', '~/.rhel/pass'.")
                self._setup_rhel_7(gf)
            else:
                raise Failure("Unsupported OS %s" % self.machine.os)

        def format_guest_setup_path(script_id=None):
            if script_id:
                return os.path.join(self.machine.test_dir, "guest/%s-%s.%d.setup" % (self.machine.flavor, self.machine.os, next_script))
            else:
                return os.path.join(self.machine.test_dir, "guest/%s-%s.setup" % (self.machine.flavor, self.machine.os))

        # gather the scripts, separated by reboots
        script = format_guest_setup_path()
        if not os.path.exists(script):
            raise Failure("Unsupported flavor %s: %s not found." % (self.machine.flavor, script))
        next_script = 1
        additional_scripts = [ ]
        while os.path.exists(format_guest_setup_path(next_script)):
            additional_scripts += [ format_guest_setup_path(next_script) ]
            next_script += 1

        if "atomic" in self.machine.os:
            self.unpack_base(modify_func=None)
        else:
            self.unpack_base(modify_func=modify)

        self.machine.message("Running setup script %s" % (script))
        self.run_setup_script(script, args)
        for additional_script in additional_scripts:
            self.machine.message("Running additional setup script %s" % (additional_script))
            self.run_setup_script(additional_script, args)

        self.run_selinux_relabel()

try:
    machine = testvm.VirtMachine(verbose=args.verbose, flavor=args.flavor)
    if args.force or machine.needs_build():
        if args.force or not download_image(args.flavor):
            #machine.build(args.args)
            builder = MachineBuilder(machine)
            builder.build(args.args)
            if not args.no_save:
                machine.save()
except testvm.Failure, ex:
    print >> sys.stderr, "vm-create:", ex
    sys.exit(1)
