#!/usr/bin/env node

var fs, path, stdio, minify;

try {
    fs = require('fs');
    path = require('path');
    stdio = require('stdio');
    minify = require('html-minifier').minify;
} catch(ex) {
    fatal(ex.message, 127); /* missing looks for this */
}

var base
var input;
var config;

function fatal(message, code) {
    console.log((input || "ngbundle") + ": " + message);
    process.exit(code || 1);
}

if (process.argv.length < 4) {
    console.log("usage: ngbundle -d module [-o output] file ...");
    process.exit(2);
}

var ops = stdio.getopt({
    output: { key: "o", args: 1, description: "Output file" },
    require: { key: "d", args: 1, description: "Require an angular module" },
    module: { key: "m", args: 1, description: "Extend an angular module" }
});

if (!ops.args || !ops.args.length) {
    fatal("no templates specified", 2);
}

var result;
if (ops.require) {
    result = 'require(["' + ops.require + '"], function(module) {\nmodule';
} else if (ops.module) {
    result = '(function(){angular.module("' + ops.module + '")';
} else {
    fatal("no module specified", 2);
}

result += '.run(["$templateCache", function($templateCache) {\n';

var suffix = '}]);';
if (ops.require)
    suffix += '});';
else if (ops.module)
    suffix += '})();';

/* Read in the config */
fs.readFile(path.resolve(__dirname, 'htmlmin.conf'), 'utf8', function(err, data) {
    if (err)
        fatal(err.message);
    config = JSON.parse(data);
    step();
});

function step() {
    if (ops.args.length === 0) {
        finish();
        return;
    }

    input = ops.args.shift();
    var parts = input.split("/");

    /* Expect pkg/component/views/name.html */
    var name = parts.slice(-2).join("/");

    fs.readFile(input, { encoding: "utf-8" }, function(err, data) {
        if (err)
            fatal(err.message);
        var template = JSON.stringify(minify(data, config));
	result += '$templateCache.put("' + name + '", ' + template + ');\n';
	step();
    });
}

function finish() {
    input = null;
    result += suffix;
    if (!ops.output) {
        process.stdout.write(result);
        process.exit(0);
    } else {
        mkdirp(path.dirname(ops.output), function(err) {
            if (err) {
                fatal(err.message);
            } else {
                fs.writeFile(ops.output, result, function(err) {
                    if (err)
                        fatal(err.message);
                    process.exit(0);
                });
            }
        });
    }
}

function mkdirp(fp, callback) {
    var mode = parseInt('0777', 8) & (~process.umask());
    fp = path.resolve(fp);
    fs.mkdir(fp, mode, function(error) {
        if (!error)
            return callback(null);
        switch (error.code) {
        case 'ENOENT':
            mkdirp(path.dirname(fp), function(error) {
                if (error)
                    callback(error);
                else
                    mkdirp(fp, callback);
            });
            break;
        case 'EEXIST':
            callback(null);
            break;
        default:
            callback(error);
            break;
        }
    });
}
