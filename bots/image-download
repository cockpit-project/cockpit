#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

#
# Download images or other state
#
# Images usually have a name specific link committed to git. These
# are referred to as 'committed'
#
# Other state is simply referenced by name without a link in git
# This is referred to as 'state'
#
# The stores are places to look for images or other state
#

CONFIG = "~/.config/image-stores"
DEFAULT = [
    "https://209.132.184.69:8493/",
    "https://209.132.184.41:8493/",
    "http://cockpit-images.verify.svc.cluster.local",
    "https://fedorapeople.org/groups/cockpit/images/"
]

import argparse
import email
import io
import os
import shutil
import socket
import stat
import subprocess
import sys
import tempfile
import time
import urllib.parse

BOTS = os.path.dirname(os.path.realpath(__file__))
IMAGES = os.path.join(BOTS, "..", "bots", "images")
DATA = os.path.join(os.environ.get("TEST_DATA", BOTS), "images")

DEVNULL = open("/dev/null", "r+")
EPOCH = "Thu, 1 Jan 1970 00:00:00 GMT"

def download(dest, force, quiet, stores):
    if not stores:
        config = os.path.expanduser(CONFIG)
        if os.path.exists(config):
            with open(config, 'r') as fp:
                stores = fp.read().strip().split("\n")
        else:
            stores = []
        stores += DEFAULT

    # The time condition for If-Modified-Since
    exists = not force and os.path.exists(dest)
    if exists:
        since = dest
    else:
        since = EPOCH

    found = [ ]

    name = os.path.basename(dest)
    ca = os.path.join(BOTS, "images", "files", "ca.pem")
    for store in stores:
        url = urllib.parse.urlparse(store)

        defport = url.scheme == 'http' and 80 or 443

        try:
            ai = socket.getaddrinfo(url.hostname, url.port or defport, socket.AF_INET, 0, socket.IPPROTO_TCP)
        except socket.gaierror:
            ai = [ ]
            message = store

        for (family, socktype, proto, canonname, sockaddr) in ai:
            resolve = "cockpit-tests:{1}:{0}".format(*sockaddr)
            source = urllib.parse.urljoin("{0}://cockpit-tests:{1}{2}".format(url.scheme, sockaddr[1], url.path), name)
            message = "{scheme}://{0}:{1}{path}".format(*sockaddr, scheme=url.scheme, path=url.path)

            try:
                cmd = ["curl", "--head", "--silent", "--resolve", resolve, "--fail", "--cacert", ca, source ]
                found.append((cmd, subprocess.check_output(cmd, universal_newlines=True), message))
                if not quiet:
                    sys.stderr.write(" > {0}\n".format(message))
                continue
            except subprocess.CalledProcessError:
                pass

            try:
                cmd = ["curl", "--head", "--silent", "--fail", source]
                found.append((cmd, subprocess.check_output(cmd, universal_newlines=True), message))
                if not quiet:
                    sys.stderr.write(" > {0}\n".format(message))
                continue
            except subprocess.CalledProcessError:
                pass

            if not quiet:
                sys.stderr.write(" x {0}\n".format(message))

    # If we couldn't find the file, but it exists, we're good
    if not found:
        if exists:
            return
        raise RuntimeError("image-download: couldn't find file anywhere: {0}".format(name))

    # Find the most recent version of this file
    def header_date(args):
        cmd, output, message = args
        try:
            reply_line, headers_alone = output.split('\n', 1)
            last_modified = email.message_from_file(io.StringIO(headers_alone)).get("Last-Modified", "")
            return time.mktime(time.strptime(last_modified, '%a, %d %b %Y %H:%M:%S %Z'))
        except ValueError:
            return ""
    found.sort(reverse=True, key=header_date)

    # Choose the first found item after sorting by date
    if not quiet:
        sys.stderr.write(" > {0}\n".format(urllib.parse.urljoin(found[0][2], name)))
    cmd = found[0][0]

    (fd, temp) = tempfile.mkstemp(suffix=".partial", prefix=os.path.basename(dest), dir=os.path.dirname(dest))

    # Adjust the command above that worked to make it visible and download real stuff
    cmd.remove("--head")
    if not quiet:
        cmd.remove("--silent")
        cmd.insert(1, "--progress-bar")
    cmd.append("--remote-time")
    cmd.append("--time-cond")
    cmd.append(since)
    cmd.append("--output")
    cmd.append(temp)
    os.close(fd)

    try:
        curl = subprocess.Popen(cmd)
        ret = curl.wait()
        if ret != 0:
            real_url = urllib.parse.urljoin("{0}://{1}:{2}{3}".format(url.scheme, sockaddr[0], sockaddr[1], url.path), name)
            raise RuntimeError("curl: unable to download %s (returned: %s)" % (real_url, ret))

        os.chmod(temp, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)

        # Due to time-cond the file size may be zero
        # A new file downloaded, put it in place
        if not exists or os.path.getsize(temp) > 0:
            shutil.move(temp, dest)

    finally:
        # if we had an error and the temp file is left over, delete it
        if os.path.exists(temp):
            os.unlink(temp)

# Calculate a place to put images where links are not committed in git
def state_target(path):
    return os.path.join(DATA, path)

# Calculate a place to put images where links are committed in git
def committed_target(image):
    link = os.path.join(IMAGES, image)
    if not os.path.islink(link):
        raise RuntimeError("image link does not exist: " + image)

    dest = os.readlink(link)
    relative_dir = os.path.dirname(os.path.abspath(link))
    full_dest = os.path.join(relative_dir, dest)
    while os.path.islink(full_dest):
        link = full_dest
        dest = os.readlink(link)
        relative_dir = os.path.dirname(os.path.abspath(link))
        full_dest = os.path.join(relative_dir, dest)

    dest = os.path.join(DATA, dest)

    # We have the file but there is not valid link
    if os.path.exists(dest) and not os.path.exists(link):
        os.symlink(dest, os.path.join(IMAGES, os.readlink(link)))

    # The image file in the images directory, may be same as dest
    image_file = os.path.join(IMAGES, os.readlink(link))

    # Double check that symlink in place but never make a cycle.
    if not os.path.exists(image_file) and os.path.abspath(dest) != os.path.abspath(image_file):
        os.symlink(os.path.abspath(dest), image_file)

    return dest

def download_images(image_list, force, quiet, state, store):
    if not os.path.exists(DATA):
        os.makedirs(DATA)

    # A default set of images are all links in git.  These links have
    # no directory part.  Other links might exist, such as the
    # auxiliary links created by committed_target above, and we ignore
    # them.
    if not image_list:
        image_list = []
        if not state:
            for filename in os.listdir(IMAGES):
                link = os.path.join(IMAGES, filename)
                if os.path.islink(link) and os.path.dirname(os.readlink(link)) == "":
                    image_list.append(filename)

    success = True

    for image in image_list:
        try:
            if state:
                target = state_target(image)
            else:
                target = committed_target(image)
            if force or state or not os.path.exists(target):
                download(target, force, quiet, store)
        except Exception as ex:
            success = False
            sys.stderr.write("image-download: {0}\n".format(str(ex)))

    return success

def main():
    parser = argparse.ArgumentParser(description='Download a bot state or images')
    parser.add_argument("--force", action="store_true", help="Force unnecessary downloads")
    parser.add_argument("--store", action="append", help="Where to find state or images")
    parser.add_argument("--quiet", action="store_true", help="Make downloading quieter")
    parser.add_argument("--state", action="store_true", help="Images or state not recorded in git")
    parser.add_argument('image', nargs='*')
    args = parser.parse_args()

    if not download_images(args.image, args.force, args.quiet, args.state, args.store):
        return 1

    return 0

if __name__ == '__main__':
    sys.exit(main())
