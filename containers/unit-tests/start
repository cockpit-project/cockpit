#!/usr/bin/python3

# This file is part of Cockpit.
#
# Copyright (C) 2022 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
import shlex
import sys
import tempfile
from subprocess import run


def logged(func):
    def wrapper(args, **kwargs):
        print('+', shlex.join(args))
        return func(args, **kwargs)
    return wrapper


def git(*args):
    run(['git', *args], check=True)


def git_output(*args):
    return run(['git', *args], check=True, capture_output=True, text=True).stdout.strip()


def podman(*args, check=True):
    if os.path.exists('/run/.toolboxenv'):
        cmd = ['flatpak-spawn', '--host', 'podman', *args]
    else:
        cmd = ['podman', *args]

    return run(cmd, check=check)


class PodmanTemporaryDirectory(tempfile.TemporaryDirectory):
    """TemporaryDirectory subclass capable of removing files owned by subuids"""
    @classmethod
    def _rmtree(cls, name, ignore_errors=False):  # noqa: FBT002
        del ignore_errors  # can't remove or rename this kwarg
        podman('unshare', 'rm', '-r', name)

    def __enter__(self):
        # Override the TemporaryDirectory behaviour of returning its name here
        return self


class SourceDirectory(PodmanTemporaryDirectory):
    def __init__(self):
        super().__init__(prefix='cockpit-source.')

    def prepare(self, args):
        if args.branch:
            opts = ['-c', 'advice.detachedHead=false', '-b', args.branch]
        else:
            opts = []

        git('clone', '--recurse-submodule=modules/*', *opts, '.', self.name)

        if not args.head and not args.branch:
            if stash := git_output('stash', 'create'):
                git('-C', self.name, 'fetch', '--quiet', '--no-write-fetch-head', 'origin', stash)
                git('-C', self.name, 'stash', 'apply', stash)

        if not args.no_node_modules:
            run([f'{self.name}/tools/node-modules', 'checkout'], check=True)


class ResultsDirectory(PodmanTemporaryDirectory):
    def __init__(self):
        super().__init__(prefix='cockpit-results.')

    def copy_out(self, destination):
        podman('unshare', 'cp', '-rT', self.name, destination)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v', action='store_true', help='Show commands when running them')
    parser.add_argument('--results', metavar='DIRECTORY', help="Copy container /results to the given host directory")

    group = parser.add_argument_group(title='Container options')
    group.add_argument('--image', default='ghcr.io/cockpit-project/unit-tests', help='Container image to use')
    group.add_argument('--image-tag', default='latest', help='Container image tag to use')
    group.add_argument('--env', metavar='NAME=VAL', action='append', default=[],
                       help='Set an environment variable in the container')
    group.add_argument('--network', action="store_true",
                       help="Enable network in the container (default: disabled)")
    group.add_argument('--interactive', '-i', action="store_true",
                       help="Interactive mode (implied by no command or script)")
    group.add_argument('--tty', '-t', action="store_true",
                       help="Allocate a pseudoterminal (implied by no command or script)")
    group.add_argument('--user', help="Pass through the --user flag to podman")
    group.add_argument('--entrypoint', metavar='CMD', help="Provide the --entrypoint flag to podman")
    group.add_argument('--workdir', help="Provide the --workdir flag to podman")

    group = parser.add_argument_group(title='What to build').add_mutually_exclusive_group()
    group.add_argument('--head', action='store_true', help='Build the HEAD commit')
    group.add_argument('-b', dest='branch', metavar='NAME', help='Build the named branch or tag')
    group.add_argument('--work-tree', action='store_true',
                       help='Build the HEAD commit, plus changes on the filesystem (default)')

    group = parser.add_argument_group(title='Preparation').add_mutually_exclusive_group()
    group.add_argument('--no-node-modules', action='store_true',
                       help='Disable checking out node_modules/ during preparation')

    group = parser.add_argument_group(title='Command to run').add_mutually_exclusive_group()
    group.add_argument('-c', metavar='SCRIPT', dest='script', help="Run the provided shell script")
    group.add_argument('--make-dist', action='store_true', help='Run `make dist`.  Requires --results.')
    group.add_argument('--make', metavar='TARGET', help='Run `make` on the given target')
    # re: default=[]: https://github.com/python/cpython/issues/86020
    group.add_argument('command', metavar='CMD', nargs='*', default=[], help="Run a normal command, with arguments")

    args = parser.parse_args()

    if args.results and os.path.exists(args.results):
        parser.error(f'--results directory `{args.results}` already exists')

    if args.make_dist and not args.results:
        parser.error('--make-dist requires --results directory')

    if args.verbose:
        global run
        run = logged(run)

    with SourceDirectory() as source_dir, ResultsDirectory() as results_dir:
        options = {
            '--rm',
            '--log-driver=none',
            f'--volume={source_dir.name}:/source:Z,U',
        }

        if args.results:
            options.add(f'--volume={results_dir.name}:/results:Z,U')

        if not args.network:
            options.add('--network=none')
        if args.user:
            options.add(f'--user={args.user}')
        if args.entrypoint:
            options.add(f'--entrypoint={args.entrypoint}')
        if args.workdir:
            options.add(f'--workdir={args.workdir}')
        if args.interactive:
            options.add('--interactive')
        if args.tty:
            options.add('--tty')
        for keyval in args.env:
            options.add(f'--env={keyval}')

        command = []
        if args.command:
            command = args.command
        elif args.script:
            command = ['sh', '-c', args.script]
        elif args.make:
            command = ['sh', '-c', '/source/autogen.sh; exec make -j$(nproc) ' + shlex.quote(args.make)]
        elif args.make_dist:
            command = ['sh', '-c', 'cp -t /results $(/source/tools/make-dist)']
        else:
            options.update(['--tty', '--interactive'])

        source_dir.prepare(args)

        result = podman('run', *options, f'{args.image}:{args.image_tag}', *command)

        if result.returncode == 0 and args.results:
            results_dir.copy_out(args.results)

        return result.returncode


if __name__ == '__main__':
    sys.exit(main())
