if WITH_COCKPIT_WS

COCKPIT_BUILD_INFO = "Built on $(shell date)"

noinst_LIBRARIES += libcockpit-ws.a

libcockpit_ws_a_SOURCES = \
	src/ws/cockpitws.h				\
	src/ws/cockpithandlers.h	src/ws/cockpithandlers.c	\
	src/ws/cockpitauth.h		src/ws/cockpitauth.c		\
	src/ws/cockpitchannelresponse.h \
	src/ws/cockpitchannelresponse.c \
	src/ws/cockpitchannelsocket.h \
	src/ws/cockpitchannelsocket.c \
	src/ws/cockpitcreds.h src/ws/cockpitcreds.c \
	src/ws/cockpitwebservice.h \
	src/ws/cockpitwebservice.c \
	src/ws/cockpitsshtransport.h \
	src/ws/cockpitsshtransport.c \
	src/ws/cockpitsshagent.h \
	src/ws/cockpitsshagent.c \
	$(NULL)

libcockpit_ws_a_CFLAGS = \
	-I$(top_srcdir)/src/ws \
	-DCOCKPIT_BUILD_INFO=\"$(COCKPIT_BUILD_INFO)\"	\
	-DG_LOG_DOMAIN=\"cockpit-ws\" \
	$(COCKPIT_WS_CFLAGS) \
	$(NULL)

libcockpit_ws_LIBS = \
	libcockpit-ws.a \
	libcockpit-common.a \
	libwebsocket.a \
	libreauthorize.a \
	$(COCKPIT_WS_LIBS) \
	$(REAUTHORIZE_LIBS) \
	$(NULL)

test_rsa_key: src/ws/test_rsa
	$(AM_V_GEN) cp $< $@ && chmod 600 $@
noinst_DATA += test_rsa_key

CLEANFILES += \
	test_rsa_key \
	$(NULL)

EXTRA_DIST += \
	src/ws/mock_rsa_key \
	src/ws/mock_dsa_key \
	src/ws/test_rsa \
	src/ws/test_rsa.pub \
	src/ws/mock_cert \
	src/ws/mock_known_hosts \
	src/ws/mock-pid-cat \
	src/ws/mock-kdc \
	src/ws/mock-krb5.conf.in \
	src/ws/mock-kdc.conf.in \
	src/ws/mock-static \
	src/ws/mock-config.conf \
	src/ws/mock-auth-command \
	$(NULL)

# ----------------------------------------------------------------------------------------------------

libexec_PROGRAMS += cockpit-ws cockpit-session

cockpit_session_SOURCES = src/ws/session.c
cockpit_session_LDADD = $(COCKPIT_SESSION_LIBS)

cockpit_ws_SOURCES =					\
	src/ws/main.c					\
	$(NULL)

cockpit_ws_CFLAGS = 					\
	-DG_LOG_DOMAIN=\"cockpit-ws\"			\
	-I$(top_srcdir)/src/ws				\
	$(COCKPIT_WS_CFLAGS)				\
	$(NULL)

cockpit_ws_LDADD = 					\
	$(libcockpit_ws_LIBS) \
	$(COCKPIT_WS_LIBS)					\
	$(NULL)

dist_systemdunit_DATA += src/ws/cockpit.socket

cockpit.service : src/ws/cockpit.service.in Makefile.am
	$(AM_V_GEN) $(SED_SUBST) $< > $@
nodist_systemdunit_DATA += cockpit.service

mock-auth-command: src/ws/mock-auth-command
	$(AM_V_GEN) $(SED_SUBST) $< > $@
	chmod +x $@

firewalldir = $(prefix)/lib/firewalld/services
firewall_DATA = src/ws/cockpit.xml

# If running cockpit-ws as a non-standard user, we also set up
# cockpit-session to be setuid root, but only runnable by cockpit-session
install-exec-hook::
	chown -f root:$(COCKPIT_GROUP) $(DESTDIR)$(libexecdir)/cockpit-session || true
	test "$(COCKPIT_USER)" != "root" && chmod -f 4750 $(DESTDIR)$(libexecdir)/cockpit-session || true

EXTRA_DIST += \
	src/ws/cockpit.service.in \
	$(firewall_DATA) \
	$(NULL)

CLEANFILES += \
	cockpit.service \
	mock-auth-command \
	$(NULL)

@INTLTOOL_XML_RULE@
appdatadir = $(datadir)/appdata
appdata_DATA = src/ws/cockpit.appdata.xml
appdata_in_files = src/ws/cockpit.appdata.xml.in

@INTLTOOL_DESKTOP_RULE@
desktopdir = $(datadir)/applications
desktop_in_files = src/ws/cockpit.desktop.in
desktop_DATA = src/ws/cockpit.desktop

pixmapdir = $(datadir)/pixmaps
pixmap_DATA = src/ws/cockpit.png

CLEANFILES += \
	$(appdata_DATA) \
	$(desktop_DATA) \
	$(NULL)

EXTRA_DIST += \
	$(appdata_in_files) \
	$(desktop_in_files) \
	$(pixmap_DATA) \
	$(NULL)

# ----------------------------------------------------------------------------------------------------

noinst_PROGRAMS += test-server
check_PROGRAMS += test-server

test_server_SOURCES = src/ws/test-server.c $(mock_dbus_sources)
nodist_test_server_SOURCES = $(test_built_sources)
test_server_CFLAGS = 					\
	-I$(top_srcdir)/src/ws \
	-DG_LOG_DOMAIN=\"test-server\"			\
	$(GIO_CFLAGS)					\
	$(COCKPIT_WS_CFLAGS) \
	$(NULL)

test_server_LDADD = 					\
	$(libcockpit_ws_LIBS) \
	$(GIO_LIBS)					\
	-lpam 						\
	$(NULL)

WS_CHECKS = \
	test-creds \
	test-auth \
	test-sshtransport \
	test-sshagent \
	test-webservice \
	test-channelresponse \
	test-handlers \
	test-kerberos \
	$(NULL)

test_auth_CFLAGS = $(cockpit_ws_CFLAGS)

test_auth_SOURCES = \
	src/ws/test-auth.c \
	src/ws/mock-auth.c \
	src/ws/mock-auth.h \
	$(NULL)

test_auth_LDADD = \
	libcockpit-ws.a \
	$(cockpit_ws_LDADD) \
	$(NULL)

test_channelresponse_CFLAGS = $(cockpit_ws_CFLAGS)
test_channelresponse_SOURCES = src/ws/test-channelresponse.c \
	src/ws/mock-auth.c src/ws/mock-auth.h \
	src/common/mock-io-stream.c src/common/mock-io-stream.h \
	$(NULL)
test_channelresponse_LDADD = \
	libwebsocket.a \
	libcockpit-ws.a \
	$(cockpit_ws_LDADD) \
	$(NULL)

test_creds_CFLAGS = $(cockpit_ws_CFLAGS)
test_creds_SOURCES = src/ws/test-creds.c
test_creds_LDADD = \
	libcockpit-ws.a \
	$(cockpit_ws_LDADD)

test_handlers_CFLAGS = $(cockpit_ws_CFLAGS)

test_handlers_SOURCES = \
	src/ws/test-handlers.c \
	src/ws/mock-auth.c src/ws/mock-auth.h \
	src/common/mock-io-stream.c src/common/mock-io-stream.h \
	$(NULL)

test_handlers_LDADD = \
	libcockpit-ws.a \
	$(cockpit_ws_LDADD) \
	$(NULL)

test_sshtransport_SOURCES = \
	src/ws/test-sshtransport.c \
	$(NULL)
test_sshtransport_CFLAGS = $(cockpit_ws_CFLAGS)
test_sshtransport_LDADD = \
	libwebsocket.a \
	libcockpit-ws.a \
	$(cockpit_ws_LDADD) \
	$(NULL)


test_sshagent_CFLAGS = $(cockpit_ws_CFLAGS)
test_sshagent_SOURCES = src/ws/test-sshagent.c

test_sshagent_LDADD = \
	libcockpit-ws.a \
	$(cockpit_ws_LDADD)

test_webservice_SOURCES = \
	src/ws/test-webservice.c \
	src/ws/mock-auth.c src/ws/mock-auth.h \
	src/common/mock-io-stream.c src/common/mock-io-stream.h \
	$(NULL)

test_webservice_CFLAGS = $(cockpit_ws_CFLAGS)

test_webservice_LDADD = \
	libwebsocket.a \
	libcockpit-ws.a \
	$(cockpit_ws_LDADD) \
	$(NULL)

test_kerberos_SOURCES = src/ws/test-kerberos.c
test_kerberos_LDADD = libcockpit-ws.a $(cockpit_ws_LDADD)
test_kerberos_CFLAGS = $(cockpit_ws_CFLAGS)

mock_agent_bridge_SOURCES = src/ws/mock-agent-bridge.c \
	src/bridge/cockpitchannel.c src/bridge/cockpitchannel.h \
	src/bridge/cockpitpipechannel.c src/bridge/cockpitpipechannel.h \
    $(NULL)

mock_agent_bridge_CFLAGS = \
	-DG_LOG_DOMAIN=\"mock-agent-bridge\" \
    $(COCKPIT_WS_CFLAGS) \
	$(NULL)
mock_agent_bridge_LDADD = libcockpit-ws.a \
	$(cockpit_ws_LDADD) \
	$(NULL)

mock_sshd_SOURCES = src/ws/mock-sshd.c
mock_sshd_CFLAGS =  $(COCKPIT_WS_CFLAGS)
mock_sshd_LDADD = $(COCKPIT_WS_LIBS) -lutil

mock_echo_SOURCES = src/ws/mock-echo.c
mock_echo_CFLAGS = $(COCKPIT_WS_CFLAGS)
mock_echo_LDADD = $(COCKPIT_WS_LIBS)

noinst_PROGRAMS += \
	$(WS_CHECKS) \
	mock-sshd \
	mock-echo \
	mock-agent-bridge \
	$(NULL)

noinst_SCRIPTS += \
	src/ws/mock-pid-cat \
	mock-auth-command \
	$(NULL)

TESTS += $(WS_CHECKS)

install-exec-hook::
	mkdir -p $(DESTDIR)$(sysconfdir)/cockpit/ws-certs.d
	chmod 755 $(DESTDIR)$(sysconfdir)/cockpit/ws-certs.d $(DESTDIR)$(sysconfdir)/cockpit/ws-certs.d

update-known-hosts:
	cat $(srcdir)/src/ws/mock_*.pub | \
		sed -ne 's/\(.*\) [^ ]\+$$/[localhost]:*,[127.0.0.1]:* \1/p' > \
			$(srcdir)/src/ws/mock_known_hosts

endif
