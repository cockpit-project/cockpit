#!/usr/bin/env python
# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
import re
import sys
import subprocess

basepath = os.path.join(os.path.dirname(os.path.abspath(__file__)),"..")
if not basepath in sys.path:
    sys.path.insert(1, basepath)
from common import testinfra
from common import testvm


image_list="ipa openshift fedora-stock"

parser = argparse.ArgumentParser(
        description='Prepare testig environment, download images and build and cinstall cockpit',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
parser.add_argument('-v', '--verbose', action='store_true', help='Display verbose progress details')
parser.add_argument('-c', '--check', action='store_true', help='Check if cockpit is installed on machine')
parser.add_argument('-f', '--force', action='store_true', help='Force update of images')
parser.add_argument('image', nargs='?', default=testinfra.DEFAULT_IMAGE, help='The image to use')
args = parser.parse_args()

test_os = args.image
build_os = test_os

if test_os == "fedora-atomic":
    build_os = "fedora-23"
elif test_os == "rhel-atomic":
    build_os = "rhel-7"

def check_cockpit():
    try:
        machine = testvm.VirtMachine(verbose=args.verbose, image=test_os, label="install")
        machine.start(maintain=True)
        machine.wait_boot()
        machine.execute('test -f /usr/bin/cockpit-bridge')
        machine.execute('test -f /usr/libexec/cockpit-ws')
    except Exception as e:
        return False
    finally:
        machine.stop()
    return True


os.system("%s/vm-reset" % basepath)
if args.check and check_cockpit():
    print "cockpit already installed on testing image"
else:
    os.system("%s/vm-download %s %s" % (basepath, test_os, build_os))
    os.system("%s/vm-install --build-image %s" % (basepath, build_os))
os.system("%s/vm-download %s" % (basepath, image_list))

