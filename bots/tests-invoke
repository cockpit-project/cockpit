#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2016 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import errno
import os
import socket
import subprocess
import sys
import traceback

sys.dont_write_bytecode = True

from task import github
from task import sink

HOSTNAME = socket.gethostname().split(".")[0]
BOTS = os.path.abspath(os.path.dirname(__file__))
BASE = os.path.normpath(os.path.join(BOTS, ".."))
DEVNULL = open("/dev/null", "r+")

def main():
    parser = argparse.ArgumentParser(description='Run integration tests')
    parser.add_argument('-j', '--jobs', dest="jobs", type=int,
            default=os.environ.get("TEST_JOBS", 1), help="Number of concurrent jobs")
    parser.add_argument('--rebase', help="Rebase onto the specific branch before testing")
    parser.add_argument('--remote', help="The Git remote to use (instead of 'origin')",
                        default="origin")
    parser.add_argument('-o', "--offline", action='store_true',
            help="Work offline, don''t fetch new data from origin for rebase")
    parser.add_argument('--publish', dest='publish', default=os.environ.get("TEST_PUBLISH", ""),
            action='store', help='Publish results centrally to a sink')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output')
    parser.add_argument('--pull-number', help="The number of the pull request to test")
    parser.add_argument('context', help="The context or type of integration tests to run")
    parser.add_argument('ref', nargs='?', help="The Git remote ref to pull")
    opts = parser.parse_args()

    name = os.environ.get("TEST_NAME", "tests")
    revision = os.environ.get("TEST_REVISION")
    test_project = os.environ.get("TEST_PROJECT")
    github_revision = os.environ.get("GITHUB_REVISION")

    try:
        task = PullTask(name, revision, opts.ref, opts.context, opts.rebase, opts.remote,
                        test_project=test_project, github_revision=github_revision)
        ret = task.run(opts)
    except RuntimeError as ex:
        ret = str(ex)

    if ret:
        sys.stderr.write("tests-invoke: {0}\n".format(ret))
        return 1
    return 0

class PullTask(object):
    def __init__(self, name, revision, ref, context, base, remote, test_project, github_revision):
        self.name = name
        self.revision = revision
        self.ref = ref
        self.context = context
        self.base = base
        self.remote = remote
        self.test_project = test_project
        self.github_revision = github_revision

        self.sink = None
        self.github_status_data = None

    def detect_collisions(self, opts):
        api = github.GitHub()
        if not self.github_revision:
            self.github_revision = self.revision

        if opts.pull_number:
            pull = api.get("pulls/{0}".format(opts.pull_number))
            if pull:
                if pull["head"]["sha"] != self.revision:
                    return "Newer revision available on GitHub for this pull request"
                if pull["state"] != "open":
                    return "Pull request isn't open"

        if not self.github_revision:
            return None

        statuses = api.get("commits/{0}/statuses".format(self.github_revision))
        for status in statuses:
            if status.get("context") == self.context:
                if status.get("state") == "pending" and status.get("description") not in [github.NOT_TESTED, github.NOT_TESTED_DIRECT]:
                    return "Status of context isn't pending or description is not in [{0}, {1}]".format(github.NOT_TESTED, github.NOT_TESTED_DIRECT)
                else: # only check the newest status of the supplied context
                    return None

    def start_publishing(self, host):
        api = github.GitHub()

        # build a unique file name for this test run
        id_context = self.context
        if self.test_project:  # disambiguate when running several external projects
            id_context = self.test_project + "-" + id_context
        identifier = "-".join([
            self.name.replace("/", "-"),
            self.github_revision[0:8],
            id_context.replace("/", "-")
        ])

        description = "{0} [{1}]".format(github.TESTING, HOSTNAME)

        # build a globally unique test context for GitHub statuses
        github_context = self.context
        if self.test_project:  # disambiguate tests for external projects
            github_context += "@" + self.test_project

        self.github_status_data = {
            "state": "pending",
            "context": github_context,
            "description": description,
            "target_url": ":link"
        }

        status = {
            "github": {
                "token": api.token,
                "requests": [
                    # Set status to pending
                    { "method": "POST",
                      "resource": api.qualify("commits/" + self.github_revision + "/statuses"),
                      "data": self.github_status_data
                    }
                ],
                "watches": [{
                    "resource": api.qualify("commits/" + self.github_revision + "/status?per_page=100"),
                    "result": {
                        "statuses": [
                            {
                                "context": github_context,
                                "description": description,
                                "target_url": ":link"
                            }
                        ]
                    }
                }]
            },
            "revision": self.github_revision,
            "onaborted": {
                "github": {
                    "token": api.token,
                    "requests": [
                        # Set status to error
                        { "method": "POST",
                          "resource": api.qualify("statuses/" + self.github_revision),
                          "data": {
                              "state": "error",
                              "context": self.context,
                              "description": "Aborted without status",
                              "target_url": ":link"
                          }
                        }
                    ]
                },
            }
        }

        if self.context.startswith("cockpit/"):
            # third-party project, link directly to text log
            status["link"] = "log"
        else:
            # testing cockpit itself, use HTML log
            status["link"] = "log.html"
            status["extras"] = [ "https://raw.githubusercontent.com/cockpit-project/cockpit/{0}/bots/task/log.html".format(self.github_revision) ]


        # Include information about which base we're testing against
        if self.base:
            subprocess.check_call([ "git", "fetch", self.remote, self.base ])
            commit = subprocess.check_output([ "git", "rev-parse", self.remote + "/" + self.base ],
                                             universal_newlines=True).strip()
            status["base"] = commit

        (prefix, unused, image) = self.context.partition("/")
        if not self.base:
            status['irc'] = { }    # Only send to IRC when master

        # For other scripts to use
        os.environ["TEST_DESCRIPTION"] = description
        self.sink = sink.Sink(host, identifier, status)

    def rebase(self):
        remote_base = self.remote + "/" + self.base

        # Rebase this branch onto the base, but only if it's not already an ancestor
        try:
            if subprocess.call([ "git", "merge-base", "--is-ancestor", remote_base, "HEAD" ]) != 0:
                sha = subprocess.check_output([ "git", "rev-parse", remote_base ], universal_newlines=True).strip()
                sys.stderr.write("Rebasing onto {0} ({1}) ...\n".format(remote_base, sha))
                subprocess.check_call([ "git", "reset", "HEAD" ])
                subprocess.check_call([ "git", "rebase", remote_base ])
        except subprocess.CalledProcessError:
            subprocess.call([ "git", "rebase", "--abort" ])
            traceback.print_exc()
            return "Rebase failed"

        return None

    def prepare(self, prefix, value, image, verbose=False):
        sys.stderr.write("Preparing image: building and installing Cockpit ...\n")

        try:
            # Download all the additional images so that even older branches find them
            subprocess.check_call([ os.path.join(BOTS, "image-download"),
                "candlepin", "fedora-stock", "fedora-23-stock",
                "ipa", "openshift", "selenium"
            ])

        except subprocess.CalledProcessError:
            return "Downloading of additional images failed"

        # COMPAT: Create a legacy tmp/run directory to prevent races during testing
        try:
            os.makedirs(os.path.join(BASE, "test", "tmp", "run"))
        except OSError as ex:
            if ex.errno != errno.EEXIST:
                raise

        # Now actually run the prepare tooling
        cmd = [ os.path.join(BOTS, "image-prepare") ]
        if prefix == "image" or prefix == "container":
            cmd += [ "--containers" ]
        cmd += [ "--verbose" ]

        # Flush our own output before invoking the command
        sys.stdout.flush()
        sys.stderr.flush()

        try:
            # Do the basic prepare
            subprocess.check_call(cmd + [ image ])

            # For containers tests we install to openshift too
            if value == "kubernetes":
                subprocess.check_call(cmd + [ "--install-only", "openshift" ])

        except subprocess.CalledProcessError:
            return "Preparation of testable image failed"

    def stop_publishing(self, ret):
        sink = self.sink
        def mark_failed():
            if "github" in sink.status:
                self.github_status_data["state"] = "failure"
            if "irc" in sink.status: # Never send success messages to IRC
                sink.status["irc"]["channel"] = "#cockpit"
        def mark_passed():
            if "github" in sink.status:
                self.github_status_data["state"] = "success"
        if isinstance(ret, str):
            message = ret
            mark_failed()
            ret = 0
        elif ret == 0:
            message = "Tests passed"
            mark_passed()
        else:
            message = "{0} tests failed".format(ret)
            mark_failed()
            ret = 0 # A failure, but not for this script
        sink.status["message"] = message
        if "github" in sink.status:
            self.github_status_data["description"] = message
        try:
            del sink.status["extras"]
        except KeyError:
            pass
        sink.flush()

        return ret

    def run(self, opts):
        # Collision detection
        ret = self.detect_collisions(opts)
        if ret:
            sys.stderr.write('Collision detected: {0}\n'.format(ret))
            return None

        if opts.publish:
            self.start_publishing(opts.publish)
            os.environ["TEST_ATTACHMENTS"] = self.sink.attachments

        head = subprocess.check_output([ "git", "rev-parse", "HEAD" ], universal_newlines=True).strip()
        if self.ref:
            if not opts.offline:
                subprocess.check_call([ "git", "fetch", self.remote, self.ref ])
            if not self.revision:
                self.revision = subprocess.check_output([ "git", "rev-parse", "FETCH_HEAD" ], universal_newlines=True).strip()
            # Force a checkout of the ref if not already checked out
            if not head.lower().startswith(self.revision.lower()):
                subprocess.check_call([ "git", "checkout", "-f", self.revision ])

        if not self.revision:
            self.revision = head

        # Retrieve information about our base branch and master (for bots/)
        if self.base and not opts.offline:
            subprocess.check_call([ "git", "fetch", self.remote, self.base, "master" ])

        # Clean out the test directory
        subprocess.check_call([ "git", "clean", "-d", "--force", "--quiet", "-x", "--", "test/" ])

        os.environ["TEST_NAME"] = self.name
        os.environ["TEST_REVISION"] = self.revision

        # Split a value like verify/fedora-atomic
        (prefix, unused, value) = self.context.partition("/")

        if prefix in [ 'container' ]:
            image = 'fedora-29'
        elif prefix in [ 'selenium', 'avocado' ]:
            image = 'fedora-30'
        elif prefix == 'cockpit':
            (image, _, scenario) = value.partition('/')
            if scenario:
                os.environ["TEST_SCENARIO"] = scenario
        else:
            image = value
        os.environ["TEST_OS"] = image

        msg = "Testing {0} for {1} with {2} on {3}...\n".format(self.github_revision, self.name,
                                                                self.context, HOSTNAME)
        sys.stderr.write(msg)

        ret = None

        if self.base:
            ret = self.rebase()

        test = os.path.join(BOTS, "..", "test")

        # Figure out what to do next
        if prefix == "verify":
            cmd = [ "timeout", "120m", os.path.join(test, "verify", "run-tests"),
                    "--jobs", str(opts.jobs) ]
        elif prefix == "avocado":
            cmd = [ "timeout", "60m", os.path.join(test, "avocado", "run-tests"),
                    "--quick", "--tests" ]
        elif prefix == "selenium":
            if value not in ['firefox', 'chrome', 'edge']:
                ret = "Unknown browser for selenium test"
            cmd = [ "timeout", "60m", os.path.join(test, "avocado", "run-tests"),
                    "--quick", "--selenium-tests", "--browser", value]
        elif prefix == "image" or prefix == "container":
            cmd = [ "timeout", "90m", os.path.join(test, "containers", "run-tests"),
                    "--container", value]
        elif prefix == "cockpit":
            cmd = [ "timeout", "120m", os.path.join(test, "run") ]
        else:
            ret = "Unknown context"


        # Prepare the image to run
        if not ret and prefix != "cockpit":
            ret = self.prepare(prefix, value, image, opts.verbose)

        # Flush our own output before running command
        sys.stdout.flush()
        sys.stderr.flush()

        # Actually run the tests
        if not ret:
            if opts.verbose:
                cmd.append("--verbose")
            ret = subprocess.call(cmd)

        # All done
        if self.sink:
            ret = self.stop_publishing(ret)

        return ret

if __name__ == '__main__':
    sys.exit(main())
