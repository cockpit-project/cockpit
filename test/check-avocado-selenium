#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import unittest

import avocadolib
import testvm
from testlib import *

avocado_tests = ["selenium-login.py"]

@unittest.skipIf("atomic" in os.environ.get("TEST_OS", ""), "atomic: missing avocado")
@unittest.skipIf("debian" in os.environ.get("TEST_OS", ""), "Debian: missing avocado")
class TestAvocadoSeleniumSuite(MachineCase):
    def wait_for_selenium_running(self, host, port=4444):
        """Wait until selenium is running.
        """
        WAIT_SELENIUM_RUNNING = """#!/bin/sh
until curl -s --connect-timeout 1 http://%s:%d >/dev/null; do
    sleep 0.5;
done;
""" % (host, port)
        with testvm.stdchannel_redirected(sys.stdout, os.devnull):
            with Timeout(seconds=30, error_message="Timeout while waiting for selenium to start"):
                self.machine.execute(script=WAIT_SELENIUM_RUNNING)

    def setUp(self):
        MachineCase.setUp(self)
        self.start_cockpit()

        self.selenium = self.new_machine(image="selenium")
        self.selenium.start()
        self.selenium.wait_boot()
        # start selenium on the server
        self.selenium.upload(["./guest/selenium_start.sh"], "/root")
        self.selenium.execute(command="/root/selenium_start.sh")

        self.allow_journal_messages("Error receiving data: Connection reset by peer",
                                    "Error sending data: Connection reset by peer",
                                    "connection unexpectedly closed by peer",
                                    ".*docker.sock.*No such file or directory",
                                    "ahoj notice",
                                    'Error: Could not obtain the password to be scored',
                                    'Password quality check failed:',
                                    'The password is a palindrome',
                                    'The password is shorter than 8 characters',
                                    '.*dev=.tmpfs..*scontext=system_u:system_r:syslogd_t:s0 tcontext=system_u:object_r:tmpfs_t:s0.*'
                                   )
        avocadolib.prepare_avocado_tests(self.machine)
        self.machine.execute("adduser test")
        self.machine.execute("echo superhardpasswordtest5554 | passwd --stdin test")
        self.machine.execute("usermod -a -G wheel test")
        self.machine.execute("echo 'test        ALL=(ALL)       NOPASSWD: ALL' >> /etc/sudoers")
        self.machine.execute("sed -i 's/^Defaults.*requiretty/#&/g' /etc/sudoers")
        self.machine.execute("echo 'Defaults !requiretty' >> /etc/sudoers")

        self.wait_for_selenium_running(self.selenium.address)

    def testAvocadoSeleniumFirefox(self):
        # GUEST needs to be the address of the machine
        # cockpit runs on from the selenium HUB's viewpoint
        # run these tests from the result directory
        env = [ "HUB=" + self.selenium.address,
                "BROWSER=firefox",
                "GUEST=" + self.machine.address
              ]
        if not avocadolib.run_avocado(machine=self.machine, avocado_tests=avocado_tests, print_failed=True, env=env):
            self.fail("avocado tests failed")

    def testAvocadoSeleniumChrome(self):
        # GUEST needs to be the address of the machine
        # cockpit runs on from the selenium HUB's viewpoint
        # run these tests from the result directory
        env = [ "HUB=" + self.selenium.address,
                "BROWSER=chrome",
                "GUEST=" + self.machine.address
              ]
        if not avocadolib.run_avocado(machine=self.machine, avocado_tests=avocado_tests, print_failed=True, env=env):
            self.fail("avocado tests failed")

if __name__ == '__main__':
    test_main()
