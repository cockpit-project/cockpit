#!/usr/bin/env python

import glob
import imp
import os
import string
import subprocess
import sys
import traceback
import unittest

import testinfra

sys.dont_write_bytecode = True

EXCLUDE = [
    'check-verify',
    'check-example'
]

def start_publishing(github, host, name, revision):
    identifier = name + "-" + revision[0:8] + "-" + testinfra.OS + "-" + testinfra.ARCH
    status = {
        "github": {
            "resource": github.qualify("statuses/" + revision),
            "status": {
                "state": "pending",
                "context": github.context(),
                "description": testinfra.TESTING
            }
        }
    }
    if name == "master":
        status['badge'] = {
            'name': testinfra.OS + "-" + testinfra.ARCH,
            'description': testinfra.OS,
            'status': 'running'
        }
    return testinfra.Sink(host, identifier, status)

def stop_publishing(sink, ret):
    def mark_failed():
        sink.status["github"]["status"]["state"] = "failure"
        if 'badge' in sink.status:
            sink.status['badge']['status'] = "failed"
        # sink.status["irc"] = "#cockpit"
    def mark_passed():
        sink.status["github"]["status"]["state"] = "success"
        if 'badge' in sink.status:
            sink.status['badge']['status'] = "passed"
    if isinstance(ret, basestring):
        message = ret
        mark_failed()
    elif ret == 0:
        message = "All tests passed"
        mark_passed()
    else:
        message = "{0} tests failed".format(ret)
        mark_failed()
    sink.status["message"] = message
    sink.status["github"]["status"]["description"] = message
    sink.flush()

def check_valid(filename):
    name = os.path.basename(filename)
    if name in EXCLUDE:
        return None
    allowed = string.ascii_letters + string.digits + '-_'
    if not all(c in allowed for c in name):
        return None
    return name.replace("-", "_")

def rebase(sink):
    try:
        sys.stderr.write("Rebasing onto origin/master ...\n")
        subprocess.check_call([ "git", "fetch", "origin", "master" ])
        if sink:
            master = subprocess.check_output([ "git", "rev-parse", "origin/master" ]).strip()
            sink.status["master"] = master
        subprocess.check_call([ "git", "rebase", "origin/master" ])
    except:
        subprocess.call([ "git", "rebase", "--abort" ])
        traceback.print_exc()
        raise RuntimeError("Rebase failed")

def install(opts):
    try:
        sys.stderr.write("Building and installing Cockpit ...\n")
        cmd = [ "./testsuite-prepare" ]
        if opts.clean:
            cmd.append("--clean")
        if opts.verbosity:
            cmd.append("--verbose")
        if opts.quick:
            cmd.append("--quick")
        subprocess.check_call(cmd)
    except:
        traceback.print_exc()
        raise RuntimeError("Install failed")

def step(opts, sink):
    if opts.rebase:
        rebase(sink)
    if opts.install:
        install(opts)

    # Now actually load the tests, any modules that start with "check-*"
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    for filename in glob.glob("check-*"):
        name = check_valid(filename)
        if not name or not os.path.isfile(filename):
            continue
        with open(filename, 'rb') as fp:
            module = imp.load_module(name, fp, filename, ("", "rb", imp.PY_SOURCE))
            suite.addTest(loader.loadTestsFromModule(module))

    # And now load new testlib, and run all the tests we got
    import testlib
    return testlib.test_main(opts=opts, suite=suite)

def main():
    parser = testinfra.arg_parser()
    parser.add_argument('--publish', dest='publish', action='store',
                        help='Publish results centrally to a sink')
    parser.add_argument('--rebase', dest='rebase', action='store_true',
                        help='Rebase onto master before running tests')
    parser.add_argument('--github', dest='github', action='store',
                        help='Test something from GitHub (next, scan, NNNN)')
    parser.add_argument('--install', dest='install', action='store_true',
                        help='Build and install Cockpit into test VMs')
    parser.add_argument('--quick', dest='quick', action='store_true',
                        help="Build test VMs quicker")
    parser.add_argument('--clean', dest='clean', action='store_true',
                        help="Build test VMs from clean state")
    opts = parser.parse_args()

    revision = None
    status = { }
    sink = None
    name = "test"
    revision = None
    badge = False

    os.chdir(os.path.dirname(__file__))

    # In case we need it
    github = testinfra.GitHub()

    # These are implied
    if opts.github:
        opts.install = True
        opts.rebase = True

    # When letting github decide what to test
    if opts.github in [ "next", "scan" ]:
        sys.stderr.write("Talking to GitHub about {0} ...\n".format(github.context()))
        for (priority, name, revision, ref) in github.scan(opts.publish):
            if opts.github == "scan":
                return 0 # Only scanning, no tests

            # Get the relevant commit
            subprocess.check_call([ "git", "fetch", "origin", ref ])
            subprocess.check_call([ "git", "checkout", revision ])
            break

        # Nothing to test
        else:
            if opts.github == "next":
                return 1
            return 0

    # A specific github thing to test
    elif opts.github:
        try:
            ref = "pull/{0}/head".format(int(opts.github))
            name = "pull-" + opts.github
        except:
            ref = opts.github
            name = opts.github.replace("/", "-")
        subprocess.check_call([ "git", "fetch", "origin", ref ])
        subprocess.check_call([ "git", "checkout", "FETCH_HEAD" ])

    if not revision:
        revision = subprocess.check_output([ "git", "rev-parse", "HEAD" ]).strip()

    if opts.publish:
        sink = start_publishing(github, opts.publish, name, revision)
        os.environ["TEST_ATTACHMENTS"] = sink.attachments

    # Tell any subprocesses what we are testing
    os.environ["TEST_REVISION"] = revision

    sys.stderr.write("Testing {0} for {1} ...\n".format(revision, name))

    try:
        ret = step(opts, sink)
    except RuntimeError as exc:
        ret = exc.args[0]
        sys.stderr.write(ret + "\n")

    # All done
    if sink:
        stop_publishing(sink, ret)

    # This script is always successful in github case
    if opts.github:
        return 0

    # But normally we return number of tests failed
    return ret

if __name__ == '__main__':
    sys.exit(main())
