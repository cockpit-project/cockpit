#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *

class TestNetworking(MachineCase):
    def testBasic(self):
        b = self.browser
        m = self.machine

        # Something strange is happening here.
        #
        # When hot-plugging the network interface below, it is
        # automatically recognized and NM will create a connection
        # settings object for it with path
        # /org/freedesktop/NetworkManager/Settings/1.  No file in
        # /etc/sysconfig/network-scripts exists for it.  The interface
        # will be activated automatically with those default settings.
        #
        # Calling 'Update' on that object will cause a file to be
        # created in /etc/sysconfig/network-scripts, the connection is
        # activated immediately (so that the actual IP address of the
        # network interface changes), the settings object disappears
        # from D-Bus, and a new object with the same id and uuid
        # appears at /org/freedesktop/NetworkManager/Settings/2.
        #
        # We race against this when subsequently calling
        # 'ActivateConnection'.  When 'Update' and
        # 'ActivateConnection' were triggered by separate buttons, we
        # lost that race reliably and used the old path when it wasn't
        # any longer recognized by NM.  Now when clicking "Apply" does
        # both back-to-back, we seem to win the race reliably.
        #
        # When calling 'Update' on a connection settings object for
        # which a file exists in /e/s/ns, the above strangeness
        # doesn't happen.  The interface is not automatically
        # reactivated with those settings, and the object stays on
        # D-Bus.

        # TODO: Make this work with non-root
        #
        # See https://bugzilla.gnome.org/show_bug.cgi?id=707983 for
        # one issue.

        b.default_user = "root"

        self.login_and_go("networking")
        b.wait_in_text("#networking-interfaces", m.address)

        # Add interface, wait for it to be recognized and activated by
        # Network Manager, and switch to its page
        #
        mac = m.add_netiface('ff')
        iface_row = "#networking-interfaces tr:contains('%s')" % mac.upper()
        b.wait_in_text("#networking-interfaces", mac.upper())
        b.wait_in_text(iface_row, "Active")
        b.click(iface_row)
        b.wait_page("network-interface")

        # Configure a manual IP address
        #
        b.wait_in_text("#network-interface", "IPv4")
        b.click("tr:contains('IPv4') button")
        b.wait_popup("network-ip-settings-dialog")
        b.click("#network-ip-settings-dialog a:contains('Manual')")
        b.click("#network-ip-settings-dialog tr:contains('Address') button:contains('Add')")
        b.set_val("#network-ip-settings-dialog table:contains('Address') td:first-child input", "1.2.3.4")
        b.click("#network-ip-settings-dialog button:contains('Apply')")
        b.wait_popdown("network-ip-settings-dialog")
        b.wait_in_text("#network-interface .panel:contains('Network hardware')", "1.2.3.4/24")

test_main()
