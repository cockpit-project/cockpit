#!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + "/../common/pywrap", sys.argv)

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import storagelib
import testlib


@testlib.nondestructive
class TestStorageUsed(storagelib.StorageCase):

    def testUsed(self):
        m = self.machine
        b = self.browser

        self.login_and_go("/storage")

        disk = self.add_ram_disk()
        b.wait_visible(self.card_row("Storage", name=disk))
        m.execute(f"parted -s {disk} mktable msdos")
        m.execute(f"parted -s {disk} mkpart primary ext2 1M 25")
        m.execute("udevadm settle")
        m.execute(f"echo einszweidrei | cryptsetup luksFormat --pbkdf-memory 32768 {disk}1")
        m.execute(f"echo einszweidrei | cryptsetup luksOpen {disk}1 dm-test")
        m.execute("udevadm settle")
        m.execute("mke2fs -q -L TEST /dev/mapper/dm-test")
        m.execute("mount /dev/mapper/dm-test /mnt")

        # Keep the mount point busy.  The extra "true" is here to
        # prevent bash from applying tail call optimization to the
        # "sleep" invocation.
        sleep_pid = m.spawn("cd /mnt; sleep infinity; true", "sleep")
        self.write_file("/etc/systemd/system/keep-mnt-busy.service",
                        """
[Unit]
Description=Test Service

[Service]
WorkingDirectory=/mnt
ExecStart=/usr/bin/sleep infinity
""")
        m.execute("systemctl start keep-mnt-busy")

        # Now all of /dev/mapper/dm-test, /dev/sda1, and /dev/sda
        # should be 'in use' but Cockpit can clean them all up anyway.

        self.click_card_row("Storage", name=disk)
        b.wait_visible(self.card("Solid State Drive"))

        self.click_card_row("DOS partitions", 1)
        self.click_card_dropdown("ext2 filesystem", "Format")
        self.dialog_wait_open()
        self.dialog_set_val("type", "ext4")
        b.click("#dialog button:contains(Currently in use)")
        b.wait_in_text(".pf-v5-c-popover", str(sleep_pid))
        b.wait_in_text(".pf-v5-c-popover", "keep-mnt-busy")
        b.assert_pixels(".pf-v5-c-popover", "popover",
                        mock={".pf-v5-c-popover__body ul:nth-of-type(2) li": "process (user: root, pid: 1234)"},
                        scroll_into_view="#dialog button:contains(Currently in use)")
        b.click(".pf-v5-c-popover button")
        b.assert_pixels('#dialog', "format", wait_after_layout_change=True)
        self.dialog_cancel()
        self.dialog_wait_close()

        self.click_card_dropdown("Partition", "Delete")
        self.dialog_wait_open()
        b.wait_visible("#dialog button:contains(Currently in use)")
        b.assert_pixels('#dialog', "delete")
        self.dialog_cancel()
        self.dialog_wait_close()

        # Now go ahead and let the automatic teardown take care of the mount

        b.click(self.card_parent_link())

        # Sometimes /dev/sda1 is still held open by something
        # immediately after locking it. This prevents the
        # kernel from reading the new partition table. Let's
        # just retry.

        def first_setup():
            self.dialog_set_val("type", "empty")
            b.wait_visible("#dialog tbody:first-of-type button:contains(Currently in use)")
            b.assert_pixels('#dialog', "format-disk")

        def retry_setup():
            self.dialog_set_val("type", "empty")

        self.dialog_with_error_retry(trigger=lambda: self.click_card_dropdown("Solid State Drive",
                                                                              "Create partition table"),
                                     first_setup=first_setup,
                                     retry_setup=retry_setup,
                                     errors=["Timed out waiting for object"])

        m.execute("! systemctl --quiet is-active keep-mnt-busy")

        b.wait_visible(self.card("Unformatted data"))

    def testUsedAsPV(self):
        m = self.machine
        b = self.browser

        self.login_and_go("/storage")

        dev_1 = self.add_ram_disk()
        dev_2 = self.add_loopback_disk()
        b.wait_visible(self.card_row("Storage", name=dev_1))
        b.wait_visible(self.card_row("Storage", name=dev_2))

        # Create a volume group out of two disks
        m.execute(f"vgcreate TEST1 {dev_1} {dev_2}")
        self.addCleanupVG("TEST1")
        b.wait_visible(self.card_row("Storage", name="TEST1"))

        # Formatting dev_1 should cleanly remove it from the volume
        # group.

        self.click_card_row("Storage", name=dev_1)
        self.click_card_dropdown("Solid State Drive", "Create partition table")
        b.wait_in_text('#dialog', "remove from LVM2, initialize")
        self.dialog_apply()
        self.dialog_wait_close()
        self.assertEqual(int(m.execute("vgs TEST1 -o pv_count --noheadings")), 1)

        # Formatting dev_2 should now cleanly remove the whole volume
        # group.

        b.go("#/")
        self.click_card_row("Storage", name=dev_2)
        self.click_card_dropdown("Block device", "Create partition table")
        b.wait_in_text('#dialog', "remove from LVM2, initialize")
        self.dialog_apply()
        self.dialog_wait_close()

        self.assertEqual(m.execute("vgs TEST1 || echo GONE").strip(), "GONE")

    def testTeardownRetry(self):
        m = self.machine
        b = self.browser

        self.login_and_go("/storage")

        disk = self.add_ram_disk()
        b.wait_visible(self.card_row("Storage", name=disk))
        m.execute(f"mke2fs -q -L TEST {disk}")
        m.execute(f"mount {disk} /mnt")

        self.click_card_row("Storage", name=disk)
        b.wait_in_text(self.card("ext2 filesystem"), "The filesystem is currently mounted on /mnt")

        # Start formatting, and while the dialog is open, make the
        # filesystem unmountable.
        #
        # We have two processes that keep the filesystem busy: one
        # that is supposed to be picked up by the dialog, and one that
        # is not. The first is only used to figure out when the dialog
        # is done initializing.

        m.spawn("cd /mnt; sleep infinity; true", "sleep")

        self.click_card_dropdown("Solid State Drive", "Create partition table")
        self.dialog_wait_open()
        b.wait_visible("#dialog tbody:first-of-type button:contains(Currently in use)")
        self.dialog_wait_apply_enabled()
        m.spawn("cd /mnt; sleep infinity; true", "sleep")
        self.dialog_apply()
        b.wait_in_text("#dialog", "umount: /mnt: target is busy")
        self.dialog_wait_apply_disabled()
        self.dialog_cancel()
        self.dialog_wait_close()

        self.click_card_dropdown("Solid State Drive", "Create partition table")
        self.dialog_wait_open()
        b.wait_visible("#dialog button:contains(Currently in use)")
        self.dialog_apply()
        self.dialog_wait_close()


if __name__ == '__main__':
    testlib.test_main()
