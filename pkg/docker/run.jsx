/*
 * This file is part of Cockpit.
 *
 * Copyright (C) 2015 Red Hat, Inc.
 *
 * Cockpit is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * Cockpit is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.
 */

define([
    "jquery",
    "base1/react",
    "base1/cockpit",
    "docker/util",
    "base1/cockpit-components-select",
    "performance/dialog-view",
], function($, React, cockpit, util, Select, Dialog) {
    var _ = cockpit.gettext;

    // from https://github.com/dotcloud/docker/blob/master/pkg/namesgenerator/names-generator.go
    var left = [ "happy", "jolly", "dreamy", "sad", "angry", "pensive", "focused", "sleepy", "grave", "distracted", "determined", "stoic", "stupefied", "sharp", "agitated", "cocky", "tender", "goofy", "furious", "desperate", "hopeful", "compassionate", "silly", "lonely", "condescending", "naughty", "kickass", "drunk", "boring", "nostalgic", "ecstatic", "insane", "cranky", "mad", "jovial", "sick", "hungry", "thirsty", "elegant", "backstabbing", "clever", "trusting", "loving", "suspicious", "berserk", "high", "romantic", "prickly", "evil" ];
    var right = [ "lovelace", "franklin", "tesla", "einstein", "bohr", "davinci", "pasteur", "nobel", "curie", "darwin", "turing", "ritchie", "torvalds", "pike", "thompson", "wozniak", "galileo", "euclid", "newton", "fermat", "archimedes", "poincare", "heisenberg", "feynman", "hawking", "fermi", "pare", "mccarthy", "engelbart", "babbage", "albattani", "ptolemy", "bell", "wright", "lumiere", "morse", "mclean", "brown", "bardeen", "brattain", "shockley" ];

    function generateName() {
        function ranchoice(array) {
            return array[Math.round(Math.random() * (array.length-1))];
        }
        return ranchoice(left) + "_" + ranchoice(right);
    }

    /* populate an object with image run settings that can be used in the run dialog
     *  - image          name of the image to run (can't be changed in the dialog)
     *  - name           name of the container, e.g. "romantic_ptolemy"
     *  - command        command to be run inside the container, e.g. "sh"
     *  - memoryLimit    current memory limit, undefined means unlimited, not set
     *  - cpuPriority    current cpu priority, undefined means default
     *  - withTerminal   whether to start the container with a terminal
     *  - links          array of container links (name of container, id to use)
     *  - ports          array of exposed ports
     *                   e.g. [ {container: 22, host: 1022} protocol: 'tcp'} ]
     *  - restartPolicy  restart policy for the container
     *                   values: 'no', 'on-failure', 'always', 'unless-stopped'
     *  - restartRetries how often a restart is retried (only used when policy is 'on-failure')
     *  - containers     List of containers available in the client (for adding a link)
     */
    function defaultImageRunSettings(client, imageInfo) {
        // get the ports a container image exposes by default
        var ports = [];
        for (var p in imageInfo.Config.ExposedPorts)
            ports.push({ container: parseInt(p), protocol: p.slice(-3), host: undefined, srcEditable: false });

        // get available containers
        var containers = [];
        var id;
        for (id in client.containers)
            containers.push(util.render_container_name(client.containers[id].Name));

        return {
            image: imageInfo.RepoTags[0],
            name: generateName(),
            command: util.quote_cmdline(imageInfo.Config.Cmd),
            memoryLimit: undefined,
            cpuPriority: undefined,
            withTerminal: true,
            links: [],
            ports: ports,
            restartPolicy: 'no',
            restartRetries: 0,
            containers: containers,
        };
    }

    /* dialog body with settings to run a docker image
     * Expected props:
     *  - ...settings  expanded object like it's generated by defaultImageRunSettings
     *  - onChange     callback for changed data
     *                 passes parts of the current state to be shallowly merged by the recipient
     *  - fieldErrors  optional, error messages to show for the fields
     *                 supported fields: command, links and ports (arrays, no longer than in state, can be shorter)
     *                 e.g. {command: 'some error', links: [undefined, 'Duplicate port']}
     */
    var RunImageDialogBody = React.createClass({
        restartPolicyChanged: function(data) {
            var changes = { restartPolicy: data };
            if (this.props.onChange)
                this.props.onChange(changes);
        },
        // helper function to modify properties in ports and links
        arrayDataChanged: function(prop, index, arrayProp, data) {
            data = (typeof data === 'object')?data.target.value:data;
            var propValue = this.props[prop];
            propValue[index][arrayProp] = data;
            if (this.props.onChange)
                this.props.onChange({ prop: propValue });
        },
        removeLink: function(index) {
            var links = this.props.links;
            links.splice(index, 1);
            if (this.props.onChange)
                this.props.onChange({ links: links });
        },
        addLink: function(index) {
            if (index === undefined)
                index = 0;
            var links = this.props.links;
            // make sure to default to a known container if there is one
            var defaultLink;
            if (this.props.containers.length > 0)
                defaultLink = this.props.containers[0];
            links.splice(index, 0, { container: defaultLink, alias: "" });
            if (this.props.onChange)
                this.props.onChange({ links: links });
        },
        linksCheckboxChanged: function(event) {
            if (event.target.checked)
                this.addLink();
            else if (this.props.onChange)
                this.props.onChange({ links: [] });
        },
        removePort: function(index) {
            var ports = this.props.ports;
            ports.splice(index, 1);
            if (this.props.onChange)
                this.props.onChange({ ports: ports });
        },
        addPort: function(index) {
            if (index === undefined)
                index = 0;
            var ports = this.props.ports;
            ports.splice(index, 0, ({ container: "", protocol: "TCP", host: "", srcEditable: true }));
            if (this.props.onChange)
                this.props.onChange({ ports: ports });
        },
        portsCheckboxChanged: function(event) {
            if (event.target.checked)
                this.addPort();
            else if (this.props.onChange)
                this.props.onChange({ ports: [] });
        },
        render: function() {
            var self = this;
            var commandError;
            if ('fieldErrors' in this.props && 'command' in this.props.fieldErrors) {
                commandError = (<div id="containers-run-image-command-note">
                                    <span className="help-block">{this.props.fieldErrors.command}</span>;
                                </div>
                               );
            }
            var restartRetries;
            if (this.props.restartPolicy === 'on-failure') {
                restartRetries = (
                    <div id="restart-policy-retries-container">
                        <label className="control-label" htmlFor="restart-policy-retries" >{_("Retries:")}</label>
                        <input id="restart-policy-retries"
                               className="form-control"
                               type="number"
                               value={this.props.restartRetries} min="0" />
                    </div>
                );
            }

            var placeholder = _('none');

            var containerLinks = this.props.links.map(function(link, linkIndex) {
                // TODO: check if there's an error message for the link
                /*
                <div hidden>
                            <span className="help-block"/>
                        </div>*/
                var containerEntries = self.props.containers.map(function(container) {
                    return <Select.SelectEntry data={container}>{container}</Select.SelectEntry>;
                });
                return (
                    <form className="form-inline">
                        <button type="button"
                                className="btn btn-default fa fa-plus"
                                onClick={ self.addLink.bind(self, linkIndex+1) }/>
                        <button type="button"
                                className="btn btn-default pficon-close"
                                onClick={ self.removeLink.bind(self, linkIndex) }/>
                        <div className="form-group">
                            <div className="btn-group dropdown link-container">
                                <Select.Select onChange={ self.arrayDataChanged.bind(self, 'links', linkIndex, 'container') }
                                               value={link.container}>
                                    {containerEntries}
                                </Select.Select>
                            </div>
                        </div>
                        <div className="form-group">
                            <label >{_('alias')}</label>
                            <input type="text" name="alias"
                                   className="form-control" placeholder={placeholder}
                                   onChange={ self.arrayDataChanged.bind(self, 'links', linkIndex, 'alias') }
                                   value={link.alias}/>
                        </div>
                    </form>
                );
            });

            // if the image defines some ports statically, we can't let the user disable exposing ports completely
            var staticPorts = false;
            var exposedPorts = this.props.ports.map(function(port, portIndex) {
                if (!port.srcEditable)
                    staticPorts = true;
                // TODO: check if there's an error message for the port
                /*
                <div hidden>
                            <span className="help-block"/>
                        </div>*/
                return (
                    <form className="form-inline">
                        <button type="button"
                                className="btn btn-default fa fa-plus"
                                onClick={ self.addPort.bind(self, portIndex+1) }/>
                        <button type="button"
                                className="btn btn-default pficon-close"
                                onClick={ port.srcEditable?self.removePort.bind(self, portIndex):undefined }
                                disabled={ !port.srcEditable }/>
                        <div className="form-group">
                            <input type="text" name="container"
                                   className="form-control"
                                   placeholder={placeholder}
                                   onChange={ port.srcEditable?self.arrayDataChanged.bind(self, 'ports', portIndex, 'container'):undefined }
                                   disabled={ !port.srcEditable }
                                   title={ port.srcEditable?undefined:_("Unable to change exposed ports defined by the image") }
                                   value={port.container} />
                        </div>
                        <div className="form-group">
                            <Select.Select onChange={ self.arrayDataChanged.bind(self, 'ports', portIndex, 'protocol') }
                                           disabled={ !port.srcEditable }
                                           value={port.protocol}
                                           title={ port.srcEditable?undefined:_("Unable to change exposed ports defined by the image") }>
                                <Select.SelectEntry data='TCP'>{_('TCP')}</Select.SelectEntry>
                                <Select.SelectEntry data='UDP'>{_('UDP')}</Select.SelectEntry>
                            </Select.Select>
                        </div>
                        <div className="form-group">
                            <label>{_('to host port')}</label>
                            <input type="text" name="host"
                                   className="form-control"
                                   placeholder={placeholder}
                                   onChange={ self.arrayDataChanged.bind(self, 'ports', portIndex, 'host') }
                                   value={port.host} />
                        </div>
                    </form>
                );
            });
            return (
                <div className="modal-body" id="containers-run-body">
                    <table className="form-table-ct">
                        <tr>
                            <td><label className="control-label">{_("Image")}</label></td>
                            <td colSpan="3">
                                <span id="containers-run-image">{this.props.image}</span>
                            </td>
                        </tr>
                        <tr>
                            <td><label className="control-label"
                                       htmlFor="containers-run-image-name"
                                       >{_("Container Name")}</label></td>
                            <td colSpan="3">
                                <input className="form-control"
                                       type="text"
                                       id="containers-run-image-name"
                                       value={this.props.name}/>
                            </td>
                        </tr>
                        <tr>
                          <td><label className="control-label" htmlFor="containers-run-image-command"
                                     >{_("Command")}</label></td>
                          <td colSpan="3">
                              <input className="form-control"
                                     type="text"
                                     id="containers-run-image-command"
                                     value={this.props.command}/>
                              {commandError}
                          </td>
                        </tr>
                        <tr id="containers-run-image-memory">
                            <td><label className="control-label" >{_("Memory limit")}</label></td>
                            <td className="shrink">
                                <input type="checkbox" />
                            </td>
                            <td>
                                <div className="slider" disabled='true' value="0.2">
                                    <div className="slider-bar">
                                        <div className="slider-thumb"></div>
                                    </div>
                                </div>
                            </td>
                            <td className="shrink resource-value">
                                <span>unlimited</span>
                            </td>
                        </tr>
                        <tr id="containers-run-image-cpu">
                            <td><label className="control-label" >{_("CPU priority")}</label></td>
                            <td className="shrink">
                                <input type="checkbox" />
                            </td>
                            <td>
                                <div className="slider" disabled='true' value="0.2">
                                    <div className="slider-bar">
                                        <div className="slider-thumb"></div>
                                    </div>
                                </div>
                            </td>
                            <td className="shrink resource-value">
                                <span>default</span>
                            </td>
                        </tr>
                        <tr>
                            <td><label className="control-label" htmlFor="containers-run-image-with-terminal"
                                       >{_("With terminal")}</label></td>
                            <td className="shrink">
                                <input type="checkbox"
                                       id="containers-run-image-with-terminal"
                                       checked={this.props.withTerminal} />
                            </td>
                        </tr>
                        <tr>
                            <td><label className="control-label" htmlFor="link-containers" >{_("Links")}</label></td>
                            <td colSpan="3">
                                <label><input type="checkbox"
                                              id="link-containers"
                                              onChange={ (this.props.containers.length > 0)?this.linksCheckboxChanged:undefined }
                                              disabled={ this.props.containers.length === 0 }
                                              checked={false}/>{_("Link to another container")}</label>
                                <div id="select-linked-containers" className="containers-run-inline">
                                    {containerLinks}
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td><label className="control-label" htmlFor="expose-ports" >{_("Ports")}</label></td>
                            <td colSpan="3">
                                <label><input type="checkbox"
                                              id="expose-ports"
                                              onChange={ staticPorts?undefined:this.portsCheckboxChanged}
                                              disabled={staticPorts}
                                              title={ staticPorts?("Unable to change exposed ports defined by the image"):undefined }
                                              checked={ staticPorts || (this.props.ports.length > 0) }/>{_("Expose container ports")}
                                </label>
                                <div id="select-exposed-ports" className="containers-run-portmapping containers-run-inline">
                                    {exposedPorts}
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td><label className="control-label" htmlFor="restart-policy" >{_("Restart Policy")}</label></td>
                            <td colSpan="2">
                                <div className="form-inline form-group">
                                    <Select.Select onChange={this.restartPolicyChanged} id="restart-policy-select" key="restart-policy-select">
                                        <Select.SelectEntry data='no'>{_("No")}</Select.SelectEntry>
                                        <Select.SelectEntry data='on-failure'>{_("On Failure")}</Select.SelectEntry>
                                        <Select.SelectEntry data='always'>{_("Always")}</Select.SelectEntry>
                                        <Select.SelectEntry data='unless-stopped'>{_("Unless Stopped")}</Select.SelectEntry>
                                    </Select.Select>
                                    {restartRetries}
                                </div>
                            </td>
                        </tr>
                    </table>
                  </div>
            );
        }
    });

    /*function PageRunImage() {
        this._init();
    }

    var dialog = new PageRunImage();
    dialog.setup();*/

    function run(client, id) {
        /*PageRunImage.image_info = client.images[id];
        PageRunImage.client = client;
        dialog.enter();
        $("#containers_run_image_dialog").modal('show');*/

        var runImageError;

        var fieldErrors;

        var imageSettings = { };

        var runImage = function() {
            var dfd = cockpit.defer();
            dfd.notify(_("Starting something long"));
            var interval = window.setTimeout(function() {
                window.clearTimeout(interval);
                dfd.resolve();
            }, 2000);
            return dfd.promise;
        };

        var footerProps = {
            'actions': [
                  { 'clicked': runImage,
                    'caption': _("Run"),
                    'style': 'primary',
                  },
              ],
            'static_error': runImageError,
        };

        var renderDialog;
        // we only immediately validate if running the image failed before
        var immediatelyValidate = false;
        var updatedData = function(data) {
            var prop;
            for (prop in data)
                imageSettings[prop] = data[prop];
            if (immediatelyValidate)
                console.log("validate now");
            console.log("updatedData");
            var dialogProps = {
                'title': _("Run Image"),
                'body': <RunImageDialogBody fieldErrors={fieldErrors} onChange={updatedData} {...imageSettings}/>,
            };
            if (renderDialog)
                renderDialog(dialogProps, footerProps);
            else
                renderDialog = Dialog.show_modal_dialog(dialogProps, footerProps);
        };

        updatedData(defaultImageRunSettings(client, client.images[id]));
    }

    return run;

});
