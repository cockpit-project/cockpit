# Automated Testing of Cockpit

This directory contains automated tests for Cockpit, and the support
files for them.

To run the tests, you need to install the following packages on
Fedora:

  # yum install trickle nbd-server js npm python-libguestfs parallel
  # npm install phantomjs

You also need a base tarball for the distribution you want to test
Cockpit on.  Try one of these:

    https://dl.dropboxusercontent.com/s/10b3q7ualqxew1d/fedora-18-x86_64.tar.gz
    https://dl.dropboxusercontent.com/s/73o8zc73dze771b/fedora-20-x86_64.tar.gz

## Quick list of tools

For managing test machines and running tests:

vm-create,   for creating test machine images from scratch.
vm-pack,     for archiving a test machine image.
vm-unpack,   for unarchiving a test machine image.
vm-install,  for installing RPMs into a test machine image.
check-*,     the actual tests.

For debugging:

vm-run,      for running a test machine image.
vm-copy,     for copying files into a running test machine.
vm-sh,       for executing commands in a running test machine.

## Configuration

You can set these environment variables to configure the test suite:

  TEST_OS    The OS to run the tests in.  Currently, the default and
             only supported value is "fedora-20".

  TEST_ARCH  The machine architecture to use.  Currently, the default
             and only supported value is "x86_64".

  TEST_DATA  Where to find the archived test machine images.  The
             default is the same directory that this README file is in.

  TEST_JOBS  How many tests to run in parallel.  The default is 1.
             (This only affects check-verify.)

## Quick start

You need to download a 'magic base tarball' for the OS and machine
architecture you want to test and store it as

  $TEST_DATA/base/$TEST-OS-$TEST_ARCH.tar.gz

Create a test machine image from it:

  $ ./vm-create -v accountsservice-libs udisks2 libudisks2 json-glib realmd sshpass lvm2

Compile Cockpit:

  $ rpms=$(./make-rpms)

And install it into the test machine image:

  $ ./vm-install $rpms

Then you can run some tests:

  $ ./check-dbus

## Test machines and their images

The code under test is executed in one or more dedicated virtual
machines, called the "test machines".  Fresh test machines are started
for each test.

A test machine runs a "test machine image".  Such a test machine image
contains the root filesystem that is booted inside the virtual
machine.  A running test machine can write to its root filesystem, of
course, but these changes are (usually) not propagated back to its
image.  Thus, you can run multiple test machines from the same image,
at the same time or one after the other, and each test machine starts
with a clean state.

A test machine image is created with vm-create, like so:

  $ ./vm-create -v accountsservice-libs udisks2 libudisks2 json-glib realmd sshpass lvm2

This starts from a magic base tarball, makes some magic modifications
to it, brings it up-to-date with respect to the upstream package
repositories, and installs the given list of extra packages.  The
magic base tarballs is looked for in "$TEST_DATA/base", is currently
lovingly made by hand, and changes almost never.

A test machine image can be archived for later use with vm-pack:

  $ ./vm-pack

This will create a new tarball and place it into the current
directory.  To create a test machine image from an archived tarball,
use vm-unpack:

  $ ./vm-unpack

The idea is that vm-unpack is much faster than vm-create.  One
typically uses vm-create not more often than once a day, but each test
suite run should start from a clean test machine image.

Also, a archived tarball serves as a point of reference since using it
will isolate you from changes in the package repositories that are
used by vm-create.

A test machine image created by vm-create doesn't contain any Cockpit
code in it yet.  You can build and install the currently checked out
working copy of Cockpit like this:

  $ ./vm-install $(./make-rpms)

This will modify the test machine image.

## Running tests

Once you have a test machine image that contains the version of
Cockpit that you want to test, you can run tests by picking a program
and just executing it:

  $ ./check-dbus

## Debugging tests

If you pass the "-s" ("sit on failure") option to a test program, it
will pause when a failure occurs so that you can log into the test
machine and investigate the problem.

You can log into a running test-machine with "vm-sh".

You can also put calls to sit() into the tests themselves to stop them
at strategic places.

You can use the "--vm-start-hook" option to execute an arbitrary shell
command after a test machine has been booted but before the test
begins.

That way, you can run a test cleanly while still being able to make
quick changes, such as adding debugging output to JavaScript.

The environment variable TEST_MACHINE is set to the identifier of the
machine that has just been booted.

For example, one might run a full "make install DESTDIR=..." and copy
the resulting installation directory to the test machine.  This can
maybe be done by a script like this:

    inst=/var/tmp/INST
    f18 rm -rf "$inst"
    f18 make-top -k install DESTDIR="$inst"
    f18 tar -C "$inst" -cf - . | ./vm-sh --machine $TEST_MACHINE 'cd / && cpio -idu'

The "f18" command executes a command on the build machine.

## Guidelines for writing tests

It is OK for a test to destroy the test machine OS installation, or
otherwise modify it without cleaning up.  For example, it is OK to
remove all of /etc just to see what happens.  The next test will get a
pristine test machine.

A fast running test suite is more important than independent,
small test cases.

Thus, it is OK for tests to be long.  Starting the test machine is so
slow that we should run as many checks within a single session as make
sense.

Still, within a long test, try to have independent sections, where
each section returns the machine to more or less the state that it was
in before the section.  This makes it easier to run these sections
ad-hoc when doing incremental development.
