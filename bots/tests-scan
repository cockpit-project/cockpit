#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

BASELINE_PRIORITY = 5
MAX_PRIORITY = 9

BRANCHES = [ 'master', 'rhel-7.6', 'rhel-7.7', 'rhel-8.0', 'rhel-8-appstream' ]

DEFAULT_VERIFY = {
    'avocado/fedora': BRANCHES,
    'container/kubernetes': [ 'master', 'rhel-7.6', 'rhel-7.7' ],
    'container/bastion': BRANCHES,
    'selenium/firefox': BRANCHES,
    'selenium/chrome': BRANCHES,
    'verify/centos-7': [ 'master' ],
    'verify/continuous-atomic': [ ],
    'verify/debian-stable': [ 'master' ],
    'verify/debian-testing': [ 'master' ],
    'verify/fedora-i386': [ ],
    'verify/fedora-29': [ 'master' ],
    'verify/fedora-30': [ 'master' ],
    'verify/fedora-atomic': [ 'master' ],
    'verify/fedora-testing': [ ],
    'verify/ubuntu-1804': [ 'master' ],
    'verify/ubuntu-stable': [ 'master' ],
}

# Non-public images used for testing
REDHAT_VERIFY = {
    "verify/rhel-7-6": [ 'rhel-7.6' ],
    "verify/rhel-7-6-distropkg": [ 'master' ],
    "verify/rhel-7-7": [ 'rhel-7.7', 'master' ],
    "verify/rhel-8-0": [ 'master', 'rhel-8.0', 'rhel-8-appstream' ],
    "verify/rhel-8-1": [ 'master', 'rhel-8.1', 'rhel-8-appstream' ],
    "verify/rhel-atomic": [ 'master' ],
    'selenium/edge': [ 'master' ],
}

# Test contexts for projects that use Cockpit's bots and/or images
EXTERNAL_PROJECTS = {
    'cockpit-project/starter-kit': [
        'cockpit/centos-7',
        'cockpit/fedora-29',
    ],
    'cockpit-project/cockpit-ostree': [
        'cockpit/fedora-atomic',
        'cockpit/continuous-atomic',
    ],
    'cockpit-project/cockpit-podman': [
        'cockpit/fedora-29',
        'cockpit/fedora-30',
    ],
    'weldr/welder-web': [
        'cockpit/fedora-29/chrome',
        'cockpit/fedora-29/firefox',
    ],
}

# Test context for projects that use Cockpit's non-public images
REDHAT_EXTERNAL_PROJECTS = {
    'cockpit-project/cockpit-ostree': [
        'cockpit/rhel-atomic',
    ],
    'weldr/welder-web': [
        'cockpit/rhel-7-7/firefox',
        'cockpit/rhel-8-1/chrome',
        'cockpit/fedora-30/edge',
    ],
}

# Label: should a PR trigger external tests
LABEL_TEST_EXTERNAL = "test-external"

import argparse
import contextlib
import os
import json
import pipes
import ssl
import sys
import time
import logging
import itertools
import urllib.request

sys.dont_write_bytecode = True
logging.basicConfig(level=logging.INFO)

from task import github, label, redhat_network, labels_of_pull

no_amqp = False
try:
    import pika
except ImportError:
    no_amqp = True

def main():
    parser = argparse.ArgumentParser(description='Bot: scan and update status of pull requests on GitHub')
    parser.add_argument('-v', '--human-readable', action="store_true", default=False,
                        help='Display human readable output rather than tasks')
    parser.add_argument('-d', '--dry', action="store_true", default=False,
                        help='Don''t actually change anything on GitHub')
    parser.add_argument('--repo', default=None,
                        help='Repository to scan and checkout.')
    parser.add_argument('-c', '--context', action="append", default=[ ],
                        help='Test contexts to use.')
    parser.add_argument('-p', '--pull-number', default=None,
                        help='Single pull request to scan for tasks')
    parser.add_argument('--pull-data', default=None,
                        help='pull_request GitHub JSON data to evaluate; mutualy exclusive with -p and -s')
    parser.add_argument('-s', '--sha', default=None,
                        help='SHA beloging to pull request to scan for tasks')
    parser.add_argument('--amqp', default=None,
                        help='The host:port of the AMQP server to publish to (format host:port)')

    opts = parser.parse_args()
    if opts.amqp and no_amqp:
        logging.error("AMQP host:port specified but python-amqp not available")
        return 1
    if opts.pull_data and (opts.pull_number or opts.sha):
        parser.error("--pull-data and --pull-number/--sha are mutually exclusive")

    api = github.GitHub(repo=opts.repo)

    try:
        if opts.context:
            policy = { c: [ "master" ] for c in opts.context }
        elif opts.repo:
            policy = {}
            if opts.repo in EXTERNAL_PROJECTS:
                policy.update({ c: [ "master" ] for c in EXTERNAL_PROJECTS[opts.repo] })
            if opts.repo in REDHAT_EXTERNAL_PROJECTS:
                policy.update({ c: [ "master" ] for c in REDHAT_EXTERNAL_PROJECTS[opts.repo] })
            if not policy:
                policy = default_policy()
        else:
            policy = default_policy()
        results = scan_for_pull_tasks(api, policy, opts, None)

        # for the default (Cockpit) repo, also check external project PRs
        if not opts.repo:
            results += scan_external_projects(opts)
    except RuntimeError as ex:
        logging.error("tests-scan: " + str(ex))
        return 1

    for result in results:
        if result:
            sys.stdout.write(result + "\n")

    return 0

def default_policy():
    policy = DEFAULT_VERIFY
    policy.update(REDHAT_VERIFY)
    return policy

@contextlib.contextmanager
def distributed_queue(amqp_server):
    try:
        host, port = amqp_server.split(':')
    except ValueError:
        logging.error('Please format --amqp as host:port')
        sys.exit(1)
    connection = pika.BlockingConnection(pika.ConnectionParameters(
        host=host,
        port=int(port),
        ssl=True,
        ssl_options=pika.SSLOptions(
            ssl_version=ssl.PROTOCOL_TLSv1_2,
            cafile='/run/secrets/webhook/ca.pem',
            keyfile='/run/secrets/webhook/amqp-client.key',
            certfile='/run/secrets/webhook/amqp-client.pem',
            server_hostname=host),
        credentials=pika.credentials.ExternalCredentials()))
    channel = connection.channel()
    arguments = {
        "x-max-priority": MAX_PRIORITY
    }
    channel.queue_declare(queue='public', arguments=arguments, auto_delete=False)
    channel.queue_declare(queue='rhel', arguments=arguments, auto_delete=False)
    yield channel
    connection.close()

# Prepare a human readable output
def tests_human(priority, name, number, revision, ref, context, base, repo, bots_ref):
    if not priority:
        return
    try:
        priority = int(priority)
    except (ValueError, TypeError):
        pass
    return "{name:11} {context:25} {revision:10} {priority:2}{repo}{bots_ref}".format(
        priority=priority,
        revision=revision[0:7],
        context=context,
        name=name,
        repo=repo and "  (%s)" % repo or "",
        bots_ref=bots_ref and (" [bots@%s]" % bots_ref) or "",
    )

# Prepare a test invocation command
def tests_invoke(priority, name, number, revision, ref, context, base, repo, bots_ref, options):
    if not options.amqp and not redhat_network() and (context in REDHAT_VERIFY or
                                                      context in REDHAT_EXTERNAL_PROJECTS.get(repo, [])):
        return ''

    try:
        priority = int(priority)
    except (ValueError, TypeError):
        priority = 0
    if priority <= 0:
        return
    current = time.strftime('%Y%m%d-%H%M%M')

    checkout = "PRIORITY={priority:04d} bots/make-checkout --verbose"
    cmd = "TEST_NAME={name}-{current} TEST_REVISION={revision} bots/tests-invoke --pull-number={pull_number} "
    if base:
        cmd += " --rebase={base}"
        checkout += " --base={base}"

    if repo or (options.amqp and options.repo):
        if not repo:
            repo = options.repo
        checkout += " --repo={repo}"
        cmd += " --remote=test"
        if bots_ref:
            # we are checking the external repo on a cockpit PR, so keep GITHUB_BASE for cockpit and just set
            # TEST_PROJECT for correct statuses
            cmd = "TEST_PROJECT={repo} " + cmd
        else:
            # we are checking the external repo on a PR of that external repo
            cmd = "GITHUB_BASE={repo} " + cmd

    if bots_ref:
        checkout += " --bots-ref={bots_ref}"

    cmd += " {context} {ref}"
    if bots_ref:
        # we are checking the external repo on a cockpit PR, so stay on the project's master
        checkout += " {ref} && "
    else:
        # we are testing the repo itself, checkout revision from the PR
        checkout += " {ref} {revision} && "

    return (checkout + cmd).format(
        priority=priority,
        name=pipes.quote(name),
        revision=pipes.quote(revision),
        base=pipes.quote(str(base)),
        ref=pipes.quote(ref),
        bots_ref=pipes.quote(bots_ref),
        context=pipes.quote(context),
        current=current,
        pull_number=number,
        repo=pipes.quote(repo),
    )

def queue_test(priority, name, number, revision, ref, context, base, repo, bots_ref, queue, options):
    command = tests_invoke(priority, name, number, revision, ref, context, base, repo, bots_ref, options)
    if command:
        if priority > MAX_PRIORITY:
            priority = MAX_PRIORITY

        body = {
            "command": command,
            "type": "test",
            "sha": revision,
            "ref": ref,
            "name": name,
        }
        # repo will be set if it's an external project on a cockpit PR
        # options.repo will be set if it's an external project's PR
        if (context in REDHAT_VERIFY or context in REDHAT_EXTERNAL_PROJECTS.get(repo or options.repo, [])):
            queue.basic_publish('', 'rhel', json.dumps(body), properties=pika.BasicProperties(priority=priority))
        else:
            queue.basic_publish('', 'public', json.dumps(body), properties=pika.BasicProperties(priority=priority))
        logging.info("Published '{0}' on '{1}' with command: '{2}'".format(name, revision, command))

def prioritize(status, title, labels, priority, context, number):
    state = status.get("state", None)
    update = { "state": "pending" }

    # This commit definitively succeeded or failed
    if state in [ "success", "failure" ]:
        logging.info("Skipping '{0}' on #{1} because it has already finished".format(context, number))
        priority = 0
        update = None

    # This test errored, we try again but low priority
    elif state in [ "error" ]:
        priority -= 2

    elif state in [ "pending" ]:
        logging.info("Skipping '{0}' on #{1} because it is pending".format(context, number))
        update = None

    # Ignore context when the PR has [no-test] in the title or as label, unless
    # the context was directly triggered
    if (('no-test' in list(labels) or '[no-test]' in title) and
        status.get("description", "") != github.NOT_TESTED_DIRECT):
        logging.info("Skipping '{0}' on #{1} because it is no-test".format(context, number))
        priority = 0
        update = None

    if priority > 0:
        values = list(labels)
        if "priority" in values:
            priority += 2
        if "blocked" in values:
            priority -= 1

        # Pull requests where the title starts with WIP get penalized
        if title.startswith("WIP") or "needswork" in values:
            priority -= 1

        # Is testing already in progress?
        description = status.get("description", "")
        if description.startswith(github.TESTING):
            logging.info("Skipping '{0}' on #{1} because it is already running".format(context, number))
            priority = description
            update = None

    if update:
        if priority <= 0:
            logging.info("Skipping '{0}' on #{1} because of low priority".format(context, number))
            update = None
        else:
            update["description"] = github.NOT_TESTED

    return [priority, update]

def dict_is_subset(full, check):
    for (key, value) in check.items():
        if not key in full or full[key] != value:
            return False
    return True

def update_status(api, revision, context, last, changes):
    if changes:
        changes["context"] = context
    if changes and not dict_is_subset(last, changes):
        response = api.post("statuses/" + revision, changes, accept=[ 422 ]) # 422 Unprocessable Entity
        errors = response.get("errors", None)
        if not errors:
            return True
        for error in response.get("errors", []):
            sys.stderr.write("{0}: {1}\n".format(revision, error.get('message', json.dumps(error))))
            sys.stderr.write(json.dumps(changes))
        return False
    return True

def cockpit_tasks(api, update, contexts, repo, pull_data, pull_number, sha, amqp):
    results = []
    branch_contexts = { }
    for (context, branches) in contexts.items():
        for branch in branches:
            if branch not in branch_contexts:
                branch_contexts[branch] = [ ]
            branch_contexts[branch].append(context)

    pulls = []
    if pull_number or pull_data:
        # Avoid processing pull requests with the same number on external
        # repositories: if repo is None, the api is querying the repo the pull
        # request belongs to
        if repo is None:
            if pull_data:
                pulls.append(json.loads(pull_data))
            else:
                pull = api.get("pulls/{0}".format(pull_number))
                if pull:
                    pulls.append(pull)
                else:
                    logging.error("Can't find pull request {0}".format(pull_number))
                    return 1
    else:
        pulls = api.pulls()

    whitelist = api.whitelist()
    for pull in pulls:
        title = pull["title"]
        number = pull["number"]
        revision = pull["head"]["sha"]
        statuses = api.statuses(revision)
        login = pull["head"]["user"]["login"]
        base = pull["base"]["ref"]  # The branch this pull request targets

        logging.info("Processing #{0} titled '{1}' on revision {2}".format(number, title, revision))

        # If sha is present only scan PR with selected sha
        if sha and revision != sha and not revision.startswith(sha):
            continue

        labels = labels_of_pull(pull)

        # Do we have any statuses for this commit?
        have = len(statuses.keys()) > 0

        baseline = BASELINE_PRIORITY
        # amqp automatically prioritizes on age
        if not amqp:
            # modify the baseline slightly to favor older pull requests, so that we don't
            # end up with a bunch of half tested pull requests
            baseline += 1.0 - (min(100000, float(number)) / 100000)

        for context in contexts:
            status = statuses.get(context, None)

            # Only create new status for requests that have none
            if not status:
                if have or context not in branch_contexts.get(base, []):
                    continue
                status = { }

            # For unmarked and untested status, user must be in whitelist
            # Not this only applies to this specific commit. A new status
            # will apply if the user pushes a new commit.
            if login not in whitelist and status.get("description", github.NO_TESTING) == github.NO_TESTING:
                priority = github.NO_TESTING
                changes = { "description": github.NO_TESTING, "context": context, "state": "pending" }
            else:
                (priority, changes) = prioritize(status, title, labels, baseline, context, number)
            if not update or update_status(api, revision, context, status, changes):
                results.append((priority, "pull-%d" % number, number, revision, "pull/%d/head" % number, context, base, repo, None))

        # if a cockpit (default repo) PR changes bots/, also trigger all external tests against this cockpit PR

        def trigger_externals():
            if repo:  # already a non-cockpit project
                return False
            if base != "master":  # bots/ is always taken from master branch
                return False
            if LABEL_TEST_EXTERNAL in labels_of_pull(pull):  # already checked before?
                return True

            if not have:
                # this is the first time tests-scan looks at a PR, so determine if it changes bots/
                with urllib.request.urlopen(pull["patch_url"]) as f:
                    # enough to look at the git commit header, it lists all changed files
                    if b"bots/" in f.read(4000):
                        if update:
                            # remember for next run, to avoid downloading the patch multiple times
                            label(number, [LABEL_TEST_EXTERNAL])
                        return True

            return False

        if trigger_externals():
            for proj_repo, proj_contexts in itertools.chain(
                    EXTERNAL_PROJECTS.items(), REDHAT_EXTERNAL_PROJECTS.items()):
                for context in proj_contexts:
                    repo_context = context + "@" + proj_repo

                    status = statuses.get(repo_context, {})
                    if login not in whitelist and status.get("description", github.NO_TESTING) == github.NO_TESTING:
                        priority = github.NO_TESTING
                        changes = { "description": github.NO_TESTING, "context": repo_context, "state": "pending" }
                    else:
                        (priority, changes) = prioritize(status, title, labels, baseline, repo_context, number)
                    if not update or update_status(api, revision, repo_context, status, changes):
                        # don't specify a ref to check out; make-source already checks out project master
                        results.append((priority, "pull-%d" % number, number, revision, "", context, base, proj_repo, "pull/%s/head" % number))

    return results

def scan_for_pull_tasks(api, policy, opts, repo):
    kvm = os.access("/dev/kvm", os.R_OK | os.W_OK)
    if not kvm:
        logging.error("tests-scan: No /dev/kvm access, not running tests here")
        return []

    results = cockpit_tasks(api, not opts.dry, policy, repo, opts.pull_data, opts.pull_number, opts.sha, opts.amqp)

    if opts.human_readable:
        func = lambda x: tests_human(*x)
        results.sort(reverse=True, key=lambda x: str(x))
        return list(map(func, results))
    if not opts.amqp:
        func = lambda x: tests_invoke(*x, options=opts)
        return list(map(func, results))
    with distributed_queue(opts.amqp) as queue:
        func = lambda x: queue_test(*x, queue=queue, options=opts)
        return list(map(func, results))

def scan_external_projects(opts):
    tests = []
    for repo, contexts in itertools.chain(EXTERNAL_PROJECTS.items(), REDHAT_EXTERNAL_PROJECTS.items()):
        policy = { c: [ "master" ] for c in contexts }
        tests += scan_for_pull_tasks(github.GitHub(repo=repo), policy, opts, repo)
    return tests

if __name__ == '__main__':
    sys.exit(main())
