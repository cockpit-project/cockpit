#!/usr/bin/env python3

# This file is part of Cockpit.
#
# Copyright (C) 2018 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

MAX_PRIORITY = 9

import argparse
import sys
import ssl

import pika

def main():
    parser = argparse.ArgumentParser(description='Read and print messages from the queue without acknowleding them')
    parser.add_argument('--amqp', default='localhost:5671',
                        help='The host:port of the AMQP server to consume from (default: %(default)s)')
    opts = parser.parse_args()

    try:
        host, port = opts.amqp.split(':')
    except ValueError:
        parser.error('Please format --amqp as host:port')

    connection = pika.BlockingConnection(pika.ConnectionParameters(
        host=host,
        port=int(port),
        ssl=True,
        ssl_options=pika.SSLOptions(
            ssl_version=ssl.PROTOCOL_TLSv1_2,
            cafile='/run/secrets/webhook/ca.pem',
            keyfile='/run/secrets/webhook/amqp-client.key',
            certfile='/run/secrets/webhook/amqp-client.pem',
            server_hostname=host),
        credentials=pika.credentials.ExternalCredentials()))
    channel = connection.channel()

    def print_queue(queue):
        try:
            declare_result = channel.queue_declare(queue=queue, passive=True, auto_delete=False)
        except pika.exceptions.ChannelClosed:
            print("queue {0} doesn't exist".format(queue))
            return
        for i in range(declare_result.method.message_count):
            method_frame, header_frame, body = channel.basic_get(queue=queue)
            if method_frame:
                print(body)

    print('public queue:')
    print_queue('public')
    print('rhel queue:')
    print_queue('rhel')
    connection.close()

if __name__ == '__main__':
    sys.exit(main())
