#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *
from storagelib import *

class TestStorage(StorageCase):
    def testLvm(self):
        m = self.machine
        b = self.browser

        mount_point_one = "/run/one"
        mount_point_thin = "/run/thin"

        # HACK - https://bugzilla.redhat.com/show_bug.cgi?id=1211183
        if m.os == "rhel-7":
            return

        self.login_and_go("/storage")
        b.wait_in_text("#drives", "VirtIO")

        m.add_disk("50M", serial="DISK1")
        m.add_disk("50M", serial="DISK2")
        m.add_disk("50M", serial="DISK3")
        b.wait_in_text("#drives", "DISK1")
        b.wait_in_text("#drives", "DISK2")
        b.wait_in_text("#drives", "DISK3")

        # Create a volume group out of two disks
        m.execute("vgcreate TEST1 /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK1 /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK2")
        b.wait_in_text("#vgroups", "TEST1")
        b.click('tr:contains("TEST1")')
        b.wait_visible("#storage-detail")
        b.wait_in_text("#pvols", "DISK1")
        b.wait_in_text("#pvols", "DISK2")

        # Create two logical volumes
        m.execute("lvcreate TEST1 -n one -L 20m")
        b.wait_in_text("#content", "Logical Volume \"one\"")
        m.execute("lvcreate TEST1 -n two -L 20m")
        b.wait_in_text("#content", "Logical Volume \"two\"")

        # Deactivate one
        m.execute("lvchange TEST1/one -a n")
        b.wait_in_text("#content", "(inactive)")

        # and remove it
        m.execute("lvremove TEST1/one")
        b.wait_not_in_text("#content", "Logical Volume \"one\"")

        # remove a disk from the volume group
        m.execute("pvmove /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK2 &>/dev/null || true")
        m.execute("vgreduce TEST1 /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK2")
        b.wait_not_in_text("#pvols", "DISK2")

        # Thin volumes
        m.execute("lvcreate TEST1 --thinpool pool -L 20m")
        b.wait_in_text("#content", "Pool for Thin Logical Volumes \"pool\"")
        m.execute("lvcreate -T TEST1/pool -n thin -V 100m")
        b.wait_in_text("#content", "Thin Logical Volume \"thin\"")
        m.execute("dd if=/dev/urandom of=/dev/mapper/TEST1-thin bs=1M count=10 status=none")
        b.wait_in_text("#content", "50% full")
        m.execute("lvremove -f TEST1/thin")
        b.wait_in_text("#content", "1% full")

        # remove the volume group
        b.go("#/")
        b.wait_visible("#storage")
        m.execute("vgremove -f TEST1")
        b.wait_not_in_text("#vgroups", "TEST1")

        # create volume group in the UI
        b.wait_visible('#create-volume-group')

        self.dialog_with_retry(trigger = lambda: b.click('#create-volume-group'),
                               expect = lambda: (self.dialog_is_present('disks', "DISK1") and
                                                 self.dialog_is_present('disks', "DISK2")),
                               values = { "name": "TEST2",
                                          "disks": { "DISK1": True,
                                                     "DISK2": True }})

        b.wait_in_text("#vgroups", "TEST2")
        b.click('tr:contains("TEST2")')
        b.wait_visible('#storage-detail')

        # create a logical volume
        self.content_default_action(1, "Create Plain Logical Volume")
        self.dialog({ "name": "one",
                      "size": "20" })
        b.wait_in_text("#content", "Logical Volume \"one\"")

        # format and mount it
        self.content_default_action(1, "Format")
        self.dialog({ "type": "ext4",
                      "mounting": "custom",
                      "mount_point": mount_point_one })
        b.wait_in_text("#content", "(ext4 File System)")
        self.wait_in_storaged_configuration(mount_point_one)
        self.content_default_action(1, "Mount")
        b.wait_in_text("#content", "mounted on %s" % mount_point_one)

        # unmount it
        self.content_default_action(1, "Unmount")
        b.wait_in_text("#content", "not mounted")

        # delete it
        self.content_action(1, "Delete")
        self.confirm()
        b.wait_not_in_text("#content", "Logical Volume \"one\"")
        self.assertEqual(m.execute("grep %s /etc/fstab || true" % mount_point_one), "")

        # remove disk
        m.execute("pvmove /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_DISK2 &>/dev/null || true")
        b.wait_action_btn('#pvols li:nth-child(2) .btn-group', "Remove")
        b.click_action_btn('#pvols li:nth-child(2) .btn-group')
        b.wait_not_in_text("#pvols", "DISK2")

        # create thin pool and volume
        self.content_action(1, "Create Pool for Thin Logical Volumes")
        self.dialog({ "name": "pool",
                      "size": "20" })
        b.wait_in_text('#content', "Pool for Thin Logical Volumes \"pool\"")

        self.content_default_action(1, "Create Thin Volume")
        self.dialog({ "name": "thin",
                      "size": "80" })
        b.wait_in_text('#content', "Thin Logical Volume \"thin\"")

        # cause the pool to overflow by erasing the thin volume
        self.content_default_action(2, "Format")
        self.dialog({ "erase": "zero",
                      "type": "ext4",
                      "mounting": "custom",
                      "mount_point": mount_point_thin })
        b.wait_in_text('#content', "100% full")

        # There should be a stuck job now
        b.wait_in_text("#jobs", "Erasing")

        # add a disk, resize the pool and let the operation finish
        b.click('[data-action="vgroup_add_disk"]')
        self.dialog_wait_open()
        self.dialog_select('disks', "DISK2", True)
        self.dialog_apply()
        self.dialog_wait_close()
        b.wait_in_text("#pvols", "DISK2")

        self.content_action(1, "Resize")
        self.dialog({ "size": "80" })
        b.wait_in_text("#content", "(ext4 File System)")
        self.wait_in_storaged_configuration(mount_point_thin)

        # The job should be gone
        b.wait_not_in_text("#jobs", "Erasing")

        # remove volume group
        b.click_action_btn('.panel-heading:contains("Volume Group") .btn-group', "Delete")
        self.confirm()
        b.wait_visible("#storage")
        self.assertEqual(m.execute("grep %s /etc/fstab || true" % mount_point_thin), "")

test_main()
