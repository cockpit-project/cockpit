#!/usr/bin/env node

var maps = {
    "networkmanager": "network",
    "systemd": "system",
    "storaged": "storage",
    "realmd": "domain",
    "ostree": "updates",
    "tuned": "performance",
};

var fs, esprima, path;

try {
    fs = require('fs');
    path = require('path');
    esprima = require('esprima');
} catch(ex) {
    fatal(ex.message, 127); /* missing looks for this */
}

function fatal(message, code) {
    console.log((input || "jsbundle") + ": " + message);
    process.exit(code || 1);
}

if (process.argv.length < 4) {
    console.log("usage: jsbundle output file ...");
    process.exit(2);
}

var result = "";
var delim = "";
var input;
var output = process.argv[2];
var output_parts = output.split('/');

var files = process.argv.slice(3);
step();

function step() {
    if (files.length === 0) {
        mkdirp(path.dirname(output), function(err) {
            if (err) {
                fatal(err.message);
            } else {
	        fs.writeFile(output, result, function(err) {
                    if (err)
                        fatal(err.message);
                    process.exit(0);
                });
            }
        });
        return;
    }

    input = files.shift();
    var parts = input.split("/");
    var last = parts.length - 1;

    var dir = output_parts[output_parts.length - 2];
    var dir_idx = parts.indexOf(dir)
    if (dir_idx !== last)
        dir = parts.slice(dir_idx, last).join('/');
    dir = maps[dir] || dir;

    var file = parts[last];

    var ext = null;
    var pos = file.indexOf(".");
    var module = file;
    if (pos !== -1) {
        ext = file.substring(pos);
        if (ends_with(ext, ".js"))
            module = file.substring(0, pos);
    }

    var name = dir + "/" + module;

    fs.readFile(input, { encoding: "utf-8" }, function(err, data) {
        if (err)
            fatal(err.message);
        if (result[result.length] != "\n")
           result += "\n";
        if (ends_with(ext, ".js")) {
	    try {
	        result += redefine(data, name);
            } catch(ex) {
                fatal(ex.message);
            }
        } else {
            result += 'define("' + name + '_text", ' + JSON.stringify(data) + ');';
        }
        result += "\n//# sourceURL=" + dir + "/" + file + "\n";
	step();
    });
}

function traverse(object, visitor) {
    var key, child;
    visitor.call(null, object);
    for (key in object) {
        if (object.hasOwnProperty(key)) {
            child = object[key];
            if (typeof child === 'object' && child !== null)
                traverse(child, visitor);
        }
    }
}

function is_anonymous_define(node) {
    if (node.type === 'CallExpression' &&
        node.callee && node.callee.name == 'define' && node.arguments) {

        /* define(['dependency'], function() { }) */
        if (node.arguments.length > 1 &&
            node.arguments[0].type == "ArrayExpression")
            return true;

        if (node.arguments.length == 1)
            return true;
    }

    return false;
}

function redefine(data, name) {
    var syntax = esprima.parse(data, { range: true });
    var range;

    traverse(syntax, function(node) {
        if (is_anonymous_define(node)) {
            if (range)
                fatal("found two anonymous define functions");
            range = node.arguments[0].range;
        }
    });

    var output;
    if (range) {
        output = data.substring(0, range[0]);
        output += "\"" + name + "\", ";
        output += data.substring(range[0]);
    } else {
        output = data;
    }

    return output;
}

function ends_with(string, suffix) {
    return string.indexOf(suffix, string.length - suffix.length) !== -1;
}


function mkdirp(fp, callback) {
    var mode = parseInt('0777', 8) & (~process.umask());
    fp = path.resolve(fp);
    fs.mkdir(fp, mode, function(error) {
        if (!error)
            return callback(null);
        switch (error.code) {
        case 'ENOENT':
            mkdirp(path.dirname(fp), function(error) {
                if (error)
                    callback(error);
                else
                    mkdirp(fp, callback);
            });
            break;
        case 'EEXIST':
            callback(null);
            break;
        default:
            callback(error);
            break;
        }
    });
}
