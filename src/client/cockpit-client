#!/usr/bin/python3

# This file is part of Cockpit.
#
# Copyright (C) 2018-2021 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import gi
import logging
import sys

gi.require_version("Gtk", "3.0")  # NOQA
gi.require_version("WebKit2", "4.0")  # NOQA

from gi.repository import GLib, Gdk, Gio, Gtk, WebKit2


class CockpitClientWindow(Gtk.ApplicationWindow):
    def __init__(self, app, uri):
        super().__init__(application=app)
        self.set_title("Web Console")

        self.set_size_request(800, 600)

        self.webview = WebKit2.WebView()
        self.add(self.webview)
        self.webview.show()
        self.webview.connect("load-changed", self._title_changed)

        self.connect("key-press-event", self._key_pressed)

        self.webview.load_uri(uri)

    def _title_changed(self, widget, event):
        self.set_title(self.webview.get_title() or "")

    def _zoom_in(self):
        cur = self.webview.get_zoom_level()
        if cur < 3:
            self.webview.set_zoom_level(cur * 1.1)

    def _zoom_out(self):
        cur = self.webview.get_zoom_level()
        if cur > 0.5:
            self.webview.set_zoom_level(cur / 1.1)

    def _key_pressed(self, widget, event):
        modifiers = Gtk.accelerator_get_default_mod_mask()
        mapping = {Gdk.KEY_r: self.webview.reload,
                   Gdk.KEY_plus: self._zoom_in,
                   Gdk.KEY_equal: self._zoom_in,
                   Gdk.KEY_minus: self._zoom_out,
                   Gdk.KEY_w: Gtk.main_quit,
                   Gdk.KEY_q: Gtk.main_quit}

        if event.state & modifiers == Gdk.ModifierType.CONTROL_MASK and event.keyval in mapping:
            mapping[event.keyval]()


class CockpitClient(Gtk.Application):
    def __init__(self):
        super().__init__(application_id='org.cockpit_project.CockpitClient')

        self.add_main_option('external-ws', 0, GLib.OptionFlags.NONE, GLib.OptionArg.STRING,
                             'Connect to existing cockpit-ws on the given URL')
        self.add_main_option('disable-uniqueness', 0, GLib.OptionFlags.NONE, GLib.OptionArg.NONE,
                             'Disable GApplication single-instance mode')

    def do_startup(self):
        Gtk.Application.do_startup(self)

        context = WebKit2.WebContext.get_default()
        data_manager = context.get_website_data_manager()
        data_manager.set_network_proxy_settings(WebKit2.NetworkProxyMode.NO_PROXY, None)
        context.set_sandbox_enabled(True)

        self.uri = self.ws.start()

    def do_activate(self):
        CockpitClientWindow(self, self.uri).present()

    def do_shutdown(self):
        self.ws.stop()

        Gtk.Application.do_shutdown(self)

    def do_handle_local_options(self, options):
        if options.lookup_value('disable-uniqueness'):
            self.flags = Gio.ApplicationFlags.NON_UNIQUE

        if external_ws := options.lookup_value('external-ws'):
            self.ws = ExternalCockpitWs(external_ws.get_string())

        else:
            logging.error('error: --external-ws option is mandatory')
            return 1

        return -1


class ExternalCockpitWs:
    def __init__(self, uri):
        self.uri = uri

    def start(self):
        return self.uri

    def stop(self):
        pass


if __name__ == "__main__":
    app = CockpitClient()
    app.run(sys.argv)
