#!/usr/bin/env python3

# This file is part of Cockpit.
#
# Copyright (C) 2018 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

MAX_PRIORITY = 9

import argparse
import json
import random
import ssl
import subprocess
import sys
import time

import pika
from task import redhat_network


def main():
    parser = argparse.ArgumentParser(description='Bot: read a single test command from the queue and execute it')
    parser.add_argument('--amqp', default='localhost:5671',
                        help='The host:port of the AMQP server to consume from (default: %(default)s)')
    opts = parser.parse_args()

    try:
        host, port = opts.amqp.split(':')
    except ValueError:
        parser.error('Please format --amqp as host:port')

    connection = pika.BlockingConnection(pika.ConnectionParameters(
        host=host,
        port=int(port),
        ssl=True,
        ssl_options=pika.SSLOptions(
            ssl_version=ssl.PROTOCOL_TLSv1_2,
            cafile='/run/secrets/webhook/ca.pem',
            keyfile='/run/secrets/webhook/amqp-client.key',
            certfile='/run/secrets/webhook/amqp-client.pem',
            server_hostname=host),
        credentials=pika.credentials.ExternalCredentials()))
    channel = connection.channel()

    try:
        declare_public_result = channel.queue_declare(queue='public', passive=True, auto_delete=False)
        declare_rhel_result = channel.queue_declare(queue='rhel', passive=True, auto_delete=False)
    except pika.exceptions.ChannelClosed:
        print("One of the queues doesn't exist")
        return 1

    queue='public'
    if redhat_network():
        # Try the rhel queue if the public queue is empty
        if declare_public_result.method.message_count == 0:
            queue = 'rhel'
        # If both are non-empty, shuffle
        elif declare_rhel_result.method.message_count > 0:
            queue = ['public', 'rhel'][random.randrange(2)]

    # Get one item from the queue if present
    method_frame, header_frame, body = channel.basic_get(queue=queue)
    if method_frame:
        ret = 0
        body = json.loads(body)
        sys.stderr.write("Consuming {0} task:\n{1}\n".format(body['type'],json.dumps(body, indent=2, sort_keys=True)))
        sys.stderr.flush()
        p = subprocess.Popen(body['command'], shell=True)
        while p.poll() is None:
            connection.process_data_events()
            time.sleep(3)

        if p.returncode in [0, 2]:
            channel.basic_ack(method_frame.delivery_tag)
    else:
        # nothing in queue, no work done
        ret = 1

    connection.close()
    return ret

if __name__ == '__main__':
    sys.exit(main())
