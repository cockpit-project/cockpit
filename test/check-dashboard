#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

from testlib import *

class TestDashboard(MachineCase):
    def wait_dashboard_addresses(self, b, expected):
        b.wait_js_func(
            """(function (expected) {
            var page = cockpit_page_from_id('dashboard');
            var actual = page.dbus_clients.map(function (c) { return c.target });
            return expected.sort().toString() == actual.sort().toString();
            })""", expected)

    def wait_discovered_addresses(self, b, expected):
        b.wait_js_func(
            """(function (expected) {
            var actual = $('#dashboard_setup_address_discovered li').map(function(i,e) { return $(e).text() }).get();
            return expected.sort().toString() == actual.sort().toString();
            })""", expected)

    def get_address_map(self, b):
        map = { }
        dash = b.eval_js("return cockpit_page_from_id('dashboard').dbus_clients.map(function (c) { return c.target });")
        for i in range (0, len(dash)):
            map[dash[i]] = i;
        return map

    def machine_action(self, b, address, action):
        map = self.get_address_map(b)
        b.click_action_btn('#dashboard-machines li:nth-child(%d) .cockpit-machine-action' % (map[address]+1),
                           action)

    def add_machine(self, b, address):
        b.click('#dashboard-add-server')
        b.wait_popup('dashboard_setup_server_dialog')
        b.set_val('#dashboard_setup_address', address)
        self.add_machine_finish(b)

    def add_machine_finish(self, b):
        b.wait_text('#dashboard_setup_next', "Next")
        b.click('#dashboard_setup_next')
        b.wait_text('#dashboard_setup_next', "Add server")
        b.click('#dashboard_setup_next')
        b.wait_text('#dashboard_setup_next', "Close")
        b.click('#dashboard_setup_next')
        b.wait_popdown('dashboard_setup_server_dialog')

    def testBasic(self):
        b = self.browser
        m = self.machine

        self.login_and_go("dashboard")
        self.wait_dashboard_addresses (b, [ "localhost" ])

        # We don't bother to start multiple machines.  Instead, we add
        # the same machine multiple times by using different ways to
        # address it.

        self.add_machine (b, "127.0.0.1")
        self.wait_dashboard_addresses (b, [ "localhost", "127.0.0.1" ])

        self.add_machine (b, m.address)
        self.wait_dashboard_addresses (b, [ "localhost", "127.0.0.1", m.address ])

        # Remove two
        self.machine_action (b, "127.0.0.1", "Remove")
        self.wait_dashboard_addresses (b, [ "localhost", m.address ])
        self.machine_action (b, "localhost", "Remove")
        self.wait_dashboard_addresses (b, [ m.address ])

        # Start second browser and check that it is in sync
        b2 = self.new_browser()
        b2.login_and_go("dashboard")
        self.wait_dashboard_addresses (b2, [ m.address ])

        # Check that the two removed machines are listed in "Add Server"
        b.click('#dashboard-add-server')
        b.wait_popup('dashboard_setup_server_dialog')
        self.wait_discovered_addresses (b, [ "127.0.0.1", "localhost" ])

        # Add one again
        b.set_val('#dashboard_setup_address', "localhost")
        self.add_machine_finish(b)
        self.wait_dashboard_addresses (b, [ "localhost", m.address ])

        # Open "Add Server" on second browser
        b2.click('#dashboard-add-server')
        b2.wait_popup('dashboard_setup_server_dialog')
        self.wait_discovered_addresses (b2, [ "127.0.0.1" ])

        # Remove one from dashboard of first browser and check that it
        # appears in dialog of second
        self.machine_action (b, m.address, "Remove")
        self.wait_discovered_addresses (b2, [ "127.0.0.1", m.address ])

        b2.click('#dashboard_setup_server_dialog button.close')
        b2.wait_popdown('dashboard_setup_server_dialog')

        self.allow_journal_messages('.*: .* host key for server is not known: .*')

    def testSetup(self):
        b = self.browser

        m1 = self.machine
        m2 = self.new_machine()
        m2.start()
        m2.wait_boot()

        # Create some users on m1 and m2.

        m1.execute("useradd junior -G cockpit-user-admin")
        m1.execute("echo foobar | passwd --stdin junior")

        m1.execute("useradd senior -G wheel")
        m1.execute("echo foobar | passwd --stdin senior")
        m2.execute("useradd senior")
        m2.execute("echo barfoo | passwd --stdin senior")

        # Sync them via Setup.

        self.login_and_go("dashboard")
        self.wait_dashboard_addresses (b, [ "localhost" ])
        b.click('#dashboard-add-server')
        b.wait_popup('dashboard_setup_server_dialog')
        b.set_val('#dashboard_setup_address', m2.address)
        b.set_checked('#dashboard_setup_address_reuse_creds', False)
        b.wait_text('#dashboard_setup_next', "Next")
        b.click('#dashboard_setup_next')
        b.wait_visible('#dashboard_setup_login_tab')
        b.set_val('#dashboard_setup_login_user', "admin")
        b.set_val('#dashboard_setup_login_password', "notthepassword")
        b.click('#dashboard_setup_next')
        b.wait_text('#dashboard_setup_login_error', "Login failed")
        b.set_val('#dashboard_setup_login_password', "foobar")
        b.click('#dashboard_setup_next')
        b.wait_text('#dashboard_setup_next', "Add server")

        # Before starting the setup, we wait for cockpitd to have
        # loaded all accounts.  Otherwise, setup would try to create
        # accounts that already exist, and fail.
        #
        b.wait_dbus_prop("com.redhat.Cockpit.Account", "UserName", "admin", m2.address);
        b.wait_dbus_prop("com.redhat.Cockpit.Account", "UserName", "senior", m2.address);

        b.click('#dashboard_setup_next')
        b.wait_text('#dashboard_setup_next', "Close")
        b.click('#dashboard_setup_next')
        b.wait_popdown('dashboard_setup_server_dialog')

        # Check the result

        def password_hash(machine, user):
            return machine.execute("getent shadow %s | cut -d: -f2" % user)

        def groups(machine, user):
            return machine.execute("groups %s | cut -d: -f2" % user)

        self.assertEqual(password_hash(m1, "junior"),
                         password_hash(m2, "junior"))

        self.assertEqual(password_hash(m1, "senior"),
                         password_hash(m2, "senior"))

        self.assertIn ("cockpit-user-admin", groups(m2, "junior"))
        self.assertIn ("wheel", groups(m2, "senior"))

        self.allow_journal_messages("peer did not close io when expected")

test_main()
